{"version":3,"sources":["../../src/tx/tx-object.js"],"names":["stampit","buildTx","calculateFee","unpackTx","TX_TYPE","encode","isHex","InvalidTxError","TypeError","UnknownTxError","InvalidSignatureError","buildTransaction","type","params","options","Object","values","includes","fee","gas","vsn","rlpEncoded","binary","tx","encodedTx","txObject","unpackTransaction","txType","Uint8Array","initTransaction","TxObject","init","signatures","assign","signed","isSigned","statics","fromString","fromRlp","methods","setProp","props","getSignatures","addSignature","signature","from","isBuffer","calculateMinFee"],"mappings":"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","sourcesContent":["/**\n * TxObject module\n * @module @aeternity/aepp-sdk/es/tx/tx-object\n * @export TxObject\n * @example import TxObject from '@aeternity/aepp-sdk/es/tx/tx-object'\n */\nimport stampit from '@stamp/it'\nimport { buildTx, calculateFee, unpackTx } from './builder'\nimport { TX_TYPE } from './builder/schema'\nimport { encode } from './builder/helpers'\nimport { isHex } from '../utils/string'\nimport { InvalidTxError, TypeError, UnknownTxError, InvalidSignatureError } from '../utils/errors'\n\n/**\n * Build transaction from object\n * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n * @param {String} type Transaction type\n * @param {Object} params Transaction params\n * @param {Object} [options={}] Options\n * @throws {Error} Arguments validation error's\n * @return {{\n *   encodedTx: String, binary: Array<Buffer>, rlpEncoded: Buffer, params: Object, type: String\n * }}\n */\nconst buildTransaction = (type, params, options = {}) => {\n  if (typeof params !== 'object') throw new TypeError('tx \"params\" should be an object')\n  if (typeof type !== 'string' || !Object.values(TX_TYPE).includes(type)) throw new UnknownTxError(`Unknown transaction type ${type}`)\n  const fee = calculateFee(params.fee, type, { gas: params.gas, params, vsn: params.vsn })\n  const { rlpEncoded, binary, tx: encodedTx, txObject } = buildTx(\n    { ...params, fee }, type, { vsn: params.vsn, ...options }\n  )\n  return { rlpEncoded, binary, encodedTx, params: txObject, type }\n}\n\n/**\n * Unpack transaction from RLP encoded binary or base64c string\n * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n * @param {Uint8Array|String} tx RLP encoded binary or base64c(rlpBinary) string\n * @throws {Error} Arguments validation error's\n * @return {{\n *   encodedTx: String, binary: Array<Buffer>, rlpEncoded: Buffer, type: String, params: Object\n * }}\n */\nconst unpackTransaction = (tx) => {\n  if (!tx) throw new InvalidTxError(`Invalid transaction: ${tx}`)\n  if (typeof tx === 'string') {\n    const { txType: type, tx: params, rlpEncoded, binary } = unpackTx(tx)\n    return { encodedTx: tx, type, params, rlpEncoded, binary }\n  }\n  if (tx instanceof Uint8Array) {\n    const { txType: type, tx: params, rlpEncoded, binary } = unpackTx(tx, true)\n    return { encodedTx: encode(tx, 'tx'), type, params, rlpEncoded, binary }\n  }\n  throw new InvalidTxError(`\"tx\" should be a string or Uint8Array, got ${tx} instead`)\n}\n\n/**\n * Helper which build or unpack transaction base on constructor arguments\n * Need to provide one of arguments: [tx] -> unpack flow or [params, type] -> build flow\n * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n * @param {Buffer|String} [tx] Transaction rlp binary or vase64c string\n * @param {Object} params Transaction params\n * @param {String} type Transaction type\n * @param {Object} [options={}] Options\n * @throws {Error} Arguments validation error's\n * @return {{\n *   encodedTx: String, binary: Array<Buffer>, rlpEncoded: Buffer, type: String, params: Object\n * }}\n */\nconst initTransaction = ({ tx, params, type, options = {} } = {}) => {\n  if (params && type) return buildTransaction(type, params, options)\n  if (tx) return unpackTransaction(tx)\n  throw new InvalidTxError('Invalid TxObject arguments. Please provide one of { tx: \"tx_asdasd23...\" } or { type: \"spendTx\", params: {...} }')\n}\n\n/**\n * Transaction Validator Stamp\n * This stamp give us possibility to unpack and validate some of transaction properties,\n * to make sure we can post it to the chain\n * @function\n * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n * @rtype Stamp\n * @param {Object} [options={}] - Initializer object\n * @param {Buffer|String} [options.tx] - Rlp binary or base64c transaction\n * @param {Object} [options.params] - Transaction params\n * @param {String} [options.type] - Transaction type\n * @param {Object} [options.options] - Build options\n * @return {Object} TxObject instance\n * @example TxObject({ params: {...}, type: 'spendTx' })\n */\nexport const TxObject = stampit({\n  init ({ tx, params, type, options = {} } = {}) {\n    this.options = options\n    this.signatures = []\n    Object.assign(this, initTransaction({ tx, params, type, options }))\n\n    if (this.type === TX_TYPE.signed) {\n      const { signatures, encodedTx: { txType, tx } } = this.params\n      this.signatures = signatures\n      this.params = tx\n      this.type = txType\n      this.isSigned = true\n    }\n  },\n  statics: {\n    /**\n     * Create txObject from base64c RLP encoded transaction string with 'tx_' prefix\n     * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n     * @static\n     * @param {String} tx Transaction string (tx_23fsdgsdfg...)\n     * @return {TxObject}\n     */\n    fromString: (tx) => TxObject({ tx }),\n    /**\n     * Create txObject from transaction RLP binary\n     * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n     * @static\n     * @param {Buffer} tx Transaction RLP binary\n     * @return {TxObject}\n     */\n    fromRlp: (tx) => TxObject({ tx })\n  },\n  methods: {\n    /**\n     * Rebuild transaction with new params and recalculate fee\n     * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n     * @param {Object} props Transaction properties for update\n     * @param options\n     * @return {TxObject}\n     */\n    setProp (props = {}, options = {}) {\n      if (typeof props !== 'object') throw new TypeError('Props should be an object')\n      this.isSigned = false\n      this.signatures = []\n      Object.assign(\n        this,\n        buildTransaction(\n          this.type, { ...this.params, ...props, fee: null }, { ...this.options, ...options }\n        )\n      )\n      return this\n    },\n    /**\n     * Get signatures\n     * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n     * @return {Array} Array of signatures\n     */\n    getSignatures () {\n      return this.signatures\n    },\n    /**\n     * Add signature\n     * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n     * @param {Buffer|String} signature Signature to add ( Can be: Buffer | Uint8Array | HexString )\n     * @return {void}\n     */\n    addSignature (signature) {\n      signature = isHex(signature) ? Buffer.from(signature, 'hex') : signature\n      if (!Buffer.isBuffer(signature) && !(signature instanceof Uint8Array)) throw new InvalidSignatureError('Invalid signature, signature must be of type Buffer or Uint8Array')\n      Object.assign(\n        this,\n        buildTransaction(\n          TX_TYPE.signed,\n          { encodedTx: this.rlpEncoded, signatures: [[...this.signatures, signature]] }\n        )\n      )\n\n      const { signatures, encodedTx: { txType, tx } } = this.params\n      this.signatures = signatures\n      this.params = tx\n      this.type = txType\n      this.isSigned = true\n    },\n    /**\n     * Calculate fee\n     * @alias module:@aeternity/aepp-sdk/es/tx/tx-object\n     * @param {Object} props\n     * @return {String} fee\n     */\n    calculateMinFee (props = {}) {\n      const params = { ...this.params, ...props }\n      return calculateFee(0, this.type, { gas: params.gas, params, vsn: params.vsn })\n    }\n  }\n})\n\nexport default TxObject\n"],"file":"tx-object.mjs"}