{"version":3,"sources":["../../src/tx/validator.js"],"names":["verify","hash","encode","decode","BigNumber","MIN_GAS_PRICE","PROTOCOL_VM_ABI","TX_TYPE","calculateFee","unpackTx","UnsupportedProtocolError","validators","encodedTx","signatures","account","node","parentTxTypes","undefined","length","prefix","from","nodeNetworkId","includes","payingFor","join","txWithNetworkId","concat","rlpEncoded","txHashWithNetworkId","decodedPub","id","message","key","checkedKeys","tx","txType","verifyTransaction","fee","minFee","gas","params","showWarning","vsn","VSN","lte","ttl","height","amount","nameFee","cost","plus","minus","balance","toFixed","nonce","gaMeta","validNonce","gasPrice","ctVersion","abiVersion","consensusProtocolVersion","getNodeInfo","protocol","txProtocol","Object","entries","some","value","JSON","stringify","contractId","contractCall","active","api","getContract","error","response","body","reason","getSenderAddress","map","filter","a","replace","transaction","address","signed","Promise","all","getAccountByPubkey","catch","getCurrentKeyBlockHeight","v","flat"],"mappings":"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","sourcesContent":["import { verify, hash } from '../utils/crypto'\nimport { encode, decode } from './builder/helpers'\n\nimport BigNumber from 'bignumber.js'\nimport { MIN_GAS_PRICE, PROTOCOL_VM_ABI, TX_TYPE } from './builder/schema'\nimport { calculateFee, unpackTx } from './builder'\nimport { UnsupportedProtocolError } from '../utils/errors'\n\n/**\n * Transaction validator\n * @module @aeternity/aepp-sdk/es/tx/validator\n * @export verifyTransaction\n * @example import { verifyTransaction } from '@aeternity/aepp-sdk'\n */\n\nconst validators = [\n  ({ encodedTx, signatures }, { account, node, parentTxTypes }) => {\n    if ((encodedTx ?? signatures) === undefined) return []\n    if (signatures.length !== 1) return [] // TODO: Support multisignature?\n    const prefix = Buffer.from([\n      node.nodeNetworkId,\n      ...parentTxTypes.includes(TX_TYPE.payingFor) ? ['inner_tx'] : []\n    ].join('-'))\n    const txWithNetworkId = Buffer.concat([prefix, encodedTx.rlpEncoded])\n    const txHashWithNetworkId = Buffer.concat([prefix, hash(encodedTx.rlpEncoded)])\n    const decodedPub = decode(account.id, 'ak')\n    if (verify(txWithNetworkId, signatures[0], decodedPub) ||\n      verify(txHashWithNetworkId, signatures[0], decodedPub)) return []\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have' +\n        ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures']\n    }]\n  },\n  ({ encodedTx, tx }, { node, parentTxTypes, txType }) => {\n    if ((encodedTx ?? tx) === undefined) return []\n    return verifyTransaction(\n      encode((encodedTx ?? tx).rlpEncoded, 'tx'),\n      node,\n      [...parentTxTypes, txType]\n    )\n  },\n  (tx, { txType }) => {\n    if (tx.fee === undefined) return []\n    const minFee = calculateFee(0, txType, {\n      gas: +tx.gas || 0, params: tx, showWarning: false, vsn: tx.VSN\n    })\n    if (new BigNumber(minFee).lte(tx.fee)) return []\n    return [{\n      message: `Fee ${tx.fee} is too low, minimum fee for this transaction is ${minFee}`,\n      key: 'InsufficientFee',\n      checkedKeys: ['fee']\n    }]\n  },\n  ({ ttl }, { height }) => {\n    if (ttl === undefined) return []\n    ttl = +ttl\n    if (ttl === 0 || ttl >= height) return []\n    return [{\n      message: `TTL ${ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl']\n    }]\n  },\n  ({ amount, fee, nameFee, tx }, { account, parentTxTypes, txType }) => {\n    if ((amount ?? fee ?? nameFee) === undefined) return []\n    const cost = new BigNumber(fee).plus(nameFee || 0).plus(amount || 0)\n      .plus(txType === TX_TYPE.payingFor ? tx.tx.encodedTx.tx.fee : 0)\n      .minus(parentTxTypes.includes(TX_TYPE.payingFor) ? fee : 0)\n    if (cost.lte(account.balance)) return []\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost.toFixed()}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee']\n    }]\n  },\n  ({ nonce }, { account, parentTxTypes }) => {\n    if (nonce === undefined || parentTxTypes.includes(TX_TYPE.gaMeta)) return []\n    nonce = +nonce\n    const validNonce = account.nonce + 1\n    if (nonce === validNonce) return []\n    return [{\n      ...nonce < validNonce\n        ? {\n            message: `Nonce ${nonce} is already used, valid nonce is ${validNonce}`,\n            key: 'NonceAlreadyUsed'\n          }\n        : {\n            message: `Nonce ${nonce} is too high, valid nonce is ${validNonce}`,\n            key: 'NonceHigh'\n          },\n      checkedKeys: ['nonce']\n    }]\n  },\n  ({ gasPrice }) => {\n    if (gasPrice === undefined) return []\n    if (gasPrice >= MIN_GAS_PRICE) return []\n    return [{\n      message: `Gas price ${gasPrice} must be bigger then ${MIN_GAS_PRICE}`,\n      key: 'MinGasPrice',\n      checkedKeys: ['gasPrice']\n    }]\n  },\n  ({ ctVersion, abiVersion }, { txType, node }) => {\n    const { consensusProtocolVersion } = node.getNodeInfo()\n    const protocol = PROTOCOL_VM_ABI[consensusProtocolVersion]\n    if (!protocol) throw new UnsupportedProtocolError(`Unsupported protocol: ${consensusProtocolVersion}`)\n    // If not contract create tx\n    if (!ctVersion) ctVersion = { abiVersion }\n    const txProtocol = protocol[txType]\n    if (!txProtocol) return []\n    if (Object.entries(ctVersion).some(([key, value]) => !txProtocol[key].includes(+value))) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(txProtocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion']\n      }]\n    }\n    return []\n  },\n  async ({ contractId }, { txType, node }) => {\n    if (TX_TYPE.contractCall !== txType) return []\n    try {\n      const { active } = await node.api.getContract(contractId)\n      if (active) return []\n      return [{\n        message: `Contract ${contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId']\n      }]\n    } catch (error) {\n      if (!error.response?.body?.reason) throw error\n      return [{\n        message: error.response.body.reason,\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId']\n      }]\n    }\n  }\n]\n\nconst getSenderAddress = tx => [\n  'senderId', 'accountId', 'ownerId', 'callerId',\n  'oracleId', 'fromId', 'initiator', 'gaId', 'payerId'\n]\n  .map(key => tx[key])\n  .filter(a => a)\n  .map(a => a.replace(/^ok_/, 'ak_'))[0]\n\n/**\n * Transaction Validator\n * This function validates some of transaction properties,\n * to make sure it can be posted it to the chain\n * @function\n * @alias module:@aeternity/aepp-sdk/es/tx/validator\n * @rtype (tx: String, node) => void\n * @param {String} transaction Base64Check-encoded transaction\n * @param {Object} node Node to validate transaction against\n * @param {String[]} [parentTxTypes] Types of parent transactions\n * @return {Promise<Object[]>} Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction (transaction, node, parentTxTypes = []) {\n  const { tx, txType } = unpackTx(transaction)\n\n  const address = getSenderAddress(tx) ??\n    (txType === TX_TYPE.signed ? getSenderAddress(tx.encodedTx.tx) : null)\n  const [account, { height }] = await Promise.all([\n    address && node.api.getAccountByPubkey(address).catch(() => ({\n      id: address,\n      balance: new BigNumber(0),\n      nonce: 0\n    })),\n    node.api.getCurrentKeyBlockHeight()\n  ])\n\n  return (await Promise.all(\n    validators.map(v => v(tx, { txType, node, account, height, parentTxTypes })))\n  ).flat()\n}\n"],"file":"validator.mjs"}