{"version":3,"sources":["../../src/tx/tx.js"],"names":["ChainNode","Tx","buildTx","calculateFee","unpackTx","ABI_VERSIONS","MIN_GAS_PRICE","PROTOCOL_VM_ABI","TX_TYPE","TX_TTL","buildContractId","encode","TxObject","ArgumentError","UnsupportedABIversionError","UnsupportedVMversionError","UnsupportedProtocolError","UnknownTxError","spendTx","senderId","recipientId","amount","payload","fee","ttl","nonce","prepareTxParams","spend","arguments","tx","nativeMode","params","type","encodedTx","api","postSpend","parseInt","namePreclaimTx","accountId","commitmentId","namePreClaim","postNamePreclaim","nameClaimTx","name","nameSalt","vsn","nameClaim","postNameClaim","nameTransferTx","nameId","nameTransfer","postNameTransfer","nameUpdateTx","nameTtl","pointers","clientTtl","nameUpdate","postNameUpdate","nameRevokeTx","nameRevoke","postNameRevoke","contractCreateTx","ownerId","code","vmVersion","abiVersion","gas","gasPrice","callData","ctVersion","getVmVersion","contractCreate","contractId","postContractCreate","contractCallTx","callerId","contractCall","postContractCall","oracleRegisterTx","queryFormat","responseFormat","queryFee","oracleTtl","NO_ABI","oracleRegister","postOracleRegister","oracleExtendTx","oracleId","oracleExtend","postOracleExtend","oraclePostQueryTx","responseTtl","query","queryTtl","oracleQuery","postOracleQuery","oracleRespondTx","queryId","response","oracleResponse","postOracleRespond","channelCloseSoloTx","channelId","fromId","poi","channelCloseSolo","postChannelCloseSolo","channelSlashTx","channelSlash","postChannelSlash","channelSettleTx","initiatorAmountFinal","responderAmountFinal","channelSettle","postChannelSettle","channelSnapshotSoloTx","channelSnapshotSolo","postChannelSnapshotSolo","gaAttachTx","authFun","gaAttach","payingForTx","payerId","args","payingFor","txType","consensusProtocolVersion","getNodeInfo","supportedProtocol","protocolForTX","includes","calculateTtl","relative","height","getCurrentKeyBlock","getAccountNonce","accountNonce","getAccountByPubkey","catch","n","t","f","absoluteTtl","strategy","getAccountNextNonce","e","nextNonce","call","showWarning","Transaction","compose","init","props","methods"],"mappings":"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","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2018 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Transaction module\n * @module @aeternity/aepp-sdk/es/tx/tx\n * @export Transaction\n * @example import { Transaction } from '@aeternity/aepp-sdk'\n */\n\nimport ChainNode from '../chain/node'\nimport Tx from './'\nimport { buildTx, calculateFee, unpackTx } from './builder'\nimport { ABI_VERSIONS, MIN_GAS_PRICE, PROTOCOL_VM_ABI, TX_TYPE, TX_TTL } from './builder/schema'\nimport { buildContractId, encode } from './builder/helpers'\nimport { TxObject } from './tx-object'\nimport {\n  ArgumentError,\n  UnsupportedABIversionError,\n  UnsupportedVMversionError,\n  UnsupportedProtocolError,\n  UnknownTxError\n} from '../utils/errors'\n\nasync function spendTx ({ senderId, recipientId, amount, payload = '' }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.spend, { senderId, ...arguments[0], payload }\n  )\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: {\n            ...arguments[0],\n            recipientId,\n            senderId,\n            nonce,\n            ttl,\n            payload\n          },\n          type: TX_TYPE.spend\n        }).encodedTx\n      }\n    : await this.api.postSpend({\n      ...arguments[0],\n      amount: parseInt(amount),\n      recipientId,\n      senderId,\n      nonce,\n      ttl,\n      fee: parseInt(fee),\n      payload\n    })\n\n  return tx\n}\n\nasync function namePreclaimTx ({ accountId, commitmentId }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.namePreClaim, { senderId: accountId, ...arguments[0] }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { ...arguments[0], nonce, ttl, fee },\n          type: TX_TYPE.namePreClaim\n        }).encodedTx\n      }\n    : await this.api.postNamePreclaim({ ...arguments[0], nonce, ttl, fee: parseInt(fee) })\n\n  return tx\n}\n\nasync function nameClaimTx ({ accountId, name, nameSalt, vsn = 2 }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.nameClaim, { senderId: accountId, ...arguments[0], vsn }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { ...arguments[0], nonce, ttl, fee, vsn },\n          type: TX_TYPE.nameClaim\n        }).encodedTx\n      }\n    : await this.api.postNameClaim({\n      ...arguments[0], nonce, ttl, fee: parseInt(fee), name: encode(name, 'nm')\n    })\n\n  return tx\n}\n\nasync function nameTransferTx ({ accountId, nameId, recipientId }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.nameTransfer, { senderId: accountId, ...arguments[0] }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { ...arguments[0], recipientId, nonce, ttl, fee },\n          type: TX_TYPE.nameTransfer\n        }).encodedTx\n      }\n    : await this.api.postNameTransfer({\n      ...arguments[0], recipientId, nonce, ttl, fee: parseInt(fee)\n    })\n\n  return tx\n}\n\nasync function nameUpdateTx ({ accountId, nameId, nameTtl, pointers, clientTtl }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.nameUpdate, { senderId: accountId, ...arguments[0] }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { ...arguments[0], nonce, ttl, fee },\n          type: TX_TYPE.nameUpdate\n        }).encodedTx\n      }\n    : await this.api.postNameUpdate({ ...arguments[0], nonce, ttl, fee: parseInt(fee) })\n\n  return tx\n}\n\nasync function nameRevokeTx ({ accountId, nameId }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.nameRevoke, { senderId: accountId, ...arguments[0] }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { ...arguments[0], nonce, ttl, fee },\n          type: TX_TYPE.nameRevoke\n        }).encodedTx\n      }\n    : await this.api.postNameRevoke({ ...arguments[0], nonce, ttl, fee: parseInt(fee) })\n\n  return tx\n}\n\nasync function contractCreateTx ({\n  ownerId, code, vmVersion, abiVersion, amount, gas, gasPrice = MIN_GAS_PRICE, callData\n}) {\n  // Get VM_ABI version\n  const ctVersion = this.getVmVersion(TX_TYPE.contractCreate, arguments[0])\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.contractCreate, { senderId: ownerId, ...arguments[0], ctVersion, gasPrice }\n  )\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  return this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { ...arguments[0], nonce, ttl, fee, ctVersion, gasPrice },\n          type: TX_TYPE.contractCreate\n        }).encodedTx,\n        contractId: buildContractId(ownerId, nonce)\n      }\n    : this.api.postContractCreate({\n      ...arguments[0],\n      nonce,\n      ttl,\n      fee: parseInt(fee),\n      gas: parseInt(gas),\n      gasPrice,\n      vmVersion: ctVersion.vmVersion,\n      abiVersion: ctVersion.abiVersion\n    })\n}\n\nasync function contractCallTx ({\n  callerId, contractId, abiVersion, amount, gas, gasPrice = MIN_GAS_PRICE, callData\n}) {\n  const ctVersion = this.getVmVersion(TX_TYPE.contractCall, arguments[0])\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.contractCall,\n    { senderId: callerId, ...arguments[0], gasPrice, abiVersion: ctVersion.abiVersion }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { ...arguments[0], nonce, ttl, fee, abiVersion: ctVersion.abiVersion, gasPrice },\n          type: TX_TYPE.contractCall\n        }).encodedTx\n      }\n    : await this.api.postContractCall({\n      ...arguments[0],\n      nonce,\n      ttl,\n      fee: parseInt(fee),\n      gas: parseInt(gas),\n      gasPrice,\n      abiVersion: ctVersion.abiVersion\n    })\n\n  return tx\n}\n\nasync function oracleRegisterTx ({\n  accountId, queryFormat, responseFormat, queryFee, oracleTtl, abiVersion = ABI_VERSIONS.NO_ABI\n}) {\n  // const { abiVersion: abi } = this.getVmVersion(TX_TYPE.oracleRegister, arguments[0])\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.oracleRegister, { senderId: accountId, ...arguments[0], abiVersion }\n  )\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: {\n            accountId,\n            queryFee,\n            abiVersion,\n            fee,\n            oracleTtl,\n            nonce,\n            ttl,\n            queryFormat,\n            responseFormat\n          },\n          type: TX_TYPE.oracleRegister\n        }).encodedTx\n      }\n    : await this.api.postOracleRegister({\n      accountId,\n      queryFee,\n      abiVersion,\n      fee: parseInt(fee),\n      oracleTtl,\n      nonce,\n      ttl,\n      queryFormat,\n      responseFormat\n    })\n\n  return tx\n}\n\nasync function oracleExtendTx ({ oracleId, callerId, oracleTtl }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.oracleExtend, { senderId: callerId, ...arguments[0] }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { oracleId, fee, oracleTtl, nonce, ttl },\n          type: TX_TYPE.oracleExtend\n        }).encodedTx\n      }\n    : await this.api.postOracleExtend({ oracleId, fee: parseInt(fee), oracleTtl, nonce, ttl })\n\n  return tx\n}\n\nasync function oraclePostQueryTx ({ oracleId, responseTtl, query, queryTtl, queryFee, senderId }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.oracleQuery, { senderId, ...arguments[0] }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { oracleId, responseTtl, query, queryTtl, fee, queryFee, ttl, nonce, senderId },\n          type: TX_TYPE.oracleQuery\n        }).encodedTx\n      }\n    : await this.api.postOracleQuery({\n      oracleId,\n      responseTtl,\n      query,\n      queryTtl,\n      fee: parseInt(fee),\n      queryFee,\n      ttl,\n      nonce,\n      senderId\n    })\n\n  return tx\n}\n\nasync function oracleRespondTx ({ oracleId, callerId, responseTtl, queryId, response }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.oracleResponse, { senderId: callerId, ...arguments[0] }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? {\n        tx: TxObject({\n          params: { oracleId, responseTtl, queryId, response, fee, ttl, nonce },\n          type: TX_TYPE.oracleResponse\n        }).encodedTx\n      }\n    : await this.api.postOracleRespond({\n      oracleId, responseTtl, queryId, response, fee: parseInt(fee), ttl, nonce\n    })\n  return tx\n}\n\nasync function channelCloseSoloTx ({ channelId, fromId, payload, poi }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.channelCloseSolo, { senderId: fromId, ...arguments[0], payload }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? buildTx({\n      ...arguments[0],\n      channelId,\n      fromId,\n      payload,\n      poi,\n      ttl,\n      fee,\n      nonce\n    }, TX_TYPE.channelCloseSolo)\n    : await this.api.postChannelCloseSolo({\n      ...arguments[0],\n      channelId,\n      fromId,\n      payload,\n      poi,\n      ttl,\n      fee: parseInt(fee),\n      nonce\n    })\n\n  return tx\n}\n\nasync function channelSlashTx ({ channelId, fromId, payload, poi }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.channelSlash, { senderId: fromId, ...arguments[0], payload }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? buildTx({\n      ...arguments[0],\n      channelId,\n      fromId,\n      payload,\n      poi,\n      ttl,\n      fee,\n      nonce\n    }, TX_TYPE.channelSlash)\n    : await this.api.postChannelSlash({\n      ...arguments[0],\n      channelId,\n      fromId,\n      payload,\n      poi,\n      ttl,\n      fee: parseInt(fee),\n      nonce\n    })\n\n  return tx\n}\n\nasync function channelSettleTx ({ channelId, fromId, initiatorAmountFinal, responderAmountFinal }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.channelSettle, { senderId: fromId, ...arguments[0] }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? buildTx({\n      ...arguments[0],\n      channelId,\n      fromId,\n      initiatorAmountFinal,\n      responderAmountFinal,\n      ttl,\n      fee,\n      nonce\n    }, TX_TYPE.channelSettle)\n    : await this.api.postChannelSettle({\n      ...arguments[0],\n      channelId,\n      fromId,\n      initiatorAmountFinal: parseInt(initiatorAmountFinal),\n      responderAmountFinal: parseInt(responderAmountFinal),\n      ttl,\n      fee: parseInt(fee),\n      nonce\n    })\n\n  return tx\n}\n\nasync function channelSnapshotSoloTx ({ channelId, fromId, payload }) {\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.channelSnapshotSolo, { senderId: fromId, ...arguments[0], payload }\n  )\n\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  const { tx } = this.nativeMode\n    ? buildTx({\n      ...arguments[0],\n      channelId,\n      fromId,\n      payload,\n      ttl,\n      fee,\n      nonce\n    }, TX_TYPE.channelSnapshotSolo)\n    : await this.api.postChannelSnapshotSolo({\n      ...arguments[0],\n      channelId,\n      fromId,\n      payload,\n      ttl,\n      fee: parseInt(fee),\n      nonce\n    })\n\n  return tx\n}\n\nasync function gaAttachTx ({\n  ownerId, code, vmVersion, abiVersion, authFun, gas, gasPrice = MIN_GAS_PRICE, callData\n}) {\n  // Get VM_ABI version\n  const ctVersion = this.getVmVersion(TX_TYPE.contractCreate, arguments[0])\n  // Calculate fee, get absolute ttl (ttl + height), get account nonce\n  const { fee, ttl, nonce } = await this.prepareTxParams(\n    TX_TYPE.gaAttach, { senderId: ownerId, ...arguments[0], ctVersion, gasPrice }\n  )\n  // Build transaction using sdk (if nativeMode) or build on `AETERNITY NODE` side\n  return {\n    tx: TxObject({\n      params: { ...arguments[0], nonce, ttl, fee, ctVersion, gasPrice },\n      type: TX_TYPE.gaAttach\n    }).encodedTx,\n    contractId: buildContractId(ownerId, nonce)\n  }\n}\n\nasync function payingForTx ({ tx, payerId, ...args }) {\n  const params = { tx: unpackTx(tx), payerId }\n  const { fee, nonce } = await this.prepareTxParams(TX_TYPE.payingFor, {\n    ...params, ...args, senderId: payerId\n  })\n  return buildTx({ ...params, ...args, fee, nonce }, TX_TYPE.payingFor).tx\n}\n\n/**\n * Validated vm/abi version or get default based on transaction type and NODE version\n *\n * @param {string} txType Type of transaction\n * @param {object} vmAbi Object with vm and abi version fields\n * @return {object} Object with vm/abi version ({ vmVersion: number, abiVersion: number })\n */\nfunction getVmVersion (txType, { vmVersion, abiVersion } = {}) {\n  const { consensusProtocolVersion } = this.getNodeInfo()\n  const supportedProtocol = PROTOCOL_VM_ABI[consensusProtocolVersion]\n  if (!supportedProtocol) throw new UnsupportedProtocolError('Not supported consensus protocol version')\n  const protocolForTX = supportedProtocol[txType]\n  if (!protocolForTX) throw new UnknownTxError('Not supported tx type')\n\n  abiVersion = abiVersion || protocolForTX.abiVersion[0]\n  vmVersion = vmVersion || protocolForTX.vmVersion[0]\n  if (!protocolForTX.vmVersion.includes(vmVersion)) {\n    throw new UnsupportedVMversionError(`VM VERSION ${vmVersion} do not support by this node. Supported: [${protocolForTX.vmVersion}]`)\n  }\n  if (!protocolForTX.abiVersion.includes(abiVersion)) {\n    throw new UnsupportedABIversionError(`ABI VERSION ${abiVersion} do not support by this node. Supported: [${protocolForTX.abiVersion}]`)\n  }\n\n  return { vmVersion, abiVersion }\n}\n\n/**\n * Compute the absolute ttl by adding the ttl to the current height of the chain\n *\n * @param {number} ttl\n * @param {boolean} relative ttl is absolute or relative(default: true(relative))\n * @return {number} Absolute Ttl\n */\nasync function calculateTtl (ttl = TX_TTL, relative = true) {\n  if (ttl === 0) return 0\n  if (ttl < 0) throw new ArgumentError('ttl', 'greater or equal to 0', ttl)\n\n  if (relative) {\n    const { height } = await this.api.getCurrentKeyBlock()\n    return +(height) + ttl\n  }\n  return ttl\n}\n\n/**\n * Get the next nonce to be used for a transaction for an account\n *\n * @param {string} accountId\n * @param {number} nonce\n * @return {number} Next Nonce\n */\nasync function getAccountNonce (accountId, nonce) {\n  if (nonce) return nonce\n  const { nonce: accountNonce } = await this.api.getAccountByPubkey(accountId)\n    .catch(() => ({ nonce: 0 }))\n  return accountNonce + 1\n}\n\n/**\n * Calculate fee, get absolute ttl (ttl + height), get account nonce\n *\n * @param {String} txType Type of transaction\n * @param {Object} params Object which contains all tx data\n * @return {Object} { ttl, nonce, fee } Object with account nonce, absolute ttl and transaction fee\n */\nasync function prepareTxParams (\n  txType,\n  { senderId, nonce: n, ttl: t, fee: f, gas, absoluteTtl, vsn, strategy }\n) {\n  n = n || (\n    await this.api.getAccountNextNonce(senderId, { strategy }).catch(e => ({ nextNonce: 1 }))\n  ).nextNonce\n  const ttl = await calculateTtl.call(this, t, !absoluteTtl)\n  const fee = calculateFee(\n    f,\n    txType,\n    { showWarning: this.showWarning, gas, params: { ...arguments[1], nonce: n, ttl }, vsn }\n  )\n  return { fee, ttl, nonce: n }\n}\n\n/**\n * Transaction Stamp\n *\n * This is implementation of [Tx](api/tx.md) relays\n * the creation of transactions to {@link module:@aeternity/aepp-sdk/es/Node}.\n * This stamp provide ability to create native transaction's,\n * or transaction's using Node API.\n * As there is no built-in security between Node and client communication,\n * creating transaction using {@link module:@aeternity/aepp-sdk/es/Node} API\n * must never be used for production but can be very useful to verify other\n * implementations.\n * @function\n * @alias module:@aeternity/aepp-sdk/es/tx/tx\n * @rtype Stamp\n * @param {Object} [options={}] - Initializer object\n * @param {Boolean} [options.nativeMode=true] options.nativeMode - Use Native build of transaction's\n * @param {String} options.url - Node url\n * @param {String} options.internalUrl - Node internal url\n * @return {Object} Transaction instance\n * @example Transaction({url: 'https://testnet.aeternity.io/'})\n */\nconst Transaction = ChainNode.compose(Tx, {\n  init ({ nativeMode = true, showWarning = false }) {\n    this.nativeMode = nativeMode\n    this.showWarning = showWarning\n  },\n  props: {\n    nativeMode: true,\n    showWarning: false\n  },\n  methods: {\n    spendTx,\n    namePreclaimTx,\n    nameClaimTx,\n    nameTransferTx,\n    nameUpdateTx,\n    nameRevokeTx,\n    contractCreateTx,\n    contractCallTx,\n    prepareTxParams,\n    oracleRegisterTx,\n    oracleExtendTx,\n    oraclePostQueryTx,\n    oracleRespondTx,\n    channelCloseSoloTx,\n    channelSlashTx,\n    channelSettleTx,\n    channelSnapshotSoloTx,\n    gaAttachTx,\n    payingForTx,\n    getAccountNonce,\n    getVmVersion\n  }\n})\n\nexport default Transaction\n"],"file":"tx.mjs"}