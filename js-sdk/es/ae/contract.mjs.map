{"version":3,"sources":["../../src/ae/contract.js"],"names":["Ae","ContractCompilerHttp","getContractInstance","AMOUNT","MIN_GAS_PRICE","decode","produceNameId","delegateSignatureCommon","ids","opt","signature","sign","concat","from","getNetworkId","map","e","toString","createAensDelegationSignature","contractId","name","address","createOracleDelegationSignature","queryId","compose","methods","deepProps","defaults","gasPrice","amount"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;OAEOA,E;OACAC,oB;OACAC,mB;SACEC,M,EAAQC,a;SACRC,M,EAAQC,a;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,uBAAf,GAA4D;AAAA,MAApBC,GAAoB,uEAAd,EAAc;AAAA,MAAVC,GAAU,uEAAJ,EAAI;AAC1D,QAAMC,SAAS,GAAG,MAAM,KAAKC,IAAL,CACtB,QAAOC,MAAP,CAAc,CACZ,QAAOC,IAAP,CAAY,KAAKC,YAAL,CAAkBL,GAAlB,CAAZ,CADY,EAEZ,GAAGD,GAAG,CAACO,GAAJ,CAAQC,CAAC,IAAIX,MAAM,CAACW,CAAD,CAAnB,CAFS,CAAd,CADsB,EAKtBP,GALsB,CAAxB;AAOA,SAAO,QAAOI,IAAP,CAAYH,SAAZ,EAAuBO,QAAvB,CAAgC,KAAhC,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeC,6BAAf,OAA8E;AAAA,MAAhC;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAgC;AAAA,MAAVX,GAAU,uEAAJ,EAAI;AAC5E,SAAO,KAAKF,uBAAL,CACL,CAAC,MAAM,KAAKc,OAAL,CAAaZ,GAAb,CAAP,EAA0B,IAAGW,IAAI,GAAG,CAACd,aAAa,CAACc,IAAD,CAAd,CAAH,GAA2B,EAAlC,CAA1B,EAAgED,UAAhE,CADK,EAELV,GAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAea,+BAAf,QAAmF;AAAA,MAAnC;AAAEH,IAAAA,UAAF;AAAcI,IAAAA;AAAd,GAAmC;AAAA,MAAVd,GAAU,uEAAJ,EAAI;AACjF,SAAO,KAAKF,uBAAL,CAA6B,CAACgB,OAAD,aAACA,OAAD,cAACA,OAAD,GAAY,MAAM,KAAKF,OAAL,CAAaZ,GAAb,CAAlB,EAAqCU,UAArC,CAA7B,EAA+EV,GAA/E,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeT,EAAE,CAACwB,OAAH,CAAWvB,oBAAX,EAAiC;AAC9CwB,EAAAA,OAAO,EAAE;AACPvB,IAAAA,mBADO;AAEP;AACAK,IAAAA,uBAHO;AAIP;AACAW,IAAAA,6BALO;AAMP;AACAI,IAAAA;AAPO,GADqC;AAU9CI,EAAAA,SAAS,EAAE;AACT1B,IAAAA,EAAE,EAAE;AACF2B,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAExB,aADF;AAERyB,QAAAA,MAAM,EAAE1B;AAFA;AADR;AADK;AAVmC,CAAjC,CAAf","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2021 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Contract module - routines to interact with the Ã¦ternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n *\n * @module @aeternity/aepp-sdk/es/ae/contract\n * @export Contract\n * @example import { Contract } from '@aeternity/aepp-sdk'\n */\n\nimport Ae from './'\nimport ContractCompilerHttp from '../contract/compiler'\nimport getContractInstance from '../contract/aci'\nimport { AMOUNT, MIN_GAS_PRICE } from '../tx/builder/schema'\nimport { decode, produceNameId } from '../tx/builder/helpers'\n\n/**\n * Utility method to create a delegate signature for a contract\n * @function\n * @alias module:@aeternity/aepp-sdk/es/ae/contract\n * @category async\n * @param {String[]} ids The list of id's to prepend\n * @param {Object} [opt={}] options\n * @param {{ onAccount: String | Object }} [opt={}] opt Options\n * @return {Promise<String>} Signature in hex representation\n */\nasync function delegateSignatureCommon (ids = [], opt = {}) {\n  const signature = await this.sign(\n    Buffer.concat([\n      Buffer.from(this.getNetworkId(opt)),\n      ...ids.map(e => decode(e))\n    ]),\n    opt\n  )\n  return Buffer.from(signature).toString('hex')\n}\n\n/**\n * Helper to generate a signature to delegate pre-claim/claim/transfer/revoke of a name to\n * a contract.\n * @function\n * @alias module:@aeternity/aepp-sdk/es/ae/contract\n * @category async\n * @param {String} contractId Contract Id\n * @param {String} [name] The name\n * @param {{ onAccount: String | Object }} [opt={}] opt Options\n * @return {Promise<String>} Signature for delegation\n * @example\n * const aeSdk = await Universal({ ... })\n * const contractId = 'ct_asd2ks...' // contract address\n * const name = 'example.chain' // AENS name\n * const onAccount = await aeSdk.address() // Sign with a specific account\n * // Preclaim signature\n * const params = { contractId }\n * const preclaimSig = await aeSdk.createAensDelegationSignature(params, { onAccount: current })\n * // Claim, transfer and revoke signature\n * const params = { contractId, name }\n * const aensDelegationSig = await contract.createAensDelegationSignature(\n *   params, name, { onAccount: current }\n * )\n */\nasync function createAensDelegationSignature ({ contractId, name }, opt = {}) {\n  return this.delegateSignatureCommon(\n    [await this.address(opt), ...name ? [produceNameId(name)] : [], contractId],\n    opt\n  )\n}\n\n/**\n * Helper to generate a signature to delegate register/extend/respond of a Oracle to a contract.\n * @function\n * @alias module:@aeternity/aepp-sdk/es/ae/contract\n * @category async\n * @param {String} contractId Contract Id\n * @param {String} [queryId] Oracle Query Id\n * @param {{ onAccount: String | Object }} [opt={}] opt Options\n * @return {Promise<String>} Signature for delegation\n * @example\n * const aeSdk = await Universal({ ... })\n * const contractId = 'ct_asd2ks...' // contract address\n * const queryId = 'oq_...' // Oracle Query Id\n * const onAccount = await aeSdk.address() // Sign with a specific account\n * // Oracle register and extend signature\n * const params = { contractId }\n * const oracleDelegationSig = await contract.createOracleDelegationSignature(params, { onAccount })\n * // Oracle respond signature\n * const params = { contractId, queryId }\n * const respondSig = await contract.createOracleDelegationSignature(params, queryId)\n */\nasync function createOracleDelegationSignature ({ contractId, queryId }, opt = {}) {\n  return this.delegateSignatureCommon([queryId ?? await this.address(opt), contractId], opt)\n}\n\n/**\n * Contract Stamp\n *\n * Provide contract implementation\n * {@link module:@aeternity/aepp-sdk/es/ae--Ae} clients.\n * @function\n * @alias module:@aeternity/aepp-sdk/es/ae/contract\n * @rtype Stamp\n * @param {Object} [options={}] - Initializer object\n * @return {Object} Contract instance\n * @example\n * import { Transaction, MemoryAccount, ChainNode } from '@aeternity/aepp-sdk\n *\n * const ContractWithAE = await Contract\n *    .compose(Transaction, MemoryAccount, ChainNode) // AE implementation\n * const client = await ContractWithAe({ url, internalUrl, compilerUrl, keypair, ... })\n *\n */\nexport default Ae.compose(ContractCompilerHttp, {\n  methods: {\n    getContractInstance,\n    // Delegation for contract\n    delegateSignatureCommon,\n    // AENS\n    createAensDelegationSignature,\n    // Oracle\n    createOracleDelegationSignature\n  },\n  deepProps: {\n    Ae: {\n      defaults: {\n        gasPrice: MIN_GAS_PRICE,\n        amount: AMOUNT\n      }\n    }\n  }\n})\n"],"file":"contract.mjs"}