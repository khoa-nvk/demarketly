{"version":3,"sources":["../../src/ae/oracle.js"],"names":["Ae","pause","oracleQueryId","decode","unpackTx","ORACLE_TTL","QUERY_FEE","QUERY_TTL","RESPONSE_TTL","RequestTimedOutError","getOracleObject","oracleId","oracle","api","getOracleByPubkey","oracleQueries","queries","getOracleQueriesByPubkey","pollQueries","pollForQueries","bind","postQuery","postQueryToOracle","respondToQuery","extendOracle","extendOracleTtl","getQuery","getQueryObject","onQuery","interval","_getPollInterval","knownQueryIds","Set","checkNewQueries","filter","id","has","forEach","add","length","stopped","catch","console","error","queryId","q","getOracleQueryByPubkeyAndQueryId","decodedQuery","query","toString","decodedResponse","response","respond","pollForResponse","pollForQueryResponse","data","attempts","i","responseBuffer","String","registerOracle","queryFormat","responseFormat","options","opt","defaults","accountId","address","oracleRegisterTx","send","slice","queryFee","senderId","oraclePostQueryTx","tx","nonce","oracleTtl","callerId","oracleExtendTx","oracleRespondTx","Oracle","compose","methods","deepProps","queryTtl","responseTtl"],"mappings":"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","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2018 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Oracle module - routines to interact with the Ã¦ternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n * @module @aeternity/aepp-sdk/es/ae/oracle\n * @export Oracle\n * @example import { Oracle } from '@aeternity/aepp-sdk'\n */\n\nimport Ae from './'\nimport { pause } from '../utils/other'\nimport { oracleQueryId, decode } from '../tx/builder/helpers'\nimport { unpackTx } from '../tx/builder'\nimport { ORACLE_TTL, QUERY_FEE, QUERY_TTL, RESPONSE_TTL } from '../tx/builder/schema'\nimport { RequestTimedOutError } from '../utils/errors'\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @alias module:@aeternity/aepp-sdk/es/ae/oracle\n * @instance\n * @function\n * @category async\n * @param {String} oracleId Oracle public key\n * @return {Promise<Object>} Oracle object\n */\nasync function getOracleObject (oracleId) {\n  const oracle = await this.api.getOracleByPubkey(oracleId)\n  const { oracleQueries: queries } = await this.api.getOracleQueriesByPubkey(oracleId)\n  return {\n    ...oracle,\n    queries,\n    pollQueries: this.pollForQueries.bind(this, oracleId),\n    postQuery: this.postQueryToOracle.bind(this, oracleId),\n    respondToQuery: this.respondToQuery.bind(this, oracleId),\n    extendOracle: this.extendOracleTtl.bind(this, oracleId),\n    getQuery: this.getQueryObject.bind(this, oracleId)\n  }\n}\n\n/**\n * Poll for oracle queries\n * @alias module:@aeternity/aepp-sdk/es/ae/oracle\n * @instance\n * @function\n * @param {String} oracleId Oracle public key\n * @param {Function} onQuery OnQuery callback\n * @param {Object} [options] Options object\n * @param {Number} [options.interval] Poll interval(default: 5000)\n * @return {Function} stopPolling - Stop polling function\n */\nfunction pollForQueries (\n  oracleId,\n  onQuery,\n  { interval = this._getPollInterval('microblock') } = {}\n) {\n  const knownQueryIds = new Set()\n  const checkNewQueries = async () => {\n    const queries = ((await this.api.getOracleQueriesByPubkey(oracleId)).oracleQueries || [])\n      .filter(({ id }) => !knownQueryIds.has(id))\n    queries.forEach(({ id }) => knownQueryIds.add(id))\n    if (queries.length) onQuery(queries)\n  }\n\n  let stopped\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error)\n      await pause(interval)\n    }\n  })()\n  return () => { stopped = true }\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @alias module:@aeternity/aepp-sdk/es/ae/oracle\n * @instance\n * @function\n * @category async\n * @param {String} oracleId Oracle public key\n * @param {String} queryId Oracle Query id\n * @return {Promise<Object>} OracleQuery object\n */\nasync function getQueryObject (oracleId, queryId) {\n  const q = await this.api.getOracleQueryByPubkeyAndQueryId(oracleId, queryId)\n  return {\n    ...q,\n    decodedQuery: decode(q.query).toString(),\n    decodedResponse: decode(q.response).toString(),\n    respond: this.respondToQuery.bind(this, oracleId, queryId),\n    pollForResponse: this.pollForQueryResponse.bind(this, oracleId, queryId),\n    /**\n     * @deprecated use TxBuilderHelper.decode instead\n     * @param data\n     * @returns {Buffer}\n     */\n    decode: (data) => decode(data)\n  }\n}\n\n/**\n * Poll for oracle query response\n * @alias module:@aeternity/aepp-sdk/es/ae/oracle\n * @instance\n * @function\n * @category async\n * @param {String} oracleId Oracle public key\n * @param {String} queryId Oracle Query id\n * @param {Object} [options] Options object\n * @param {Object} [options.attempts] Poll attempt's(default: 20)\n * @param {Object} [options.interval] Poll interval(default: 5000)\n * @return {Promise<Object>} OracleQuery object\n */\nexport async function pollForQueryResponse (\n  oracleId,\n  queryId,\n  { attempts = 20, interval = this._getPollInterval('microblock') } = {}\n) {\n  for (let i = 0; i < attempts; i++) {\n    if (i) await pause(interval)\n    const { response } = await this.api.getOracleQueryByPubkeyAndQueryId(oracleId, queryId)\n    const responseBuffer = decode(response, 'or')\n    if (responseBuffer.length) {\n      return String(responseBuffer)\n    }\n  }\n  throw new RequestTimedOutError((attempts - 1) * interval)\n}\n\n/**\n * Register oracle\n * @alias module:@aeternity/aepp-sdk/es/ae/oracle\n * @instance\n * @function\n * @category async\n * @param {String} queryFormat Format of query\n * @param {String} responseFormat Format of query response\n * @param {Object} [options={}] Options\n * @param {String|Number} [options.queryFee] Oracle query Fee\n * @param {Object} [options.oracleTtl] OracleTtl object {type: 'delta|block', value: 'number'}\n * @param {Number} [options.abiVersion] Always 0 (do not use virtual machine)\n * @param {Number|String} [options.fee] Transaction fee\n * @param {Number|String} [options.ttl] Transaction time to leave\n * @return {Promise<Object>} Oracle object\n */\nasync function registerOracle (queryFormat, responseFormat, options = {}) {\n  const opt = { ...this.Ae.defaults, ...options } // Preset VmVersion for oracle\n  const accountId = await this.address(opt)\n\n  const oracleRegisterTx = await this.oracleRegisterTx({\n    ...opt,\n    accountId,\n    queryFormat,\n    responseFormat\n  })\n  return {\n    ...await this.send(oracleRegisterTx, opt),\n    ...await this.getOracleObject(`ok_${accountId.slice(3)}`)\n  }\n}\n\n/**\n * Post query to oracle\n * @alias module:@aeternity/aepp-sdk/es/ae/oracle\n * @instance\n * @function\n * @category async\n * @param {String} oracleId Oracle public key\n * @param {String} query Oracle query object\n * @param {Object} [options={}]\n * @param {String|Number} [options.queryTtl] queryTtl Oracle query time to leave\n * @param {String|Number} [options.responseTtl] queryFee Oracle query response time to leave\n * @param {String|Number} [options.queryFee] queryFee Oracle query fee\n * @param {Number} [options.fee] fee Transaction fee\n * @param {Number} [options.ttl] Transaction time to leave\n * @return {Promise<Object>} Query object\n */\nasync function postQueryToOracle (oracleId, query, options = {}) {\n  const queryFee = options.queryFee || (await this.api.getOracleByPubkey(oracleId)).queryFee\n  const opt = { ...this.Ae.defaults, queryFee, ...options }\n  const senderId = await this.address(opt)\n\n  const oracleRegisterTx = await this.oraclePostQueryTx({\n    ...opt,\n    oracleId,\n    senderId,\n    query\n  })\n  const queryId = oracleQueryId(senderId, unpackTx(oracleRegisterTx).tx.nonce, oracleId)\n  return {\n    ...await this.send(oracleRegisterTx, opt),\n    ...await this.getQueryObject(oracleId, queryId)\n  }\n}\n\n/**\n * Extend oracle ttl\n * @alias module:@aeternity/aepp-sdk/es/ae/oracle\n * @instance\n * @function\n * @category async\n * @param {String} oracleId Oracle public key\n * @param {String} oracleTtl Oracle time to leave for extend\n * @param {Object} [options={}]\n * @param {Number} [options.fee] fee Transaction fee\n * @param {Number} [options.ttl] Transaction time to leave\n * @return {Promise<Object>} Oracle object\n */\nasync function extendOracleTtl (oracleId, oracleTtl, options = {}) {\n  const opt = { ...this.Ae.defaults, ...options }\n  const callerId = await this.address(opt)\n\n  const oracleExtendTx = await this.oracleExtendTx({\n    ...opt,\n    oracleId,\n    callerId,\n    oracleTtl\n  })\n  return {\n    ...await this.send(oracleExtendTx, opt),\n    ...await this.getOracleObject(oracleId)\n  }\n}\n\n/**\n * Extend oracle ttl\n * @alias module:@aeternity/aepp-sdk/es/ae/oracle\n * @instance\n * @function\n * @category async\n * @param {String} oracleId Oracle public key\n * @param {String} queryId Oracle query id\n * @param {String} response Oracle query response\n * @param {Object} [options={}]\n * @param {Number} [options.responseTtl] responseTtl Query response time to leave\n * @param {Number} [options.fee] Transaction fee\n * @param {Number} [options.ttl] Transaction time to leave\n * @return {Promise<Object>} Oracle object\n */\nasync function respondToQuery (oracleId, queryId, response, options = {}) {\n  const opt = { ...this.Ae.defaults, ...options }\n  const callerId = await this.address(opt)\n\n  const oracleRespondTx = await this.oracleRespondTx({\n    ...opt,\n    oracleId,\n    queryId,\n    callerId,\n    response\n  })\n  return {\n    ...await this.send(oracleRespondTx, opt),\n    ...await this.getOracleObject(oracleId)\n  }\n}\n\n/**\n * Oracle Stamp\n *\n * Oracle provides oracle-system related methods atop\n * {@link module:@aeternity/aepp-sdk/es/ae--Ae} clients.\n * @function\n * @alias module:@aeternity/aepp-sdk/es/ae/oracle\n * @rtype Stamp\n * @param {Object} [options={}] - Initializer object\n * @return {Object} Oracle instance\n */\nconst Oracle = Ae.compose({\n  methods: {\n    registerOracle,\n    respondToQuery,\n    extendOracleTtl,\n    postQueryToOracle,\n    pollForQueryResponse,\n    pollForQueries,\n    getOracleObject,\n    getQueryObject\n  },\n  deepProps: {\n    Ae: {\n      defaults: {\n        queryFee: QUERY_FEE,\n        oracleTtl: ORACLE_TTL,\n        queryTtl: QUERY_TTL,\n        responseTtl: RESPONSE_TTL\n      }\n    }\n  }\n})\n\nexport default Oracle\n"],"file":"oracle.mjs"}