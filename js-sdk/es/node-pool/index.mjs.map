{"version":3,"sources":["../../src/node-pool/index.js"],"names":["stampit","getNetworkId","DisconnectedError","DuplicateNodeError","NodeNotFoundError","TypeError","init","nodes","pool","Map","validateNodes","forEach","node","i","name","instance","addNode","length","selectNode","propertyDescriptors","api","enumerable","configurable","get","selectedNode","methods","select","has","set","url","internalUrl","networkId","nodeNetworkId","version","consensusProtocolVersion","isNodeConnected","getNodeInfo","getNodesInPool","Array","from","entries","map","isArray","notObject","n","find","t","wrongFields","JSON","stringify","wrongInstanceFields","genesisHash","props"],"mappings":"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","sourcesContent":["/**\n * NodePool module\n * @module @aeternity/aepp-sdk/es/node-pool\n * @export NodePool\n * @example import { NodePool } from '@aeternity/aepp-sdk'\n */\nimport stampit from '@stamp/it'\nimport { getNetworkId } from '../node'\nimport { DisconnectedError, DuplicateNodeError, NodeNotFoundError, TypeError } from '../utils/errors'\n\n/**\n * Node Pool Stamp\n * This stamp allow you to make basic manipulation(add, remove, select) on list of nodes\n * @function\n * @alias module:@aeternity/aepp-sdk/es/node-pool\n * @rtype Stamp\n * @param {Object} [options={}] - Initializer object\n * @param {Array} [options.nodes] - Array with Node instances\n * @return {Object} NodePool instance\n */\nexport default stampit({\n  init ({ nodes = [] } = {}) {\n    this.pool = new Map()\n    this.validateNodes(nodes)\n\n    nodes.forEach((node, i) => {\n      const { name, instance } = node\n      this.addNode(name, instance, i === 0)\n    })\n    if (nodes.length) this.selectNode(nodes[0].name)\n  },\n  propertyDescriptors: {\n    api: {\n      enumerable: true,\n      configurable: false,\n      get () {\n        if (!this.selectedNode || !this.selectedNode.instance) {\n          throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!')\n        }\n        return this.selectedNode.instance.api\n      }\n    }\n  },\n  methods: {\n    /**\n     * Add Node\n     * @function\n     * @alias module:@aeternity/aepp-sdk/es/node-pool\n     * @rtype (name: String, nodeInstance: Object, select: Boolean) => void\n     * @param {String} name - Node name\n     * @param {Object} node - Node instance\n     * @param {Boolean} select - Select this node as current\n     * @return {void}\n     * @example\n     * // add and select new node with name 'testNode'\n     * nodePool.addNode('testNode', awaitNode({ url, internalUrl }), true)\n     */\n    addNode (name, node, select = false) {\n      if (this.pool.has(name)) throw new DuplicateNodeError(name)\n\n      this.validateNodes([{ name, instance: node }])\n\n      this.pool.set(name, {\n        name,\n        instance: node,\n        url: node.url,\n        internalUrl: node.internalUrl,\n        networkId: node.nodeNetworkId,\n        version: node.version,\n        consensusProtocolVersion: node.consensusProtocolVersion\n      })\n      if (select || !this.selectedNode) {\n        this.selectNode(name)\n      }\n    },\n    /**\n     * Select Node\n     * @function\n     * @alias module:@aeternity/aepp-sdk/es/node-pool\n     * @rtype (name: String) => void\n     * @param {String} name - Node name\n     * @return {void}\n     * @example\n     * nodePool.selectNode('testNode')\n     */\n    selectNode (name) {\n      if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`)\n\n      this.selectedNode = this.pool.get(name)\n    },\n    /**\n     * Get NetworkId of current Node\n     * @function\n     * @alias module:@aeternity/aepp-sdk/es/node-pool\n     * @rtype () => String\n     * @return {String}\n     * @example\n     * nodePool.getNetworkId()\n     */\n    getNetworkId,\n    /**\n     * Check if you have selected node\n     * @function\n     * @alias module:@aeternity/aepp-sdk/es/node-pool\n     * @rtype () => Boolean\n     * @return {Boolean}\n     * @example\n     * nodePool.isNodeConnected()\n     */\n    isNodeConnected () {\n      return !!this.selectedNode.instance\n    },\n    /**\n     * Get information about node\n     * @function\n     * @alias module:@aeternity/aepp-sdk/es/node-pool\n     * @rtype () => Object\n     * @return {Object}\n     * @example\n     * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n     */\n    getNodeInfo () {\n      if (!this.isNodeConnected()) throw new DisconnectedError()\n      return {\n        name: this.selectedNode.name,\n        ...this.selectedNode.instance.getNodeInfo()\n      }\n    },\n    /**\n     * Get array of available nodes\n     * @function\n     * @alias module:@aeternity/aepp-sdk/es/node-pool\n     * @rtype () => Object[]\n     * @return {Object[]}\n     * @example\n     * nodePool.getNodesInPool()\n     */\n    getNodesInPool () {\n      return Array.from(this.pool.entries()).map(([name, node]) => ({\n        name,\n        ...node.instance.getNodeInfo()\n      }))\n    },\n    validateNodes (nodes) {\n      // TODO: validate it on TypeScript level instead\n      // (to speedup development, save runtime resources)\n      if (!Array.isArray(nodes)) throw new TypeError('\"nodes\" should be an array')\n      const notObject = nodes.map(n => typeof n).find(t => t !== 'object')\n      if (notObject) throw new TypeError(`Each node should be an object, got ${notObject} instead`)\n      const wrongFields = nodes.find(n => typeof n.name !== 'string' || typeof n.instance !== 'object')\n      if (notObject) {\n        throw new TypeError(\n          'Each node should have name (string), instance (object) ' +\n          `fields, got ${JSON.stringify(wrongFields)} instead`\n        )\n      }\n      const wrongInstanceFields = nodes\n        .map(n => n.instance)\n        .find(i => typeof i.api !== 'object' || typeof i.genesisHash !== 'string' ||\n          typeof i.consensusProtocolVersion !== 'number')\n      if (wrongInstanceFields) {\n        throw new TypeError(\n          'Each node instance should have api (object), consensusProtocolVersion (number), ' +\n          `genesisHash (string) fields, got ${JSON.stringify(wrongInstanceFields)} instead`\n        )\n      }\n    }\n  },\n  props: {\n    selectedNode: {}\n  }\n})\n"],"file":"index.mjs"}