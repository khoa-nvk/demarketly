{"version":3,"sources":["../../../src/contract/ga/helpers.js"],"names":["BigNumber","MAX_AUTH_FUN_GAS","InvalidAuthDataError","prepareGaParams","ins","authData","authFnName","gas","gt","callData","split","authCallData","source","args","contract","getContractInstance","calldata","encode","_name"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;SACSC,gB;SACAC,oB;AAET,OAAO,MAAMC,eAAe,GAAIC,GAAD,IAAS,OAAOC,QAAP,EAAiBC,UAAjB,KAAgC;AACtE,MAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC,MAAM,IAAIH,oBAAJ,CAAyB,4BAAzB,CAAN;;AAClC,MAAIG,QAAQ,CAACE,GAAT,IAAgBP,SAAS,CAACK,QAAQ,CAACE,GAAV,CAAT,CAAwBC,EAAxB,CAA2BP,gBAA3B,CAApB,EAAkE;AAAE,UAAM,IAAIC,oBAAJ,CAA0B,2CAA0CD,gBAAiB,SAAQI,QAAQ,CAACE,GAAI,EAA1G,CAAN;AAAoH;;AACxL,QAAMA,GAAG,GAAGF,QAAQ,CAACE,GAAT,IAAgBN,gBAA5B;;AACA,MAAII,QAAQ,CAACI,QAAb,EAAuB;AACrB,QAAIJ,QAAQ,CAACI,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,MAAoC,IAAxC,EAA8C,MAAM,IAAIR,oBAAJ,CAAyB,8CAAzB,CAAN;AAC9C,WAAO;AAAES,MAAAA,YAAY,EAAEN,QAAQ,CAACI,QAAzB;AAAmCF,MAAAA;AAAnC,KAAP;AACD;;AACD,MAAI,CAACF,QAAQ,CAACO,MAAV,IAAoB,CAACP,QAAQ,CAACQ,IAAlC,EAAwC,MAAM,IAAIX,oBAAJ,CAAyB,mDAAzB,CAAN;AACxC,QAAMY,QAAQ,GAAG,MAAMV,GAAG,CAACW,mBAAJ,CAAwB;AAAEH,IAAAA,MAAM,EAAEP,QAAQ,CAACO;AAAnB,GAAxB,CAAvB;AACA,SAAO;AACLD,IAAAA,YAAY,EAAEG,QAAQ,CAACE,QAAT,CAAkBC,MAAlB,CAAyBH,QAAQ,CAACI,KAAlC,EAAyCZ,UAAzC,EAAqDD,QAAQ,CAACQ,IAA9D,CADT;AAELN,IAAAA;AAFK,GAAP;AAID,CAdM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { MAX_AUTH_FUN_GAS } from '../../tx/builder/schema'\nimport { InvalidAuthDataError } from '../../utils/errors'\n\nexport const prepareGaParams = (ins) => async (authData, authFnName) => {\n  if (typeof authData !== 'object') throw new InvalidAuthDataError('AuthData must be an object')\n  if (authData.gas && BigNumber(authData.gas).gt(MAX_AUTH_FUN_GAS)) { throw new InvalidAuthDataError(`the maximum gas value for ga authFun is ${MAX_AUTH_FUN_GAS}, got ${authData.gas}`) }\n  const gas = authData.gas || MAX_AUTH_FUN_GAS\n  if (authData.callData) {\n    if (authData.callData.split('_')[0] !== 'cb') throw new InvalidAuthDataError('Auth data must be a string with \"cb\" prefix.')\n    return { authCallData: authData.callData, gas }\n  }\n  if (!authData.source || !authData.args) throw new InvalidAuthDataError('Auth data must contain source code and arguments.')\n  const contract = await ins.getContractInstance({ source: authData.source })\n  return {\n    authCallData: contract.calldata.encode(contract._name, authFnName, authData.args),\n    gas\n  }\n}\n"],"file":"helpers.mjs"}