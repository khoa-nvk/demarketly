{"version":3,"sources":["../../src/contract/compiler.js"],"names":["semverSatisfies","AsyncInit","genSwaggerClient","MissingParamError","UnsupportedVersionError","mapObject","compose","init","compilerUrl","ignoreVersion","setCompilerUrl","methods","replace","client","disableBigNumbers","disableCaseConversion","responseInterceptor","response","ok","message","URL","url","pathname","slice","body","reason","parameter","info","JSON","stringify","Array","isArray","map","e","type","pos","line","col","context","trim","join","statusText","compilerVersion","spec","version","compilerApi","api","key","fn","options","filesystem","args","file_system","COMPILER_GE_VERSION","COMPILER_LT_VERSION","props"],"mappings":"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","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2021 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * ContractCompilerHttp module\n *\n * @module @aeternity/aepp-sdk/es/contract/compiler\n * @export ContractCompilerHttp\n * @example import { ContractCompilerHttp } from '@aeternity/aepp-sdk'\n */\n\nimport semverSatisfies from '../utils/semver-satisfies'\nimport AsyncInit from '../utils/async-init'\nimport genSwaggerClient from '../utils/swagger'\nimport { MissingParamError, UnsupportedVersionError } from '../utils/errors'\nimport { mapObject } from '../utils/other'\n\n/**\n * Contract Compiler Stamp\n *\n * This stamp include api call's related to contract compiler functionality.\n * @function\n * @alias module:@aeternity/aepp-sdk/es/contract/compiler\n * @rtype Stamp\n * @param {Object} [options={}] - Initializer object\n * @param {String} [options.compilerUrl] compilerUrl - Url for compiler API\n * @return {Object} Contract compiler instance\n * @example ContractCompilerHttp({ compilerUrl: 'COMPILER_URL' })\n */\nexport default AsyncInit.compose({\n  async init ({ compilerUrl, ignoreVersion }) {\n    if (!compilerUrl) return\n    await this.setCompilerUrl(compilerUrl, { ignoreVersion })\n  },\n  methods: {\n    async setCompilerUrl (compilerUrl, { ignoreVersion = false } = {}) {\n      if (!compilerUrl) throw new MissingParamError('compilerUrl required')\n      compilerUrl = compilerUrl.replace(/\\/$/, '')\n      const client = await genSwaggerClient(`${compilerUrl}/api`, {\n        disableBigNumbers: true,\n        disableCaseConversion: true,\n        responseInterceptor: response => {\n          if (response.ok) return\n          let message = `${new URL(response.url).pathname.slice(1)} error`\n          if (response.body.reason) {\n            message += ': ' + response.body.reason +\n              (response.body.parameter ? ` in ${response.body.parameter}` : '') +\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n              (response.body.info ? ` (${JSON.stringify(response.body.info)})` : '')\n          }\n          if (Array.isArray(response.body)) {\n            message += ':\\n' + response.body\n              .map(e => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context ? `(${e.context})` : ''}`)\n              .map(e => e.trim()) // TODO: remove after fixing https://github.com/aeternity/aesophia_http/issues/80\n              .join('\\n')\n          }\n          response.statusText = message\n          return response\n        }\n      })\n      this.compilerVersion = client.spec.info.version\n      this.compilerApi = mapObject(\n        client.api,\n        ([key, fn]) => [\n          key,\n          ({ options: { filesystem, ...options } = {}, ...args } = {}) => fn({\n            ...args, options: { ...options, file_system: filesystem }\n          })\n        ]\n      )\n\n      if (ignoreVersion) return\n      if (!semverSatisfies(this.compilerVersion, COMPILER_GE_VERSION, COMPILER_LT_VERSION)) {\n        throw new UnsupportedVersionError(\n          'compiler', this.compilerVersion, COMPILER_GE_VERSION, COMPILER_LT_VERSION\n        )\n      }\n    }\n  },\n  props: {\n    compilerVersion: null\n  }\n})\n\nconst COMPILER_GE_VERSION = '6.1.0'\nconst COMPILER_LT_VERSION = '7.0.0'\n"],"file":"compiler.mjs"}