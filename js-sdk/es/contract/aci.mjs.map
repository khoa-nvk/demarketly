{"version":3,"sources":["../../src/contract/aci.js"],"names":["DRY_RUN_ACCOUNT","GAS_MAX","TxObject","decode","MissingContractDefError","MissingContractAddressError","InactiveContractError","BytecodeMismatchError","InternalError","DuplicateContractError","MissingFunctionNameError","InvalidMethodInvocationError","NotPayableFunctionError","TypeError","NodeInvocationError","IllegalArgumentError","NoSuchContractFunctionError","MissingEventDefinitionError","AmbiguousEventDefinitionError","hash","getContractInstance","source","bytecode","aci","_aci","contractAddress","filesystem","validateBytecode","otherOptions","compilerApi","generateACI","code","options","resolveName","resolveByNode","contract","getContract","active","instance","_name","encoded_aci","name","calldata","Calldata","external_encoded_aci","deployInfo","address","Ae","defaults","callStatic","compilerVersion","onChanBytecode","getContractByteCode","isValid","validateByteCode","then","res","Object","entries","length","compile","compileContract","sendAndProcess","tx","txData","send","result","rawTx","waitMined","callInfo","api","getTransactionInfoByHash","assign","handleCallError","returnType","returnValue","message","decodeFateString","toString","_estimateGas","params","gasUsed","call","Math","floor","deploy","opt","ownerId","contractId","contractCreateTx","gas","callData","encode","freeze","owner","transaction","getFunctionACI","fn","functions","find","f","payable","fnACI","amount","callerId","catch","error","pub","top","getKeyBlock","txOpt","nonce","getAccount","contractCallTx","callObj","dryRunOther","txDryRun","decodedResult","returns","decodedEvents","decodeEvents","log","getContractNameByEvent","nameHash","contractAddressToName","addressToName","matchedEvents","filter","event","map","variant","events","keys","flat","eventName","BigInt","omitUnknown","topics","t","contractName","decoded","decodeEvent","data","args","e","methods","fromEntries","arguments","aciArgs","stateful","genHandler","pop","get"],"mappings":"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","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2018 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * ContractACI module\n *\n * @module @aeternity/aepp-sdk/es/contract/aci\n * @export getContractInstance\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata'\nimport { DRY_RUN_ACCOUNT, GAS_MAX } from '../tx/builder/schema'\nimport TxObject from '../tx/tx-object'\nimport { decode } from '../tx/builder/helpers'\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  InternalError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError\n} from '../utils/errors'\nimport { hash } from '../utils/crypto-ts'\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @alias module:@aeternity/aepp-sdk/es/contract/aci\n * @param {Object} [options={}] Options object\n * @param {String} [options.source] Contract source code\n * @param {String} [options.bytecode] Contract bytecode\n * @param {Object} [options.aci] Contract ACI\n * @param {String} [options.contractAddress] Contract address\n * @param {Object} [options.filesystem] Contact source external namespaces map\n * @param {Boolean} [options.validateBytecode] Compare source code with on-chain version\n * @return {ContractInstance} JS Contract API\n * @example\n * const contractIns = await aeSdk.getContractInstance({ source })\n * await contractIns.deploy([321]) or await contractIns.methods.init(321)\n * const callResult = await contractIns.call('setState', [123]) or\n * await contractIns.methods.setState.send(123, options)\n * const staticCallResult = await contractIns.call('setState', [123], { callStatic: true }) or\n * await contractIns.methods.setState.get(123, options)\n * Also you can call contract like: await contractIns.methods.setState(123, options)\n * Then sdk decide to make on-chain or static call(dry-run API) transaction based on function is\n * stateful or not\n */\nexport default async function getContractInstance ({\n  source,\n  bytecode,\n  aci: _aci,\n  contractAddress,\n  filesystem = {},\n  validateBytecode,\n  ...otherOptions\n} = {}) {\n  if (!_aci && source) {\n    _aci = await this.compilerApi.generateACI({ code: source, options: { filesystem } })\n  }\n  if (!_aci) throw new MissingContractDefError()\n  contractAddress = contractAddress && await this.resolveName(\n    contractAddress, 'contract_pubkey', { resolveByNode: true }\n  )\n  if (!contractAddress && !source && !bytecode) {\n    throw new MissingContractAddressError('Can\\'t create instance by ACI without address')\n  }\n\n  if (contractAddress) {\n    const contract = await this.getContract(contractAddress)\n    if (!contract.active) throw new InactiveContractError(contractAddress)\n  }\n\n  const instance = {\n    _aci,\n    _name: _aci.encoded_aci.contract.name,\n    calldata: new Calldata([_aci.encoded_aci, ..._aci.external_encoded_aci]),\n    source,\n    bytecode,\n    deployInfo: { address: contractAddress },\n    options: {\n      ...this.Ae.defaults,\n      callStatic: false,\n      filesystem,\n      ...otherOptions\n    },\n    compilerVersion: this.compilerVersion\n  }\n\n  if (validateBytecode) {\n    if (!contractAddress) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address')\n    const onChanBytecode = (await this.getContractByteCode(contractAddress)).bytecode\n    const isValid = source\n      ? await this.compilerApi.validateByteCode(\n        { bytecode: onChanBytecode, source, options: instance.options }\n      ).then((res) => Object.entries(res).length === 0, () => false)\n      : bytecode === onChanBytecode\n    if (!isValid) throw new BytecodeMismatchError(source ? 'source' : 'bytecode')\n  }\n\n  /**\n   * Compile contract\n   * @alias module:@aeternity/aepp-sdk/es/contract/aci\n   * @rtype () => ContractInstance: Object\n   * @return {String} bytecode bytecode\n   */\n  instance.compile = async (options = {}) => {\n    if (instance.bytecode) throw new IllegalArgumentError('Contract already compiled')\n    if (!instance.source) throw new IllegalArgumentError('Can\\'t compile without source code')\n    const { bytecode } = await this.compilerApi.compileContract({\n      code: instance.source, options: { ...instance.options, ...options }\n    })\n    instance.bytecode = bytecode\n    return instance.bytecode\n  }\n\n  const sendAndProcess = async (tx, options) => {\n    const txData = await this.send(tx, options)\n    const result = {\n      hash: txData.hash, tx: TxObject({ tx: txData.rawTx }), txData, rawTx: txData.rawTx\n    }\n    if (options.waitMined === false) return result\n    const { callInfo } = await this.api.getTransactionInfoByHash(txData.hash)\n    Object.assign(result.txData, callInfo) // TODO: don't duplicate data in result\n    await handleCallError(callInfo)\n    return { ...result, result: callInfo }\n  }\n\n  const handleCallError = ({ returnType, returnValue }) => {\n    let message\n    // TODO: ensure that it works correctly https://github.com/aeternity/aepp-calldata-js/issues/88\n    switch (returnType) {\n      case 'ok': return\n      case 'revert':\n        message = instance.calldata.decodeFateString(returnValue)\n        break\n      case 'error':\n        message = decode(returnValue).toString()\n        break\n      default: throw new InternalError(`Unknown returnType: ${returnType}`)\n    }\n    throw new NodeInvocationError(message)\n  }\n\n  instance._estimateGas = async (name, params, options) => {\n    const { result: { gasUsed } } =\n      await instance.call(name, params, { ...options, callStatic: true })\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25)\n  }\n\n  /**\n   * Deploy contract\n   * @alias module:@aeternity/aepp-sdk/es/contract/aci\n   * @rtype (init: Array, options: Object) => ContractInstance: Object\n   * @param {Array} params Contract init function arguments array\n   * @param {Object} [options] options\n   * @return {Object} deploy info\n   */\n  instance.deploy = async (params = [], options) => {\n    const opt = { ...instance.options, ...options }\n    if (!instance.bytecode) await instance.compile(opt)\n    if (opt.callStatic) return instance.call('init', params, opt)\n    if (instance.deployInfo.address) throw new DuplicateContractError()\n\n    const ownerId = await this.address(opt)\n    const { tx, contractId } = await this.contractCreateTx({\n      ...opt,\n      gas: opt.gas ?? await instance._estimateGas('init', params, opt),\n      callData: instance.calldata.encode(instance._name, 'init', params),\n      code: instance.bytecode,\n      ownerId\n    })\n    const { hash, rawTx, result, txData } = await sendAndProcess(tx, opt)\n    instance.deployInfo = Object.freeze({\n      result,\n      owner: ownerId,\n      transaction: hash,\n      rawTx,\n      txData,\n      address: contractId\n    })\n    return instance.deployInfo\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param {String} name Function name\n   * @return {Object} function ACI\n   */\n  function getFunctionACI (name) {\n    const fn = instance._aci.encoded_aci.contract.functions.find(f => f.name === name)\n    if (fn) return fn\n    if (name === 'init') return { payable: false }\n    throw new NoSuchContractFunctionError(`Function ${name} doesn't exist in contract`)\n  }\n\n  /**\n   * Call contract function\n   * @alias module:@aeternity/aepp-sdk/es/contract/aci\n   * @rtype (init: Array, options: Object = { callStatic: false }) => CallResult: Object\n   * @param {String} fn Function name\n   * @param {Array} params Array of function arguments\n   * @param {Object} [options={}] Array of function arguments\n   * @param {Boolean} [options.callStatic=false] Static function call\n   * @return {Object} CallResult\n   */\n  instance.call = async (fn, params = [], options = {}) => {\n    const opt = { ...instance.options, ...options }\n    const fnACI = getFunctionACI(fn)\n    const contractId = instance.deployInfo.address\n\n    if (!fn) throw new MissingFunctionNameError()\n    if (fn === 'init' && !opt.callStatic) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun')\n    if (!contractId && fn !== 'init') throw new InvalidMethodInvocationError('You need to deploy contract before calling!')\n    if (fn !== 'init' && opt.amount > 0 && fnACI.payable === false) throw new NotPayableFunctionError(`You try to pay \"${opt.amount}\" to function \"${fn}\" which is not payable. Only payable function can accept coins`)\n\n    const callerId = await this.address(opt).catch(error => {\n      if (opt.callStatic) return DRY_RUN_ACCOUNT.pub\n      else throw error\n    })\n    const callData = instance.calldata.encode(instance._name, fn, params)\n\n    let res\n    if (opt.callStatic) {\n      if (typeof opt.top === 'number') {\n        opt.top = (await this.getKeyBlock(opt.top)).hash\n      }\n      const txOpt = {\n        ...opt,\n        gas: opt.gas ?? GAS_MAX,\n        callData,\n        nonce: opt.nonce ??\n          (opt.top && (await this.getAccount(callerId, { hash: opt.top })).nonce + 1)\n      }\n      const tx = fn === 'init'\n        ? (await this.contractCreateTx({ ...txOpt, code: instance.bytecode, ownerId: callerId })).tx\n        : await this.contractCallTx({ ...txOpt, callerId, contractId })\n\n      const { callObj, ...dryRunOther } = await this.txDryRun(tx, callerId, opt)\n      await handleCallError(callObj)\n      res = { ...dryRunOther, tx: TxObject({ tx }), result: callObj }\n    } else {\n      const tx = await this.contractCallTx({\n        ...opt,\n        gas: opt.gas ?? await instance._estimateGas(fn, params, opt),\n        callerId,\n        contractId,\n        callData\n      })\n      res = await sendAndProcess(tx, opt)\n    }\n    if (opt.waitMined || opt.callStatic) {\n      res.decodedResult = fnACI.returns && fnACI.returns !== 'unit' && fn !== 'init' &&\n        instance.calldata.decode(instance._name, fn, res.result.returnValue)\n      res.decodedEvents = instance.decodeEvents(res.result.log, opt)\n    }\n    return res\n  }\n\n  /**\n   * @param {String} address Contract address that emitted event\n   * @param {BigInt} nameHash Hash of emitted event name\n   * @param {Object} [options]\n   * @param {Object} [options.contractAddressToName] Map of contract addresses to their names\n   * @return {String} Contract name\n   * @throws {MissingEventDefinitionError}\n   * @throws {AmbiguousEventDefinitionError}\n   */\n  function getContractNameByEvent (address, nameHash, { contractAddressToName }) {\n    const addressToName = { ...instance.options.contractAddressToName, ...contractAddressToName }\n    if (addressToName[address]) return addressToName[address]\n\n    const matchedEvents = [\n      instance._aci.encoded_aci,\n      ...instance._aci.external_encoded_aci\n    ]\n      .filter(({ contract }) => contract?.event)\n      .map(({ contract }) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map(event => [name, Object.keys(event)[0]]))\n      .flat()\n      .filter(([, eventName]) => BigInt('0x' + hash(eventName).toString('hex')) === nameHash)\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash, address)\n      case 1: return matchedEvents[0][0]\n      default: throw new AmbiguousEventDefinitionError(address, matchedEvents)\n    }\n  }\n\n  /**\n   * Decode Events\n   * @alias module:@aeternity/aepp-sdk/es/contract/aci\n   * @rtype (events: Array) => DecodedEvents: Array\n   * @param {Array} events Array of encoded events (callRes.result.log)\n   * @param {Object} [options]\n   * @param {Boolean} [options.omitUnknown] Omit events that can't be decoded in case ACI is not\n   * complete\n   * @return {Object} DecodedEvents\n   */\n  instance.decodeEvents = (events, { omitUnknown, ...opt } = {}) => events\n    .map(event => {\n      const topics = event.topics.map(t => BigInt(t))\n      let contractName\n      try {\n        contractName = getContractNameByEvent(event.address, topics[0], opt)\n      } catch (error) {\n        if (omitUnknown && error instanceof MissingEventDefinitionError) return null\n        throw error\n      }\n      const decoded = instance.calldata.decodeEvent(contractName, event.data, topics)\n      const [name, args] = Object.entries(decoded)[0]\n      return {\n        name,\n        args,\n        contract: {\n          name: contractName,\n          address: event.address\n        }\n      }\n    })\n    .filter(e => e)\n\n  /**\n   * Generate proto function based on contract function using Contract ACI schema\n   * All function can be called like:\n   * 'await contract.methods.testFunction()' -> then sdk will decide to use dry-run or send tx\n   * on-chain base on if function stateful or not.\n   * Also you can manually do that:\n   * `await contract.methods.testFunction.get()` -> use call-static(dry-run)\n   * `await contract.methods.testFunction.send()` -> send tx on-chain\n   */\n  instance.methods = Object.fromEntries(instance._aci.encoded_aci.contract.functions\n    .map(({ name, arguments: aciArgs, stateful }) => {\n      const genHandler = callStatic => (...args) => {\n        const options = args.length === aciArgs.length + 1 ? args.pop() : {}\n        if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`)\n        if (name === 'init') return instance.deploy(args, { callStatic, ...options })\n        return instance.call(name, args, { callStatic, ...options })\n      }\n      return [\n        name,\n        Object.assign(\n          genHandler(name === 'init' ? false : !stateful),\n          {\n            get: genHandler(true),\n            send: genHandler(false)\n          }\n        )\n      ]\n    })\n  )\n\n  return instance\n}\n"],"file":"aci.mjs"}