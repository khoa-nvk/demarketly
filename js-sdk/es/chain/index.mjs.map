{"version":3,"sources":["../../src/chain/index.js"],"names":["stampit","Chain","deepProps","Ae","defaults","waitMined","verify","_expectedMineRate","_microBlockCycle","_maxPollInterval","methods","_getPollInterval","type","base","block","microblock","Error","Math","min","required","sendTransaction","height","awaitHeight","poll","balance","getBalance","tx","getTxInfo","mempool","txDryRun","getAccount"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AACA,2BAAyB,iBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC;AACpBE,EAAAA,SAAS,EAAE;AACTC,IAAAA,EAAE,EAAE;AACFC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAE,IADH;AAERC,QAAAA,MAAM,EAAE,IAFA;AAGRC,QAAAA,iBAAiB,EAAE,MAHX;AAIRC,QAAAA,gBAAgB,EAAE,IAJV;AAKRC,QAAAA,gBAAgB,EAAE;AALV;AADR;AADK,GADS;AAYpBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBAAgB,CAAEC,IAAF,EAAQ;AACtB,YAAMC,IAAI,GAAG;AACXC,QAAAA,KAAK,EAAE,KAAKX,EAAL,CAAQC,QAAR,CAAiBG,iBADb;AAEXQ,QAAAA,UAAU,EAAE,KAAKZ,EAAL,CAAQC,QAAR,CAAiBI;AAFlB,QAGXI,IAHW,CAAb;AAIA,UAAI,CAACC,IAAL,EAAW,MAAM,IAAIG,KAAJ,CAAW,sBAAqBJ,IAAK,EAArC,CAAN;AACX,aAAOK,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,EAAmB,KAAKV,EAAL,CAAQC,QAAR,CAAiBK,gBAApC,CAAP;AACD;;AARM;AAZW,CAAD,EAsBlBU,QAAQ,CAAC;AACVT,EAAAA,OAAO,EAAE;AACPU,IAAAA,eAAe,EAAED,QADV;AAEPE,IAAAA,MAAM,EAAEF,QAFD;AAGPG,IAAAA,WAAW,EAAEH,QAHN;AAIPI,IAAAA,IAAI,EAAEJ,QAJC;AAKPK,IAAAA,OAAO,EAAEL,QALF;AAMPM,IAAAA,UAAU,EAAEN,QANL;AAOPO,IAAAA,EAAE,EAAEP,QAPG;AAQPQ,IAAAA,SAAS,EAAER,QARJ;AASPS,IAAAA,OAAO,EAAET,QATF;AAUPU,IAAAA,QAAQ,EAAEV,QAVH;AAWPW,IAAAA,UAAU,EAAEX;AAXL;AADC,CAAD,CAtBU,CAArB;AAseAAelB,KAAf","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2018 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Chain module\n * @module @aeternity/aepp-sdk/es/chain\n * @export Chain\n * @example import { Chain } from '@aeternity/aepp-sdk'\n */\n\nimport stampit from '@stamp/it'\nimport { required } from '@stamp/required'\n\n/**\n * Basic Chain Stamp\n *\n * Attempting to create instances from the Stamp without overwriting all\n * abstract methods using composition will result in an exception.\n * @function\n * @alias module:@aeternity/aepp-sdk/es/chain\n * @rtype Stamp\n * @param {Object} [options={}] - Initializer object\n * @return {Object} Chain instance\n */\nconst Chain = stampit({\n  deepProps: {\n    Ae: {\n      defaults: {\n        waitMined: true,\n        verify: true,\n        _expectedMineRate: 180000,\n        _microBlockCycle: 3000,\n        _maxPollInterval: 5000\n      }\n    }\n  },\n  methods: {\n    _getPollInterval (type) {\n      const base = {\n        block: this.Ae.defaults._expectedMineRate,\n        microblock: this.Ae.defaults._microBlockCycle\n      }[type]\n      if (!base) throw new Error(`Unknown poll type: ${type}`)\n      return Math.min(base / 3, this.Ae.defaults._maxPollInterval)\n    }\n  }\n}, required({\n  methods: {\n    sendTransaction: required,\n    height: required,\n    awaitHeight: required,\n    poll: required,\n    balance: required,\n    getBalance: required,\n    tx: required,\n    getTxInfo: required,\n    mempool: required,\n    txDryRun: required,\n    getAccount: required\n  }\n}))\n\n/**\n * Submit a signed transaction for mining\n * @function sendTransaction\n * @instance\n * @abstract\n * @category async\n * @rtype (tx: String, options?: Object) => tx: Promise[Object]|txHash: Promise[String]\n * @param {String} tx - Transaction to submit\n * @param {String} [options={}] - Options to pass to the implementation\n * @param {String} [options.verify=true] - Verify transaction before broadcast.\n * @return {Object} Transaction\n */\n\n/**\n * Obtain current height of the chain\n * @function height\n * @instance\n * @abstract\n * @category async\n * @rtype () => height: Number\n * @return {Number} Current chain height\n */\n\n/**\n * Wait for the chain to reach a specific height\n * @function awaitHeight\n * @instance\n * @abstract\n * @category async\n * @rtype (height: Number, options?: Object) => height: Number\n * @param {Object} [options={}] - Options\n * @param {Number} options.interval - Interval (in ms) at which to poll the chain\n * @param {Number} options.attempts - Number of polling attempts after which to fail\n * @return {Number} Current chain height\n */\n\n/**\n * Wait for a transaction to be mined\n * @function poll\n * @instance\n * @abstract\n * @category async\n * @rtype (th: String, options?: Object) => tx: Object\n * @param {Object} [options={}] - Options\n * @param {Number} options.interval - Interval (in ms) at which to poll the chain\n * @param {Number} options.blocks - Number of blocks mined after which to fail\n * @return {Object} The transaction as it was mined\n */\n\n/**\n * Request the balance of specified account\n * @function balance\n * @instance\n * @abstract\n * @category async\n * @rtype (address: String, options?: Object) => balance: Number\n * @param {String} address - The public account address to obtain the balance for\n * @param {Object} [options={}] - Options\n * @param {Number} options.height - The chain height at which to obtain the balance for (default:\n * top of chain)\n * @param {String} options.hash - The block hash on which to obtain the balance for (default: top\n * of chain)\n * @return {Object} The transaction as it was mined\n */\n\n/**\n * Obtain a transaction based on its hash\n * @function tx\n * @instance\n * @abstract\n * @category async\n * @rtype (hash: String, info = false) => tx: Object\n * @param {String} hash - Transaction hash\n * @param {Boolean} info - Retrieve additional transaction date. Works only for (ContractCreate and\n * ContractCall transaction's)\n * @return {Object} Transaction\n */\n\n/**\n * Obtain a transaction info based on its hash\n * @function getTxInfo\n * @instance\n * @abstract\n * @category async\n * @rtype (hash: String) => tx: Object\n * @param {String} hash - Transaction hash\n * @return {Object} Transaction\n */\n\n/**\n * Obtain transaction's from mempool\n * @function mempool\n * @instance\n * @abstract\n * @category async\n * @rtype () => txs: [...Object]\n * @return {Object[]} Transactions\n */\n\n/**\n * Obtain current generation\n * @function getCurrentGeneration\n * @instance\n * @abstract\n * @category async\n * @rtype () => generation: Object\n * @return {Object} Current Generation\n */\n\n/**\n * Get generation by hash or height\n * @function getGeneration\n * @instance\n * @abstract\n * @category async\n * @rtype (hashOrHeight) => generation: Object\n * @param {String|Number} hashOrHeight - Generation hash or height\n * @return {Object} Generation\n */\n\n/**\n * Wait for transaction confirmation\n * @function waitForTxConfirm\n * @instance\n * @abstract\n * @category async\n * @rtype (txHash: String, { confirm: Number | Boolean } = { confirm: 3 }) => Promise<Number>\n * @param {String} txHash - Transaction hash\n * @param {Object} [options] - options\n * @param {Number} [options.confirm=3] - Number of blocks to wait for transaction confirmation\n * @return {Promise<Number>} Current Height\n */\n\n/**\n * Get micro block transactions\n * @function getMicroBlockTransactions\n * @instance\n * @abstract\n * @category async\n * @rtype (hash) => txs: [...Object]\n * @return {Object[]} Transactions\n */\n\n/**\n * Get key block\n * @function getKeyBlock\n * @instance\n * @abstract\n * @category async\n * @rtype (hashOrHeight) => keyBlock: Object\n * @return {Object} Key Block\n */\n\n/**\n * Get micro block header\n * @function getMicroBlockHeader\n * @instance\n * @abstract\n * @category async\n * @rtype (hash) => header: Object\n * @return {Object} Micro block header\n */\n\n/**\n * Get account by account public key\n * @function getAccount\n * @instance\n * @abstract\n * @category async\n * @rtype (address, { hash, height }) => account: Object\n * @param {String} address - Account public key\n * @param {Object} [options={}] - Options\n * @param {Number} [options.height] - Get account on specific block by block height\n * @param {String} [options.hash] - Get account on specific block by block hash\n * @return {Object} Account\n */\n\n/**\n * Transaction dry-run\n * @function txDryRun\n * @instance\n * @abstract\n * @category async\n * @rtype (tx, accountAddress, options) => result: Object\n * @param {String} tx - transaction to execute\n * @param {String} accountAddress - address that will be used to execute transaction\n * @param {String|Number} [options.top] - hash of block on which to make dry-run\n * @param {Boolean} [options.txEvents] - collect and return on-chain tx events that would result\n * from the call\n * @return {Object} Result\n */\n\nexport default Chain\n"],"file":"index.mjs"}