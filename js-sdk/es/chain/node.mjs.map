{"version":3,"sources":["../../src/chain/node.js"],"names":["Chain","AE_AMOUNT_FORMATS","formatAmount","verifyTransaction","NodePool","pause","isNameValid","produceNameId","decode","DRY_RUN_ACCOUNT","AensPointerContextError","DryRunError","InvalidAensNameError","InvalidTxError","RequestTimedOutError","TxTimedOutError","TxNotInChainError","ArgumentError","sendTransaction","tx","options","opt","Ae","defaults","verify","validation","selectedNode","instance","length","message","map","v","join","Object","assign","code","transaction","txHash","api","postTransaction","__queue","address","catch","waitMined","txData","poll","rawTx","confirm","confirmationHeight","waitForTxConfirm","hash","error","verifyTx","blockHeight","getTransactionByHash","height","awaitHeight","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","balance","format","AETTOS","targetDenomination","toString","getBalance","_","info","includes","type","getTxInfo","e","getCurrentKeyBlockHeight","interval","_getPollInterval","attempts","currentHeight","i","th","blocks","max","status","getCheckTxInPool","result","getTransactionInfoByHash","callInfo","mempool","getPendingTransactions","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHash","getGenerationByHeight","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHash","getKeyBlockByHeight","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunHandler","key","rs","_txDryRun","dryRunRes","protectedDryRunTxs","top","txEvents","txs","req","accounts","Array","from","Set","accountAddress","pubKey","amount","forEach","reject","results","idx","reason","resultPayload","resolve","txDryRun","combine","Promise","push","call","timeout","setTimeout","bind","getContractByteCode","contractId","getContractCode","getContract","getName","name","getNameEntryByName","resolveName","nameOrId","resolveByNode","pointer","pointers","find","id","ChainNode","compose","methods"],"mappings":"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","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2018 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\nimport Chain from './'\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../utils/amount-formatter'\nimport verifyTransaction from '../tx/validator'\nimport NodePool from '../node-pool'\nimport { pause } from '../utils/other'\nimport { isNameValid, produceNameId, decode } from '../tx/builder/helpers'\nimport { DRY_RUN_ACCOUNT } from '../tx/builder/schema'\nimport {\n  AensPointerContextError,\n  DryRunError,\n  InvalidAensNameError,\n  InvalidTxError,\n  RequestTimedOutError,\n  TxTimedOutError,\n  TxNotInChainError,\n  ArgumentError\n} from '../utils/errors'\n\n/**\n * ChainNode module\n *\n * This is the complement to {@link module:@aeternity/aepp-sdk/es/chain}.\n * @module @aeternity/aepp-sdk/es/chain/node\n * @export ChainNode\n * @example import { ChainNode } from '@aeternity/aepp-sdk'\n */\n\nasync function sendTransaction (tx, options = {}) {\n  const opt = { ...this.Ae.defaults, ...options }\n  if (opt.verify) {\n    const validation = await verifyTransaction(tx, this.selectedNode.instance)\n    if (validation.length) {\n      const message = 'Transaction verification errors: ' +\n        validation.map(v => v.message).join(', ')\n      throw Object.assign(new InvalidTxError(message), {\n        code: 'TX_VERIFICATION_ERROR',\n        validation,\n        transaction: tx\n      })\n    }\n  }\n\n  try {\n    const { txHash } = await this.api.postTransaction({ tx }, {\n      __queue: `tx-${await this.address?.(options).catch(() => '')}`\n    })\n\n    if (opt.waitMined) {\n      const txData = { ...await this.poll(txHash, options), rawTx: tx }\n      // wait for transaction confirmation\n      if (options.confirm) {\n        return { ...txData, confirmationHeight: await this.waitForTxConfirm(txHash, options) }\n      }\n      return txData\n    }\n    return { hash: txHash, rawTx: tx }\n  } catch (error) {\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: () => verifyTransaction(tx, this.selectedNode.instance)\n    })\n  }\n}\n\nasync function waitForTxConfirm (txHash, options = { confirm: 3 }) {\n  options.confirm = options.confirm === true ? 3 : options.confirm\n  const { blockHeight } = await this.api.getTransactionByHash(txHash)\n  const height = await this.awaitHeight(blockHeight + options.confirm, options)\n  const { blockHeight: newBlockHeight } = await this.api.getTransactionByHash(txHash)\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash)\n    case blockHeight:\n      return height\n    default:\n      return waitForTxConfirm(txHash, options)\n  }\n}\n\nasync function getAccount (address, { height, hash } = {}) {\n  if (height) return this.api.getAccountByPubkeyAndHeight(address, height)\n  if (hash) return this.api.getAccountByPubkeyAndHash(address, hash)\n  return this.api.getAccountByPubkey(address)\n}\n\n/**\n * @function\n * @deprecated\n */\nasync function balance (address, { height, hash, format = AE_AMOUNT_FORMATS.AETTOS } = {}) {\n  const { balance } = await this.getAccount(address, { hash, height })\n\n  return formatAmount(balance, { targetDenomination: format }).toString()\n}\n\nasync function getBalance (address, { height, hash, format = AE_AMOUNT_FORMATS.AETTOS } = {}) {\n  const { balance } = await this.getAccount(address, { hash, height }).catch(_ => ({ balance: 0 }))\n\n  return formatAmount(balance, { targetDenomination: format }).toString()\n}\n\n/**\n * @deprecated use `sdk.api.getTransactionByHash/getTransactionInfoByHash` instead\n */\nasync function tx (hash, info = true) {\n  const tx = await this.api.getTransactionByHash(hash)\n  if (['ContractCreateTx', 'ContractCallTx', 'ChannelForceProgressTx'].includes(tx.tx.type) && info && tx.blockHeight !== -1) {\n    try {\n      return { ...tx, ...await this.getTxInfo(hash) }\n    } catch (e) {}\n  }\n  return tx\n}\n\nasync function height () {\n  return (await this.api.getCurrentKeyBlockHeight()).height\n}\n\nasync function awaitHeight (\n  height,\n  { interval = this._getPollInterval('block'), attempts = 20 } = {}\n) {\n  let currentHeight\n  for (let i = 0; i < attempts; i++) {\n    if (i) await pause(interval)\n    currentHeight = await this.height()\n    if (currentHeight >= height) return currentHeight\n  }\n  throw new RequestTimedOutError((attempts - 1) * interval, currentHeight, height)\n}\n\nasync function poll (th, { blocks = 10, interval = this._getPollInterval('microblock') } = {}) {\n  const max = await this.height() + blocks\n  do {\n    const tx = await this.api.getTransactionByHash(th)\n    if (tx.blockHeight !== -1) return tx\n    await pause(interval)\n  } while (await this.height() < max)\n  const status = this.api.getCheckTxInPool && (await this.api.getCheckTxInPool(th)).status\n  throw new TxTimedOutError(blocks, th, status)\n}\n\n/**\n * @deprecated use `sdk.api.getTransactionInfoByHash` instead\n */\nasync function getTxInfo (hash) {\n  const result = await this.api.getTransactionInfoByHash(hash)\n  return result.callInfo || result\n}\n\nasync function mempool () {\n  return this.api.getPendingTransactions()\n}\n\nasync function getCurrentGeneration () {\n  return this.api.getCurrentGeneration()\n}\n\nasync function getGeneration (hashOrHeight) {\n  if (typeof hashOrHeight === 'string') return this.api.getGenerationByHash(hashOrHeight)\n  if (typeof hashOrHeight === 'number') return this.api.getGenerationByHeight(hashOrHeight)\n  throw new ArgumentError('hashOrHeight', 'a string or number', hashOrHeight)\n}\n\nasync function getMicroBlockTransactions (hash) {\n  return (await this.api.getMicroBlockTransactionsByHash(hash)).transactions\n}\n\nasync function getKeyBlock (hashOrHeight) {\n  if (typeof hashOrHeight === 'string') return this.api.getKeyBlockByHash(hashOrHeight)\n  if (typeof hashOrHeight === 'number') return this.api.getKeyBlockByHeight(hashOrHeight)\n  throw new ArgumentError('hashOrHeight', 'a string or number', hashOrHeight)\n}\n\nasync function getMicroBlockHeader (hash) {\n  return this.api.getMicroBlockHeaderByHash(hash)\n}\n\nasync function txDryRunHandler (key) {\n  const rs = this._txDryRun[key]\n  delete this._txDryRun[key]\n\n  let dryRunRes\n  try {\n    dryRunRes = await this.api.protectedDryRunTxs({\n      top: rs[0].top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map(req => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map(req => req.accountAddress)))\n        .map(pubKey => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount }))\n    })\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error))\n    return\n  }\n\n  const { results, txEvents } = dryRunRes\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const { resolve, reject, tx, options, accountAddress } = rs[idx]\n    if (result === 'ok') return resolve({ ...resultPayload, txEvents })\n    reject(Object.assign(\n      new DryRunError(reason), { tx, accountAddress, options }\n    ))\n  })\n}\n\nasync function txDryRun (tx, accountAddress, { top, txEvents, combine }) {\n  const key = combine ? [top, txEvents].join() : 'immediate'\n  this._txDryRun ??= {}\n  this._txDryRun[key] ??= []\n  return new Promise((resolve, reject) => {\n    this._txDryRun[key].push({ tx, accountAddress, top, txEvents, resolve, reject })\n    if (!combine) {\n      txDryRunHandler.call(this, key)\n      return\n    }\n    this._txDryRun[key].timeout ??= setTimeout(txDryRunHandler.bind(this, key))\n  })\n}\n\nasync function getContractByteCode (contractId) {\n  return this.api.getContractCode(contractId)\n}\n\nasync function getContract (contractId) {\n  return this.api.getContract(contractId)\n}\n\nasync function getName (name) {\n  return this.api.getNameEntryByName(name)\n}\n\n/**\n * Resolve AENS name and return name hash\n * @param {String} nameOrId\n * @param {String} key in AENS pointers record\n * @param {Object} [options]\n * @param {Boolean} [options.verify] To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param {Boolean} [options.resolveByNode] Enables pointer resolving using node\n * @return {String} Address or AENS name hash\n */\nasync function resolveName (nameOrId, key, { verify, resolveByNode } = {}) {\n  if (!nameOrId || typeof nameOrId !== 'string') {\n    throw new InvalidAensNameError(`Name or address should be a string: ${nameOrId}`)\n  }\n  try {\n    decode(nameOrId)\n    return nameOrId\n  } catch (error) {}\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await this.api.getNameEntryByName(nameOrId)\n      const pointer = name.pointers.find(pointer => pointer.key === key)\n      if (!pointer) {\n        throw new AensPointerContextError(`Name ${nameOrId} don't have pointers for ${key}`)\n      }\n      if (resolveByNode) return pointer.id\n    }\n    return produceNameId(nameOrId)\n  }\n  throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`)\n}\n\n/**\n * ChainNode Stamp\n *\n * This is implementation of {@link module:@aeternity/aepp-sdk/es/chain--Chain}\n * composed with {@link module:@aeternity/aepp-sdk/es/contract/node--ContractNodeAPI} and\n * {@link module:@aeternity/aepp-sdk/es/oracle/node--OracleNodeAPI}\n * @function\n * @alias module:@aeternity/aepp-sdk/es/chain/node\n * @rtype Stamp\n * @param {Object} [options={}] - Initializer object\n * @return {Object} ChainNode instance\n * @example ChainNode({url: 'https://testnet.aeternity.io/'})\n */\nconst ChainNode = Chain.compose(NodePool, {\n  methods: {\n    sendTransaction,\n    balance,\n    getBalance,\n    getAccount,\n    tx,\n    height,\n    awaitHeight,\n    poll,\n    getTxInfo,\n    mempool,\n    getCurrentGeneration,\n    getGeneration,\n    getMicroBlockHeader,\n    getMicroBlockTransactions,\n    getKeyBlock,\n    txDryRun,\n    getContractByteCode,\n    getContract,\n    getName,\n    waitForTxConfirm,\n    resolveName\n  }\n})\n\nexport default ChainNode\n"],"file":"node.mjs"}