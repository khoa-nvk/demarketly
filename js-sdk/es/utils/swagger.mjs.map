{"version":3,"sources":["../../src/utils/swagger.js"],"names":["SwaggerClient","fetch","JsonBig","snakizeKeys","pascalizeKeys","mapObject","filterObject","ArgumentCountMismatchError","snakeToPascal","warnedAboutInternalApiUsage","specUrl","spec","internalUrl","disableBigNumbers","disableCaseConversion","responseInterceptor","json","jsonImp","JSON","external","internal","Promise","all","map","url","pendingGetRequests","requestInterceptor","request","method","userFetch","key","stringify","clone","response","text","size","body","parse","Object","assign","combinedApi","apis","values","handler","console","warn","opSpecs","paths","flat","reduce","acc","n","operationId","requestQueues","api","opId","functionName","slice","toLowerCase","args","opSpec","parameters","requestBody","required","schema","content","name","filter","param","p","includes","length","req","idx","__requestBody","__queue","stringified","value","rootKeys","keys","find","properties","filteredValue","res","resolve","then","setTimeout"],"mappings":"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","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2021 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Generator of Swagger client module\n * @module @aeternity/aepp-sdk/es/utils/swagger\n * @export genSwaggerClient\n */\n\nimport SwaggerClient from 'swagger-client'\nimport fetch from 'cross-fetch'\nimport JsonBig from './json-big'\nimport { snakizeKeys, pascalizeKeys, mapObject, filterObject } from './other'\nimport { ArgumentCountMismatchError } from './errors'\nimport { snakeToPascal } from './string'\n\nlet warnedAboutInternalApiUsage = false\n\n/**\n * Generator of Swagger client\n * @function\n * @alias module:@aeternity/aepp-sdk/es/utils/swagger\n * @rtype Object\n * @param {String} specUrl - Swagger specification URL on external node host\n * @param {Object} options\n * @param {String} [options.spec] - Override OpenAPI definition\n * @param {String} [options.internalUrl] - Node internal URL\n * @param {Boolean} [options.disableBigNumbers]\n * @param {Boolean} [options.disableCaseConversion]\n * @param {Function} [options.responseInterceptor]\n * @return {Object} Swagger client\n * @example (await genSwaggerClient('https://mainnet.aeternity.io/api')).getAccountByPubkey('ak_jupBUgZNbcC4krDLR3tAkw1iBZoBbkNeShAq4atBtpFWmz36r')\n */\nexport default async (\n  specUrl,\n  { spec, internalUrl, disableBigNumbers, disableCaseConversion, responseInterceptor } = {}\n) => {\n  spec = spec || await (await fetch(specUrl)).json()\n  const jsonImp = disableBigNumbers ? JSON : JsonBig\n\n  const [external, internal] = await Promise.all([specUrl, internalUrl].map((url) => {\n    if (!url) return null\n    const pendingGetRequests = {}\n    return SwaggerClient({\n      url,\n      spec,\n      requestInterceptor: request => {\n        if (request.method !== 'GET') return\n        return {\n          ...request,\n          userFetch: async (url, request) => {\n            const key = JSON.stringify({ ...request, url })\n            pendingGetRequests[key] ??= fetch(url, request)\n            try {\n              return (await pendingGetRequests[key]).clone()\n            } finally {\n              delete pendingGetRequests[key]\n            }\n          }\n        }\n      },\n      responseInterceptor: response => {\n        if (response.text === '' || response.text?.size === 0) return response\n        const body = jsonImp.parse(response.text)\n        Object.assign(response, {\n          body: disableCaseConversion ? body : pascalizeKeys(body)\n        })\n        return (responseInterceptor && responseInterceptor(response)) || response\n      }\n    })\n  }))\n\n  const combinedApi = Object.assign(\n    {},\n    ...external.apis.external ? [external.apis.external] : Object.values(external.apis),\n    mapObject(internal?.apis.internal || {}, ([key, handler]) => [key, (...args) => {\n      if (!warnedAboutInternalApiUsage) {\n        console.warn(\n          'SDK\\'s wrapper of aeternity node internal API is deprecated, please use external ' +\n          'equivalent (for example, \"sdk.api.protectedDryRunTxs\" instead of \"sdk.api.dryRunTxs\") ' +\n          'or create a wrapper of internal API by yourself (using \"genSwaggerClient\")'\n        )\n        warnedAboutInternalApiUsage = true\n      }\n      return handler(...args)\n    }])\n  )\n\n  const opSpecs = Object.values(spec.paths)\n    .map(paths => Object.values(paths))\n    .flat()\n    .reduce((acc, n) => ({ ...acc, [n.operationId]: n }), {})\n\n  const requestQueues = {}\n  const api = mapObject(combinedApi, ([opId, handler]) => {\n    const functionName = opId.slice(0, 1).toLowerCase() + snakeToPascal(opId.slice(1))\n    return [\n      functionName,\n      async (...args) => {\n        const opSpec = opSpecs[opId]\n        const parameters = [\n          ...opSpec.parameters,\n          ...opSpec.requestBody\n            ? [{\n                required: opSpec.requestBody.required,\n                schema: Object.values(opSpec.requestBody.content)[0].schema,\n                name: '__requestBody'\n              }]\n            : []\n        ]\n        const required = parameters.filter(param => param.required).map(p => p.name)\n        if (![0, 1].includes(args.length - required.length)) {\n          throw new ArgumentCountMismatchError(functionName, required.length, args.length)\n        }\n        const values = required.reduce(\n          (acc, req, idx) => ({ ...acc, [req]: args[idx] }),\n          args[required.length] || {}\n        )\n        const { __requestBody, __queue, ...stringified } = mapObject(values, ([param, value]) => {\n          if (typeof value !== 'object') return [param, value]\n          const rootKeys = Object.keys(parameters.find(p => p.name === param).schema.properties)\n          const filteredValue = filterObject(\n            disableCaseConversion ? value : snakizeKeys(value),\n            ([key]) => rootKeys.includes(key)\n          )\n          return [param, jsonImp.stringify(filteredValue)]\n        })\n\n        const request = async () => (await handler(stringified, { requestBody: __requestBody }))\n          .body\n        if (!__queue) return request()\n        const res = (requestQueues[__queue] ?? Promise.resolve()).then(request, request)\n        // TODO: remove after fixing https://github.com/aeternity/aeternity/issues/3803\n        // gap to ensure that node won't reject the nonce\n        requestQueues[__queue] = res.then(() => new Promise(resolve => setTimeout(resolve, 750)))\n        return res\n      }\n    ]\n  })\n\n  return Object.assign(external, { api })\n}\n"],"file":"swagger.mjs"}