{"version":3,"sources":["../../src/utils/hd-wallet.js"],"names":["nacl","decryptKey","encryptKey","encode","InvalidDerivationPathError","NotHardenedSegmentError","UnsupportedChildIndexError","ED25519_CURVE","from","HARDENED_OFFSET","toHex","buffer","toString","derivePathFromKey","path","key","segments","fromString","toPathArray","forEach","segment","i","reduce","parentKey","deriveChild","derivePathFromSeed","seed","includes","slice","masterKey","getMasterKeyFromSeed","formatAccount","keys","secretKey","publicKey","getKeyPair","sign","keyPair","fromSeed","I","hmac","IL","IR","chainCode","index","indexBuffer","allocUnsafe","writeUInt32BE","data","concat","alloc","generateSaveHDWalletFromSeed","password","walletKey","getSaveHDWalletAccounts","saveHDWallet","accountCount","Array","fill","map","_","idx","getHdWalletAccountFromSeed","accountIdx","derived"],"mappings":"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","sourcesContent":["import nacl from 'tweetnacl'\nimport { full as hmac } from 'tweetnacl-auth'\nimport { fromString } from 'bip32-path'\nimport { decryptKey, encryptKey } from './crypto'\nimport { encode } from '../tx/builder/helpers'\nimport {\n  InvalidDerivationPathError, NotHardenedSegmentError, UnsupportedChildIndexError\n} from './errors'\n\nconst ED25519_CURVE = Buffer.from('ed25519 seed')\nconst HARDENED_OFFSET = 0x80000000\n\nconst toHex = (buffer) => Buffer.from(buffer).toString('hex')\n\nexport function derivePathFromKey (path, key) {\n  const segments = path === '' ? [] : fromString(path).toPathArray()\n  segments.forEach((segment, i) => {\n    if (segment < HARDENED_OFFSET) {\n      throw new NotHardenedSegmentError(`Segment #${i + 1} is not hardened`)\n    }\n  })\n\n  return segments.reduce((parentKey, segment) => deriveChild(parentKey, segment), key)\n}\n\nexport function derivePathFromSeed (path, seed) {\n  if (!['m', 'm/'].includes(path.slice(0, 2))) {\n    throw new InvalidDerivationPathError()\n  }\n  const masterKey = getMasterKeyFromSeed(seed)\n  return derivePathFromKey(path.slice(2), masterKey)\n}\n\nfunction formatAccount (keys) {\n  const { secretKey, publicKey } = keys\n  return {\n    secretKey: toHex(secretKey),\n    publicKey: encode(publicKey, 'ak')\n  }\n}\n\nexport function getKeyPair (secretKey) {\n  return nacl.sign.keyPair.fromSeed(secretKey)\n}\n\nexport function getMasterKeyFromSeed (seed) {\n  const I = hmac(seed, ED25519_CURVE)\n  const IL = I.slice(0, 32)\n  const IR = I.slice(32)\n  return {\n    secretKey: IL,\n    chainCode: IR\n  }\n}\n\nexport function deriveChild ({ secretKey, chainCode }, index) {\n  if (index < HARDENED_OFFSET) {\n    throw new UnsupportedChildIndexError(index)\n  }\n  const indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  const data = Buffer.concat([Buffer.alloc(1, 0), Buffer.from(secretKey), Buffer.from(indexBuffer)])\n\n  const I = hmac(data, chainCode)\n  const IL = I.slice(0, 32)\n  const IR = I.slice(32)\n  return {\n    secretKey: IL,\n    chainCode: IR\n  }\n}\n\nexport function generateSaveHDWalletFromSeed (seed, password) {\n  const walletKey = derivePathFromSeed('m/44h/457h', seed)\n  return {\n    secretKey: toHex(encryptKey(password, walletKey.secretKey)),\n    chainCode: toHex(encryptKey(password, walletKey.chainCode))\n  }\n}\n\nexport function getSaveHDWalletAccounts (saveHDWallet, password, accountCount) {\n  const walletKey = {\n    secretKey: decryptKey(password, Buffer.from(saveHDWallet.secretKey, 'hex')),\n    chainCode: decryptKey(password, Buffer.from(saveHDWallet.chainCode, 'hex'))\n  }\n  return (new Array(accountCount)).fill()\n    .map((_, idx) =>\n      formatAccount(getKeyPair(derivePathFromKey(`${idx}h/0h/0h`, walletKey).secretKey)))\n}\n\nexport const getHdWalletAccountFromSeed = (seed, accountIdx) => {\n  const walletKey = derivePathFromSeed('m/44h/457h', seed)\n  const derived = derivePathFromKey(`${accountIdx}h/0h/0h`, walletKey)\n  const keyPair = getKeyPair(derived.secretKey)\n  return {\n    ...formatAccount(keyPair),\n    idx: accountIdx\n  }\n}\n"],"file":"hd-wallet.mjs"}