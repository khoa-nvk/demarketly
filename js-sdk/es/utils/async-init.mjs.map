{"version":3,"sources":["../../src/utils/async-init.js"],"names":["stampit","asyncInit","options","stamp","args","instance","compose","deepConfiguration","AsyncInit","initializers","reduce","init","Promise","resolve","ret","call","undefined","deepConf","composers","composables","conf","map","c","flat","Infinity","filter","f","idx","arr","slice","includes"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,SAASC,SAAT,GAA6D;AAAA,MAAzCC,OAAyC,uEAA/B,EAA+B;AAAA,MAA3B;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,GAA2B;AAC3D,SAAOF,KAAK,CAACG,OAAN,CAAcC,iBAAd,CAAgCC,SAAhC,CAA0CC,YAA1C,CAAuDC,MAAvD,CAA8D,OAAOL,QAAP,EAAiBM,IAAjB,KAA0B;AAC7FN,IAAAA,QAAQ,GAAG,MAAMO,OAAO,CAACC,OAAR,CAAgBR,QAAhB,CAAjB;;AACA,QAAI,OAAOM,IAAP,KAAgB,UAApB,EAAgC;AAC9B,YAAMG,GAAG,GAAG,MAAMF,OAAO,CAACC,OAAR,CAAgBF,IAAI,CAACI,IAAL,CAAUV,QAAV,EAAoBH,OAApB,EAA6B;AAAEC,QAAAA,KAAF;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAA7B,CAAhB,CAAlB;AACA,aAAOS,GAAG,KAAKE,SAAR,GAAoBX,QAApB,GAA+BS,GAAtC;AACD;;AACD,WAAOT,QAAP;AACD,GAPM,EAOJA,QAPI,CAAP;AAQD;;AAED,eAAeL,OAAO,CAAC;AACrBiB,EAAAA,QAAQ,EAAE;AAAET,IAAAA,SAAS,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB;AAAb,GADW;;AAErBS,EAAAA,SAAS,OAA0B;AAAA,QAAxB;AAAEf,MAAAA,KAAF;AAASgB,MAAAA;AAAT,KAAwB;AACjC,UAAMC,IAAI,GAAGjB,KAAK,CAACG,OAAN,CAAcC,iBAAd,CAAgCC,SAA7C;AACAY,IAAAA,IAAI,CAACX,YAAL,GAAoBU,WAAW,CAC5BE,GADiB,CACbC,CAAC;AAAA;;AAAA,aACJ,CAAAA,CAAC,SAAD,IAAAA,CAAC,WAAD,0BAAAA,CAAC,CAAEhB,OAAH,mFAAYC,iBAAZ,0GAA+BC,SAA/B,kFAA0CC,YAA1C,KACA,CAACa,CAAC,CAAChB,OAAF,IAAagB,CAAd,EAAiBb,YADjB,IAEA,EAHI;AAAA,KADY,EAKjBc,IALiB,CAKZC,QALY,EAMjBC,MANiB,CAMV,CAACC,CAAD,EAAIC,GAAJ,EAASC,GAAT,KAAiB,CAACA,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAaF,GAAb,EAAkBG,QAAlB,CAA2BJ,CAA3B,CANR,EAOjBD,MAPiB,CAOVC,CAAC,IAAIA,CAAC,KAAKzB,SAPD,CAApB;AAQAE,IAAAA,KAAK,CAACG,OAAN,CAAcG,YAAd,GAA6B,CAACR,SAAD,CAA7B;AACD;;AAboB,CAAD,CAAtB","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2022 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\nimport stampit from '@stamp/it'\n\nfunction asyncInit (options = {}, { stamp, args, instance }) {\n  return stamp.compose.deepConfiguration.AsyncInit.initializers.reduce(async (instance, init) => {\n    instance = await Promise.resolve(instance)\n    if (typeof init === 'function') {\n      const ret = await Promise.resolve(init.call(instance, options, { stamp, args, instance }))\n      return ret === undefined ? instance : ret\n    }\n    return instance\n  }, instance)\n}\n\nexport default stampit({\n  deepConf: { AsyncInit: { initializers: [] } },\n  composers ({ stamp, composables }) {\n    const conf = stamp.compose.deepConfiguration.AsyncInit\n    conf.initializers = composables\n      .map(c =>\n        c?.compose?.deepConfiguration?.AsyncInit?.initializers ||\n        (c.compose || c).initializers ||\n        [])\n      .flat(Infinity)\n      .filter((f, idx, arr) => !arr.slice(0, idx).includes(f))\n      .filter(f => f !== asyncInit)\n    stamp.compose.initializers = [asyncInit]\n  }\n})\n"],"file":"async-init.mjs"}