{"version":3,"sources":["../../../../src/utils/aepp-wallet-communication/connection/browser-window-message.js"],"names":["stampit","WalletConnection","v4","uuid","MESSAGE_DIRECTION","getBrowserAPI","isInIframe","AlreadyConnectedError","NoWalletConnectedError","MessageDirectionError","isConnected","listener","connect","onMessage","origin","receiveDirection","debug","forceOrigin","msg","source","data","console","log","type","subscribeFn","disconnect","unsubscribeFn","sendMessage","message","sendDirection","postFn","getTarget","isExtensionContext","extension","isWeb","window","location","protocol","startsWith","isContentScript","parent","undefined","init","connectionInfo","target","self","to_aepp","Object","keys","includes","id","selfP","targetP","addEventListener","removeEventListener","postMessage","methods"],"mappings":"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","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2018 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Browser window Post Message connector module\n *\n * This is the complement to\n * {@link module:@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection}.\n * @module @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message\n * @export BrowserWindowMessageConnection\n * @example\n * import BrowserWindowMessageConnection\n * from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message'\n */\nimport stampit from '@stamp/it'\nimport WalletConnection from '.'\nimport { v4 as uuid } from '@aeternity/uuid'\nimport { MESSAGE_DIRECTION } from '../schema'\nimport { getBrowserAPI, isInIframe } from '../helpers'\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  MessageDirectionError\n} from '../../errors'\n\n/**\n * Check if connected\n * @function isConnected\n * @instance\n * @rtype () => Boolean\n * @return {Boolean} Is connected\n */\nfunction isConnected () {\n  return this.listener\n}\n\n/**\n * Connect\n * @function connect\n * @instance\n * @rtype (onMessage: Function) => void\n * @param {Function} onMessage - Message handler\n * @return {void}\n */\nfunction connect (onMessage) {\n  const origin = this.origin\n  const receiveDirection = this.receiveDirection\n  const debug = this.debug\n  const forceOrigin = this.forceOrigin\n  if (this.listener) throw new AlreadyConnectedError('You already connected')\n\n  this.listener = (msg, source) => {\n    if (!msg || typeof msg.data !== 'object') return\n    if (!forceOrigin && origin && origin !== msg.origin) return\n    if (debug) console.log('Receive message: ', msg)\n    if (msg.data.type) {\n      if (msg.data.type !== receiveDirection) return\n      onMessage(msg.data.data, msg.origin, msg.source)\n    } else {\n      onMessage(msg.data, msg.origin, msg.source)\n    }\n  }\n  this.subscribeFn(this.listener)\n}\n\n/**\n * Disconnect\n * @function disconnect\n * @instance\n * @rtype () => void\n * @return {void}\n */\nfunction disconnect () {\n  if (!this.listener) throw new NoWalletConnectedError('You dont have connection. Please connect before')\n  this.unsubscribeFn(this.listener)\n  this.listener = null\n}\n\n/**\n * Send message\n * @function sendMessage\n * @instance\n * @rtype (msg: Object) => void\n * @param {Object} msg - Message\n * @return {void}\n */\nfunction sendMessage (msg) {\n  const message = this.sendDirection ? { type: this.sendDirection, data: msg } : msg\n  if (this.debug) console.log('Send message: ', message)\n  this.postFn(message)\n}\n\nconst getTarget = () => {\n  const isExtensionContext = typeof getBrowserAPI(true).extension === 'object'\n  const isWeb = window && window.location && window.location.protocol.startsWith('http')\n  const isContentScript = isExtensionContext && isWeb\n  if (isContentScript) return window\n  // When we is the main page we need to decide the target by our self\n  // Probably can be implemented some algo for checking DOM for Iframes and somehow decide which\n  // Iframe to talk\n  return isInIframe() ? window.parent : undefined\n}\n\n/**\n * BrowserWindowMessageConnection\n * @function\n * @alias module:@aeternity/aepp-sdk/es/utils/aepp-wallet-communication\\\n * /connection/browser-window-message\n * @rtype Stamp\n * @param {Object} [params={}] - Initializer object\n * @param {Object} [params.target=window.parent] - Target window for message\n * @param {Object} [params.self=window] - Host window for message\n * @param {Object} [params.origin] - Origin of receiver\n * @param {String} [params.sendDirection] Wrapping messages into additional struct\n * ({ type: 'to_aepp' || 'to_waellet', data })\n * Used for handling messages between content script and page\n * @param {String} [params.receiveDirection='to_aepp'] Unwrapping messages from additional struct\n * ({ type: 'to_aepp' || 'to_waellet', data })\n * Used for handling messages between content script and page\n * @param {Object} [params.connectionInfo={}] - Connection info object\n * @param {Boolean} [params.debug=false] - Debug flag\n * @return {Object}\n */\nexport default stampit({\n  init ({\n    connectionInfo = {},\n    target = getTarget(),\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    debug = false,\n    forceOrigin = false\n  } = {}) {\n    if (sendDirection && !Object.keys(MESSAGE_DIRECTION).includes(sendDirection)) throw new MessageDirectionError(`sendDirection must be one of [${Object.keys(MESSAGE_DIRECTION)}]`)\n    if (!Object.keys(MESSAGE_DIRECTION).includes(receiveDirection)) throw new MessageDirectionError(`receiveDirection must be one of [${Object.keys(MESSAGE_DIRECTION)}]`)\n    this.connectionInfo = { id: uuid(), ...connectionInfo }\n\n    const selfP = self\n    const targetP = target\n    this.origin = origin\n    this.debug = debug\n    this.forceOrigin = forceOrigin\n    this.sendDirection = sendDirection\n    this.receiveDirection = receiveDirection\n    this.subscribeFn = (listener) => selfP.addEventListener('message', listener, false)\n    this.unsubscribeFn = (listener) => selfP.removeEventListener('message', listener, false)\n    this.postFn = (msg) => targetP.postMessage(msg, this.origin || '*')\n  },\n  methods: { connect, sendMessage, disconnect, isConnected }\n}, WalletConnection)\n"],"file":"browser-window-message.mjs"}