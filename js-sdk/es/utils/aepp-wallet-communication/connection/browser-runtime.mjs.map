{"version":3,"sources":["../../../../src/utils/aepp-wallet-communication/connection/browser-runtime.js"],"names":["stampit","WalletConnection","getBrowserAPI","RpcConnectionError","AlreadyConnectedError","NoWalletConnectedError","disconnect","port","e","console","warning","connect","onMessage","onDisconnect","isConnected","handler","msg","source","debug","log","addListener","sendMessage","postMessage","hasListeners","hasListener","init","connectionInfo","runtime","id","undefined","methods"],"mappings":"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","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2018 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Browser runtime connector module\n *\n * This is the complement to\n * {@link module:@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection}.\n * @module @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime\n * @export BrowserRuntimeConnection\n * @example import { BrowserRuntimeConnection } from '@aeternity/aepp-sdk'\n */\nimport stampit from '@stamp/it'\n\nimport WalletConnection from '.'\nimport { getBrowserAPI } from '../helpers'\nimport {\n  RpcConnectionError,\n  AlreadyConnectedError,\n  NoWalletConnectedError\n} from '../../errors'\n\n/**\n * Disconnect\n * @function disconnect\n * @instance\n * @rtype () => void\n * @return {void}\n */\nfunction disconnect () {\n  try {\n    this.port.disconnect()\n  } catch (e) {\n    console.warning('From BrowserRuntimeConnection: ', e)\n  }\n}\n\n/**\n * Connect\n * @function connect\n * @instance\n * @rtype (onMessage: Function, onDisconnect: Function) => void\n * @param {Function} onMessage - Message handler\n * @param {Function} onDisconnect - trigger when runtime connection in closed\n * @return {void}\n */\nfunction connect (onMessage, onDisconnect) {\n  if (this.isConnected()) throw new AlreadyConnectedError('You already connected')\n  this.handler = (msg, source) => {\n    if (this.debug) console.log('Receive message: ', msg)\n    onMessage(msg, source)\n  }\n  this.port.onMessage.addListener(this.handler)\n  this.port.onDisconnect.addListener(() => {\n    typeof onDisconnect === 'function' && onDisconnect({}, this)\n    this.port.disconnect()\n  })\n}\n\n/**\n * Send message\n * @function sendMessage\n * @instance\n * @rtype (msg: Object) => void\n * @param {Object} msg - Message\n * @return {void}\n */\nfunction sendMessage (msg) {\n  if (!this.port) throw new NoWalletConnectedError('You dont have connection. Please connect before')\n  if (this.debug) console.log('Send message: ', msg)\n  this.port.postMessage(msg)\n}\n\n/**\n * Check if connected\n * @function isConnected\n * @instance\n * @rtype () => Boolean\n * @return {Boolean} Is connected\n */\nfunction isConnected () {\n  return typeof this.port.onMessage.hasListeners === 'function' ? this.port.onMessage.hasListeners() : this.port.onMessage.hasListener(this.handler)\n}\n\n/**\n * BrowserRuntimeConnection stamp\n * Handle browser runtime communication\n * @function\n * @alias module:@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime\n * @rtype Stamp\n * @param {Object} params={} - Initializer object\n * @param {Object} params.port - Runtime `port` object\n * @param {Object} [params.connectionInfo={}] - Connection info object\n * @param {Boolean} [params.debug=false] - Debug flag\n * @return {Object}\n */\nexport default stampit({\n  init ({ connectionInfo = {}, port, debug = false }) {\n    if (!getBrowserAPI().runtime) throw new RpcConnectionError('Runtime is not accessible in your environment')\n    this.debug = debug\n    this.connectionInfo = connectionInfo\n    this.port = port || getBrowserAPI().runtime.connect(...[connectionInfo.id || undefined])\n  },\n  methods: { connect, sendMessage, disconnect, isConnected }\n}, WalletConnection)\n"],"file":"browser-runtime.mjs"}