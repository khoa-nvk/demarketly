{"version":3,"sources":["../../../../src/utils/aepp-wallet-communication/rpc/aepp-rpc.js"],"names":["v4","uuid","Ae","RpcClient","getHandler","message","METHODS","RPC_STATUS","VERSION","AlreadyConnectedError","NoWalletConnectedError","UnsubscribedAccountError","UnAuthorizedAccountError","ArgumentError","RpcConnectionError","Node","NOTIFICATIONS","updateAddress","instance","params","rpcClient","accounts","onAddressChange","updateNetwork","networkId","node","info","addNode","name","onNetworkChange","closeConnection","msg","disconnectWallet","onDisconnect","RESPONSES","address","processResponse","connect","result","status","CONNECTED","subscribeAddress","subscription","addressSubscription","id","sign","signedTransaction","transactionHash","signMessage","signature","REQUESTS","handleMessage","debug","Object","prototype","hasOwnProperty","call","callbacks","compose","init","connection","other","forEach","event","handler","connectToWallet","deepProps","defaults","walletBroadcast","methods","addresses","isSubscribedAccount","currentAccount","keys","connected","connectNode","select","isConnected","getNetworkId","force","connectionInfo","handlers","walletInfo","sendConnectRequest","sendDisconnect","sendMessage","reason","disconnect","onAccount","current","hasAccessToAccount","askAddresses","request","type","value","signTransaction","tx","opt","returnSigned","version","send","options","signed","sendTransaction"],"mappings":"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","sourcesContent":["/**\n * RPC handler for AEPP side\n *\n * @module @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc\n * @export AeppRpc\n * @example\n * import ContentScriptBridge\n * from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc'\n */\nimport { v4 as uuid } from '@aeternity/uuid'\nimport Ae from '../../../ae'\nimport RpcClient from './rpc-client'\nimport { getHandler, message } from '../helpers'\nimport { METHODS, RPC_STATUS, VERSION } from '../schema'\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  UnsubscribedAccountError,\n  UnAuthorizedAccountError,\n  ArgumentError,\n  RpcConnectionError\n} from '../../errors'\nimport Node from '../../../node'\n\nconst NOTIFICATIONS = {\n  [METHODS.updateAddress]: (instance) =>\n    ({ params }) => {\n      instance.rpcClient.accounts = params\n      instance.onAddressChange(params)\n    },\n  [METHODS.updateNetwork]: (instance) =>\n    async ({ params }) => {\n      const { networkId, node } = params\n      instance.rpcClient.info.networkId = networkId\n      node && instance.addNode(node.name, await Node(node), true)\n      instance.onNetworkChange(params)\n    },\n  [METHODS.closeConnection]: (instance) =>\n    (msg) => {\n      instance.disconnectWallet()\n      instance.onDisconnect(msg.params)\n    }\n}\n\nconst RESPONSES = {\n  [METHODS.address]: (instance) =>\n    (msg) => instance.rpcClient.processResponse(msg),\n  [METHODS.connect]: (instance) =>\n    (msg) => {\n      if (msg.result) instance.rpcClient.info.status = RPC_STATUS.CONNECTED\n      instance.rpcClient.processResponse(msg)\n    },\n  [METHODS.subscribeAddress]: (instance) =>\n    (msg) => {\n      if (msg.result) {\n        if (msg.result.address) {\n          instance.rpcClient.accounts = msg.result.address\n        }\n        if (msg.result.subscription) {\n          instance.rpcClient.addressSubscription = msg.result.subscription\n        }\n      }\n\n      instance.rpcClient.processResponse(msg, ({ id, result }) => [result])\n    },\n  [METHODS.sign]: (instance) =>\n    (msg) => {\n      instance.rpcClient.processResponse(\n        msg, ({ id, result }) => [result.signedTransaction || result.transactionHash]\n      )\n    },\n  [METHODS.signMessage]: (instance) =>\n    (msg) => {\n      instance.rpcClient.processResponse(msg, ({ id, result }) => [result.signature])\n    }\n}\n\nconst REQUESTS = {}\n\nconst handleMessage = (instance) => async (msg) => {\n  if (!msg.id) {\n    return getHandler(NOTIFICATIONS, msg, { debug: instance.debug })(instance)(msg)\n  } else if (Object.prototype.hasOwnProperty.call(instance.rpcClient.callbacks, msg.id)) {\n    return getHandler(RESPONSES, msg, { debug: instance.debug })(instance)(msg)\n  } else {\n    return getHandler(REQUESTS, msg, { debug: instance.debug })(instance)(msg)\n  }\n}\n\n/**\n * Contain functionality for wallet interaction and connect it to sdk\n * @alias module:@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc\n * @function\n * @rtype Stamp\n * @param {Object} param Init params object\n * @param {String=} [param.name] Aepp name\n * @param {Function} onAddressChange Call-back function for update address event\n * @param {Function} onDisconnect Call-back function for disconnect event\n * @param {Function} onNetworkChange Call-back function for update network event\n * @param {Object} connection Wallet connection object\n * @return {Object}\n */\nexport default Ae.compose({\n  async init ({\n    name,\n    connection,\n    debug = false,\n    ...other\n  }) {\n    ['onAddressChange', 'onDisconnect', 'onNetworkChange'].forEach(event => {\n      const handler = other[event] ?? (() => {})\n      if (typeof handler !== 'function') throw new ArgumentError(event, 'a function', handler)\n      this[event] = handler\n    })\n\n    this.connection = connection\n    this.name = name\n    this.debug = debug\n\n    if (connection) {\n      // Init RPCClient\n      await this.connectToWallet(connection)\n    }\n  },\n  deepProps: { Ae: { defaults: { walletBroadcast: true } } },\n  methods: {\n    sign () {\n    },\n    addresses () {\n      if (!this.isSubscribedAccount()) throw new UnsubscribedAccountError()\n      return [this.rpcClient.currentAccount, ...Object.keys(this.rpcClient.accounts.connected)]\n    },\n    /**\n     * Connect to wallet\n     * @function connectToWallet\n     * @instance\n     * @rtype (connection: Object) => void\n     * @param {Object} connection Wallet connection object\n     * @param {Object} [options={}]\n     * @param {Boolean} [options.connectNode=true] - Request wallet to bind node\n     * @param {String}  [options.name=wallet-node] - Node name\n     * @param {Boolean} [options.select=false] - Select this node as current\n     * @return {Object}\n     */\n    async connectToWallet (connection, { connectNode = false, name = 'wallet-node', select = false } = {}) {\n      if (this.rpcClient && this.rpcClient.isConnected()) throw new AlreadyConnectedError('You are already connected to wallet ' + this.rpcClient)\n      this.rpcClient = RpcClient({\n        connection,\n        networkId: this.getNetworkId({ force: true }),\n        ...connection.connectionInfo,\n        id: uuid(),\n        handlers: [handleMessage(this), this.onDisconnect]\n      })\n      const walletInfo = await this.sendConnectRequest(connectNode)\n      if (connectNode && !Object.prototype.hasOwnProperty.call(walletInfo, 'node')) {\n        throw new RpcConnectionError('Missing URLs of the Node')\n      }\n      connectNode && this.addNode(name, await Node(walletInfo.node), select)\n      return walletInfo\n    },\n    /**\n     * Disconnect from wallet\n     * @function disconnectWallet\n     * @instance\n     * @rtype (force: Boolean = false) => void\n     * @param {Boolean} sendDisconnect=false Force sending close connection message\n     * @return {void}\n     */\n    async disconnectWallet (sendDisconnect = true) {\n      if (!this.isConnected()) throw new NoWalletConnectedError('You are not connected to Wallet')\n      sendDisconnect && this.rpcClient.sendMessage(message(METHODS.closeConnection, { reason: 'bye' }), true)\n      this.rpcClient.disconnect()\n      this.rpcClient = null\n    },\n    async address ({ onAccount } = {}) {\n      if (!this.isConnected()) throw new NoWalletConnectedError('You are not connected to Wallet')\n      const current = this.rpcClient.currentAccount\n      if (!current) throw new UnsubscribedAccountError()\n      if (onAccount && !this.rpcClient.hasAccessToAccount(onAccount)) {\n        throw new UnAuthorizedAccountError(onAccount)\n      }\n      return onAccount || current\n    },\n    /**\n     * Ask address from wallet\n     * @function askAddresses\n     * @instance\n     * @rtype () => Promise\n     * @return {Promise} Address from wallet\n     */\n    async askAddresses () {\n      if (!this.isConnected()) throw new NoWalletConnectedError('You are not connected to Wallet')\n      if (!this.isSubscribedAccount()) throw new UnsubscribedAccountError()\n      return this.rpcClient.request(METHODS.address)\n    },\n    /**\n     * Subscribe for addresses from wallet\n     * @function subscribeAddress\n     * @instance\n     * @rtype (type: String, value: String) => Promise\n     * @param {String} type Should be one of 'current' (the selected account), 'connected' (all)\n     * @param {String} value Subscription action('subscribe'|'unsubscribe')\n     * @return {Promise} Address from wallet\n     */\n    async subscribeAddress (type, value) {\n      if (!this.isConnected()) throw new NoWalletConnectedError('You are not connected to Wallet')\n      return this.rpcClient.request(METHODS.subscribeAddress, { type, value })\n    },\n    /**\n     * Overwriting of `signTransaction` AE method\n     * All sdk API which use it will be send notification to wallet and wait for callBack\n     * @function signTransaction\n     * @instance\n     * @rtype (tx: String, options = {}) => Promise\n     * @return {Promise<String>} Signed transaction\n     */\n    async signTransaction (tx, opt = {}) {\n      if (!this.isConnected()) throw new NoWalletConnectedError('You are not connected to Wallet')\n      if (!this.isSubscribedAccount()) throw new UnsubscribedAccountError()\n      if (opt.onAccount && !this.rpcClient.hasAccessToAccount(opt.onAccount)) {\n        throw new UnAuthorizedAccountError(opt.onAccount)\n      }\n      return this.rpcClient.request(\n        METHODS.sign,\n        { ...opt, tx, returnSigned: true, networkId: this.getNetworkId() }\n      )\n    },\n    /**\n     * Overwriting of `signMessage` AE method\n     * All sdk API which use it will be send notification to wallet and wait for callBack\n     * @function signMessage\n     * @instance\n     * @rtype (msg: String, options = {}) => Promise\n     * @return {Promise<String>} Signed transaction\n     */\n    async signMessage (msg, opt = {}) {\n      if (!this.isConnected()) throw new NoWalletConnectedError('You are not connected to Wallet')\n      if (!this.isSubscribedAccount()) throw new UnsubscribedAccountError()\n      if (opt.onAccount && !this.rpcClient.hasAccessToAccount(opt.onAccount)) {\n        throw new UnAuthorizedAccountError(opt.onAccount)\n      }\n      return this.rpcClient.request(METHODS.signMessage, { ...opt, message: msg })\n    },\n    /**\n     * Send connection request to wallet\n     * @function sendConnectRequest\n     * @instance\n     * @param {Boolean} connectNode - Request wallet to bind node\n     * @rtype () => Promise\n     * @return {Promise} Connection response\n     */\n    async sendConnectRequest (connectNode) {\n      return this.rpcClient.request(\n        METHODS.connect, {\n          name: this.name,\n          version: VERSION,\n          networkId: this.getNetworkId({ force: true }),\n          connectNode\n        }\n      )\n    },\n    /**\n     * Overwriting of `send` AE method\n     * All sdk API which use it will be send notification to wallet and wait for callBack\n     * This method will sign, broadcast and wait until transaction will be accepted using rpc\n     * communication with wallet\n     * @function send\n     * @instance\n     * @rtype (tx: String, options = {}) => Promise\n     * @param {String} tx\n     * @param {Object} [options={}]\n     * @param {Object} [options.walletBroadcast=true]\n     * @return {Promise<Object>} Transaction broadcast result\n     */\n    async send (tx, options = {}) {\n      if (!this.isConnected()) throw new NoWalletConnectedError('You are not connected to Wallet')\n      if (!this.isSubscribedAccount()) throw new UnsubscribedAccountError()\n      if (options.onAccount && !this.rpcClient.hasAccessToAccount(options.onAccount)) {\n        throw new UnAuthorizedAccountError(options.onAccount)\n      }\n      const opt = { ...this.Ae.defaults, ...options }\n      if (!opt.walletBroadcast) {\n        const signed = await this.signTransaction(tx, { onAccount: opt.onAccount })\n        return this.sendTransaction(signed, opt)\n      }\n      return this.rpcClient.request(\n        METHODS.sign,\n        { onAccount: opt.onAccount, tx, returnSigned: false, networkId: this.getNetworkId() }\n      )\n    },\n    isConnected () { return (this.rpcClient && this.rpcClient.isConnected()) },\n    isSubscribedAccount () { return typeof this.rpcClient.currentAccount !== 'undefined' }\n  }\n})\n"],"file":"aepp-rpc.mjs"}