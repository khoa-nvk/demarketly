{"version":3,"sources":["../../../src/utils/aepp-wallet-communication/wallet-detector.js"],"names":["stampit","BrowserWindowMessageConnection","MESSAGE_DIRECTION","METHODS","UnsupportedPlatformError","init","connection","window","connectionInfo","id","wallets","methods","scan","onDetected","connect","origin","source","method","params","readyToConnect","wallet","getConnection","isExtension","type","sendDirection","to_waellet","undefined","receiveDirection","to_aepp","target","newWallet","Object","keys","length","stopScan","disconnect"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,OAAP,MAAoB,WAApB;OACOC,8B;SACEC,iB,EAAmBC,O;SACnBC,wB;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeJ,OAAO,CAAC;AACrBK,EAAAA,IAAI,GAAuB;AAAA,QAArB;AAAEC,MAAAA;AAAF,KAAqB,uEAAJ,EAAI;AACzB,QAAI,CAACC,MAAL,EAAa,MAAM,IAAIH,wBAAJ,CAA6B,sEAA7B,CAAN;AACb,SAAKE,UAAL,GAAkBA,UAAU,IAAIL,8BAA8B,CAAC;AAAEO,MAAAA,cAAc,EAAE;AAAEC,QAAAA,EAAE,EAAE;AAAN;AAAlB,KAAD,CAA9D;AACA,SAAKC,OAAL,GAAe,EAAf;AACD,GALoB;;AAMrBC,EAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,IAAI,CAAEC,UAAF,EAAc;AAChB,YAAM;AAAEH,QAAAA;AAAF,UAAc,IAApB;AACA,WAAKJ,UAAL,CAAgBQ,OAAhB,CAAwB,OAAqBC,MAArB,EAA6BC,MAA7B,KAAwC;AAAA,YAAvC;AAAEC,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SAAuC;AAC9D,YACE,CAACD,MAAD,IAAW,CAACC,MAAZ,IACAD,MAAM,KAAKd,OAAO,CAACgB,cADnB,IACqCT,OAAO,CAACQ,MAAM,CAACT,EAAR,CAF9C,EAGE;AAEF,cAAMW,MAAM,GAAG,EACb,GAAGF,MADU;;AAEb,gBAAMG,aAAN,GAAuB;AACrB;AACA,kBAAMC,WAAW,GAAG,KAAKC,IAAL,KAAc,WAAlC;AACA,kBAAMR,MAAM,GAAGO,WAAW,GAAGf,MAAM,CAACQ,MAAV,GAAmB,KAAKA,MAAlD;AACA,mBAAOd,8BAA8B,CAAC;AACpCO,cAAAA,cAAc,EAAE,IADoB;AAEpCgB,cAAAA,aAAa,EAAEF,WAAW,GAAGpB,iBAAiB,CAACuB,UAArB,GAAkCC,SAFxB;AAGpCC,cAAAA,gBAAgB,EAAEL,WAAW,GAAGpB,iBAAiB,CAAC0B,OAArB,GAA+BF,SAHxB;AAIpCG,cAAAA,MAAM,EAAEb,MAJ4B;AAKpCD,cAAAA;AALoC,aAAD,CAArC;AAOD;;AAbY,SAAf;AAeAL,QAAAA,OAAO,CAACU,MAAM,CAACX,EAAR,CAAP,GAAqBW,MAArB;AACAP,QAAAA,UAAU,CAAC;AAAEH,UAAAA,OAAF;AAAWoB,UAAAA,SAAS,EAAEV;AAAtB,SAAD,CAAV;AACD,OAvBD;AAwBA,UAAIW,MAAM,CAACC,IAAP,CAAYtB,OAAZ,EAAqBuB,MAAzB,EAAiCpB,UAAU,CAAC;AAAEH,QAAAA;AAAF,OAAD,CAAV;AAClC,KAnCM;;AAqCP;AACJ;AACA;AACA;AACA;AACA;AACIwB,IAAAA,QAAQ,GAAI;AACV,WAAK5B,UAAL,CAAgB6B,UAAhB;AACD;;AA7CM;AANY,CAAD,CAAtB","sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2018 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Wallet Detector\n *\n * This is the complement to {@link module:@aeternity/aepp-sdk/es/utils}.\n * @module @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector\n * @export WalletDetector\n */\nimport stampit from '@stamp/it'\nimport BrowserWindowMessageConnection from './connection/browser-window-message'\nimport { MESSAGE_DIRECTION, METHODS } from './schema'\nimport { UnsupportedPlatformError } from '../errors'\n\n/**\n * WalletDetector stamp\n * @function\n * @alias module:@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector\n * @rtype Stamp\n * @param {Object} params={} - Initializer object\n * @param {WalletConnection} params.connection - Connection for listening for wallets\n * @return {WalletDetector}\n */\nexport default stampit({\n  init ({ connection } = {}) {\n    if (!window) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser')\n    this.connection = connection || BrowserWindowMessageConnection({ connectionInfo: { id: 'spy' } })\n    this.wallets = {}\n  },\n  methods: {\n    /**\n     * Start scanning\n     * @function scan\n     * @instance\n     * @param {Function} onDetected Call-back function which trigger on new wallet\n     * @return {void}\n     */\n    scan (onDetected) {\n      const { wallets } = this\n      this.connection.connect(({ method, params }, origin, source) => {\n        if (\n          !method || !params ||\n          method !== METHODS.readyToConnect || wallets[params.id]\n        ) return\n\n        const wallet = {\n          ...params,\n          async getConnection () {\n            // if detect extension wallet or page wallet\n            const isExtension = this.type === 'extension'\n            const origin = isExtension ? window.origin : this.origin\n            return BrowserWindowMessageConnection({\n              connectionInfo: this,\n              sendDirection: isExtension ? MESSAGE_DIRECTION.to_waellet : undefined,\n              receiveDirection: isExtension ? MESSAGE_DIRECTION.to_aepp : undefined,\n              target: source,\n              origin\n            })\n          }\n        }\n        wallets[wallet.id] = wallet\n        onDetected({ wallets, newWallet: wallet })\n      })\n      if (Object.keys(wallets).length) onDetected({ wallets })\n    },\n\n    /**\n    * Stop scanning\n    * @function stopScan\n    * @instance\n    * @return {void}\n    */\n    stopScan () {\n      this.connection.disconnect()\n    }\n  }\n})\n"],"file":"wallet-detector.mjs"}