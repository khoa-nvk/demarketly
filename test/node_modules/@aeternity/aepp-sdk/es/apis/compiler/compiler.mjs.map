{"version":3,"file":"compiler.mjs","names":["coreClient","coreRestPipeline","Parameters","Mappers","Compiler","ServiceClient","constructor","$host","options","undefined","Error","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","baseUri","endpoint","pipeline","getOrderedPolicies","length","pipelinePolicies","bearerTokenAuthenticationPolicyFound","some","pipelinePolicy","name","bearerTokenAuthenticationPolicyName","removePolicy","addPolicy","bearerTokenAuthenticationPolicy","scopes","challengeCallbacks","authorizeRequestOnChallenge","authorizeRequestOnClaimChallenge","generateACI","body","sendOperationRequest","generateACIOperationSpec","api","apiOperationSpec","aPIVersion","aPIVersionOperationSpec","compileContract","compileContractOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","decodeData","decodeDataOperationSpec","encodeCalldata","encodeCalldataOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","version","versionOperationSpec","serializer","createSerializer","path","httpMethod","responses","bodyMapper","Aci","type","element","className","isError","requestBody","urlParameters","headerParameters","contentType","accept","mediaType","value","ErrorModel","APIVersion","ByteCode","CompilerVersion","body1","body2","DecodedCallresult","body3","DecodedCalldata","body4","body5","SophiaJsonData","body6","Calldata","body7","FateAssembler","body8"],"sources":["../../../src/apis/compiler/compiler.ts"],"sourcesContent":["import * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  ApiOptionalParams,\n  ApiResponse,\n  APIVersionOptionalParams,\n  APIVersionResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  ByteCodeInput,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  SophiaBinaryData,\n  DecodeDataOptionalParams,\n  DecodeDataResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  VersionOptionalParams,\n  VersionResponse\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n\n    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();\n      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(\n        (pipelinePolicy) =>\n          pipelinePolicy.name ===\n          coreRestPipeline.bearerTokenAuthenticationPolicyName\n      );\n      if (!bearerTokenAuthenticationPolicyFound) {\n        this.pipeline.removePolicy({\n          name: coreRestPipeline.bearerTokenAuthenticationPolicyName\n        });\n        this.pipeline.addPolicy(\n          coreRestPipeline.bearerTokenAuthenticationPolicy({\n            scopes: `${optionsWithDefaults.baseUri}/.default`,\n            challengeCallbacks: {\n              authorizeRequestOnChallenge:\n                coreClient.authorizeRequestOnClaimChallenge\n            }\n          })\n        );\n      }\n    }\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec\n    );\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  aPIVersion(options?: APIVersionOptionalParams): Promise<APIVersionResponse> {\n    return this.sendOperationRequest({ options }, aPIVersionOperationSpec);\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec\n    );\n  }\n\n  /**\n   * Decode data as retuned by a contract call. - Legacy decoding\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeData(\n    body: SophiaBinaryData,\n    options?: DecodeDataOptionalParams\n  ): Promise<DecodeDataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeDataOperationSpec\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Aci\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n      }\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst aPIVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.APIVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } }\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeDataOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-data\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SophiaJsonData\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body8,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"],"mappings":"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"}