{"version":3,"file":"node.mjs","names":["coreClient","coreRestPipeline","Parameters","Mappers","Node","ServiceClient","constructor","$host","options","undefined","Error","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","baseUri","endpoint","pipeline","getOrderedPolicies","length","pipelinePolicies","bearerTokenAuthenticationPolicyFound","some","pipelinePolicy","name","bearerTokenAuthenticationPolicyName","removePolicy","addPolicy","bearerTokenAuthenticationPolicy","scopes","challengeCallbacks","authorizeRequestOnChallenge","authorizeRequestOnClaimChallenge","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","hash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","height","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","index","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","pubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonce","getAccountNextNonceOperationSpec","protectedDryRunTxs","body","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkey","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","queryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","createSerializer","path","httpMethod","responses","bodyMapper","Header","ErrorModel","isError","queryParameters","intAsString","urlParameters","headerParameters","accept","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","SignedTx","CountResponse","Generation","Account","NextNonceResponse","strategy","DryRunResults","requestBody","contentType","mediaType","TxInfoObject","PostTxResponse","body1","ContractObject","ByteCode","PoI","RegisteredOracle","OracleQueries","fromParam","limit","typeParam","OracleQuery","NameEntry","Channel","PeerPubKey","Status","type","element"],"sources":["../../../src/apis/node/node.ts"],"sourcesContent":["import * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n\n    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();\n      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(\n        (pipelinePolicy) =>\n          pipelinePolicy.name ===\n          coreRestPipeline.bearerTokenAuthenticationPolicyName\n      );\n      if (!bearerTokenAuthenticationPolicyFound) {\n        this.pipeline.removePolicy({\n          name: coreRestPipeline.bearerTokenAuthenticationPolicyName\n        });\n        this.pipeline.addPolicy(\n          coreRestPipeline.bearerTokenAuthenticationPolicy({\n            scopes: `${optionsWithDefaults.baseUri}/.default`,\n            challengeCallbacks: {\n              authorizeRequestOnChallenge:\n                coreClient.authorizeRequestOnClaimChallenge\n            }\n          })\n        );\n      }\n    }\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CountResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/transactions/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQuery\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } }\n      }\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"],"mappings":"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"}