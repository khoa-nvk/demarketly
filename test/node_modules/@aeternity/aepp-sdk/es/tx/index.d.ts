/**
 * Transaction methods
 *
 * This is implementation of [Tx](api/tx.md) relays
 * the creation of transactions to {@link Node}.
 * These methods provide ability to create native transactions.
 */
import BigNumber from 'bignumber.js';
import { ABI_VERSIONS, CtVersion, TxParamsCommon } from './builder/schema';
import { Tag } from './builder/constants';
import Node from '../Node';
import { Encoded } from '../utils/encoder';
import { buildTx as syncBuildTx } from './builder/index';
import { AE_AMOUNT_FORMATS } from '../utils/amount-formatter';
declare type Int = number | string | BigNumber;
export declare type BuildTxOptions<TxType extends Tag, OmitFields extends string> = Omit<Parameters<typeof _buildTx<TxType>>[1], OmitFields>;
/**
 * Validated vm/abi version or get default based on transaction type and NODE version
 * @category transaction builder
 * @param txType - Type of transaction
 * @param ctVersion - Object with vm and abi version fields
 * @returns Object with vm/abi version
 */
export declare function getVmVersion(txType: Tag.ContractCreateTx, ctVersion: Partial<CtVersion> & {
    onNode: Node;
}): Promise<CtVersion>;
export declare function getVmVersion(txType: Tag, ctVersion: Partial<Pick<CtVersion, 'abiVersion'>> & {
    onNode: Node;
}): Promise<Pick<CtVersion, 'abiVersion'>>;
/**
 * Calculate fee, get absolute ttl (ttl + height), get account nonce
 * @category transaction builder
 * @param txType - Type of transaction
 * @param params - Object which contains all tx data
 * @returns Object with account nonce, absolute ttl and transaction fee
 */
export declare function prepareTxParams(txType: Tag, { senderId, nonce, ttl, absoluteTtl, strategy, onNode, }: PrepareTxParamsOptions): Promise<{
    ttl: number;
    nonce: number;
}>;
interface PrepareTxParamsOptions extends Pick<TxParamsCommon, 'nonce' | 'ttl'> {
    senderId: Encoded.AccountAddress;
    absoluteTtl?: boolean;
    strategy?: 'continuity' | 'max';
    onNode: Node;
}
/**
 * @category transaction builder
 */
export declare function _buildTx<TxType extends Tag>(txType: TxType, { denomination, absoluteTtl, ..._params }: Omit<Parameters<typeof syncBuildTx<TxType, 'tx'>>[0], 'fee' | 'nonce' | 'ttl' | 'ctVersion' | 'abiVersion'> & {
    onNode: Node;
    fee?: Int;
    nonce?: number;
    ttl?: number;
    denomination?: AE_AMOUNT_FORMATS;
    absoluteTtl?: boolean;
} & (TxType extends Tag.OracleExtendTx | Tag.OracleResponseTx ? {
    callerId: Encoded.AccountAddress;
} : {}) & (TxType extends Tag.ContractCreateTx | Tag.GaAttachTx ? {
    ctVersion?: CtVersion;
} : {}) & (TxType extends Tag.ContractCallTx | Tag.OracleRegisterTx ? {
    abiVersion?: ABI_VERSIONS;
} : {})): Promise<Encoded.Transaction>;
export {};
