/// <reference types="node" />
import { Encoded } from '../../utils/encoder';
/**
 * Map of prefix to ID tag constant
 * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}
 * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}
 * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}
 */
declare const idTagToEncoding: readonly [Encoded.Encoding.AccountAddress, Encoded.Encoding.Name, Encoded.Encoding.Commitment, Encoded.Encoding.OracleAddress, Encoded.Encoding.ContractAddress, Encoded.Encoding.Channel];
declare type AddressEncodings = typeof idTagToEncoding[number];
/**
 * Utility function to create and _id type
 * @category transaction builder
 * @param hashId - Encoded hash
 * @returns Buffer Buffer with ID tag and decoded HASh
 */
export declare function writeId(hashId: Encoded.Generic<AddressEncodings>): Buffer;
/**
 * Utility function to read and _id type
 * @category transaction builder
 * @param buf - Data
 * @returns Encoided hash string with prefix
 */
export declare function readId(buf: Buffer): Encoded.Generic<AddressEncodings>;
export {};
