/**
 * Transaction Schema for TxBuilder
 */
// # RLP version number
// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization
import { Tag } from "./constants.mjs";
import { uInt, shortUInt, coinAmount, name, nameId, nameFee, deposit, gasLimit, gasPrice, fee } from "./field-types/index.mjs";
import { Encoding } from "../../utils/encoder.mjs";
export let ORACLE_TTL_TYPES; // # TRANSACTION DEFAULT TTL

(function (ORACLE_TTL_TYPES) {
  ORACLE_TTL_TYPES[ORACLE_TTL_TYPES["delta"] = 0] = "delta";
  ORACLE_TTL_TYPES[ORACLE_TTL_TYPES["block"] = 1] = "block";
})(ORACLE_TTL_TYPES || (ORACLE_TTL_TYPES = {}));

export const TX_TTL = 0; // # ORACLE

export const QUERY_FEE = 30000;
export const ORACLE_TTL = {
  type: ORACLE_TTL_TYPES.delta,
  value: 500
};
export const QUERY_TTL = {
  type: ORACLE_TTL_TYPES.delta,
  value: 10
};
export const RESPONSE_TTL = {
  type: ORACLE_TTL_TYPES.delta,
  value: 10
}; // # CONTRACT

export const AMOUNT = 0;
export const MAX_AUTH_FUN_GAS = 50000;
export const DRY_RUN_ACCOUNT = {
  pub: 'ak_11111111111111111111111111111111273Yts',
  amount: 100000000000000000000000000000000000n
};

/**
 * @category transaction builder
 * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}
 */
export let VM_VERSIONS;
/**
 * @category transaction builder
 * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}
 */

(function (VM_VERSIONS) {
  VM_VERSIONS[VM_VERSIONS["NO_VM"] = 0] = "NO_VM";
  VM_VERSIONS[VM_VERSIONS["SOPHIA"] = 1] = "SOPHIA";
  VM_VERSIONS[VM_VERSIONS["SOPHIA_IMPROVEMENTS_MINERVA"] = 3] = "SOPHIA_IMPROVEMENTS_MINERVA";
  VM_VERSIONS[VM_VERSIONS["SOPHIA_IMPROVEMENTS_FORTUNA"] = 4] = "SOPHIA_IMPROVEMENTS_FORTUNA";
  VM_VERSIONS[VM_VERSIONS["FATE"] = 5] = "FATE";
  VM_VERSIONS[VM_VERSIONS["SOPHIA_IMPROVEMENTS_LIMA"] = 6] = "SOPHIA_IMPROVEMENTS_LIMA";
  VM_VERSIONS[VM_VERSIONS["FATE_2"] = 7] = "FATE_2";
})(VM_VERSIONS || (VM_VERSIONS = {}));

export let ABI_VERSIONS;
/**
 * @category transaction builder
 */

(function (ABI_VERSIONS) {
  ABI_VERSIONS[ABI_VERSIONS["NO_ABI"] = 0] = "NO_ABI";
  ABI_VERSIONS[ABI_VERSIONS["SOPHIA"] = 1] = "SOPHIA";
  ABI_VERSIONS[ABI_VERSIONS["FATE"] = 3] = "FATE";
})(ABI_VERSIONS || (ABI_VERSIONS = {}));

export let PROTOCOL_VERSIONS; // First abi/vm by default

(function (PROTOCOL_VERSIONS) {
  PROTOCOL_VERSIONS[PROTOCOL_VERSIONS["IRIS"] = 5] = "IRIS";
})(PROTOCOL_VERSIONS || (PROTOCOL_VERSIONS = {}));

export const PROTOCOL_VM_ABI = {
  [PROTOCOL_VERSIONS.IRIS]: {
    [Tag.ContractCreateTx]: {
      vmVersion: [VM_VERSIONS.FATE_2],
      abiVersion: [ABI_VERSIONS.FATE]
    },
    // TODO: Ensure that AEVM (SOPHIA?) is still available here
    [Tag.ContractCallTx]: {
      vmVersion: [],
      abiVersion: [ABI_VERSIONS.FATE, ABI_VERSIONS.SOPHIA]
    },
    [Tag.OracleRegisterTx]: {
      vmVersion: [],
      abiVersion: [ABI_VERSIONS.NO_ABI, ABI_VERSIONS.SOPHIA]
    }
  }
};

/**
 * @category transaction builder
 */
export let FIELD_TYPES;

(function (FIELD_TYPES) {
  FIELD_TYPES[FIELD_TYPES["id"] = 0] = "id";
  FIELD_TYPES[FIELD_TYPES["ids"] = 1] = "ids";
  FIELD_TYPES[FIELD_TYPES["string"] = 2] = "string";
  FIELD_TYPES[FIELD_TYPES["binary"] = 3] = "binary";
  FIELD_TYPES[FIELD_TYPES["bool"] = 4] = "bool";
  FIELD_TYPES[FIELD_TYPES["hex"] = 5] = "hex";
  FIELD_TYPES[FIELD_TYPES["rlpBinary"] = 6] = "rlpBinary";
  FIELD_TYPES[FIELD_TYPES["rlpBinaries"] = 7] = "rlpBinaries";
  FIELD_TYPES[FIELD_TYPES["rawBinary"] = 8] = "rawBinary";
  FIELD_TYPES[FIELD_TYPES["signatures"] = 9] = "signatures";
  FIELD_TYPES[FIELD_TYPES["pointers"] = 10] = "pointers";
  FIELD_TYPES[FIELD_TYPES["offChainUpdates"] = 11] = "offChainUpdates";
  FIELD_TYPES[FIELD_TYPES["callStack"] = 12] = "callStack";
  FIELD_TYPES[FIELD_TYPES["proofOfInclusion"] = 13] = "proofOfInclusion";
  FIELD_TYPES[FIELD_TYPES["mptrees"] = 14] = "mptrees";
  FIELD_TYPES[FIELD_TYPES["callReturnType"] = 15] = "callReturnType";
  FIELD_TYPES[FIELD_TYPES["ctVersion"] = 16] = "ctVersion";
  FIELD_TYPES[FIELD_TYPES["abiVersion"] = 17] = "abiVersion";
  FIELD_TYPES[FIELD_TYPES["ttlType"] = 18] = "ttlType";
  FIELD_TYPES[FIELD_TYPES["sophiaCodeTypeInfo"] = 19] = "sophiaCodeTypeInfo";
  FIELD_TYPES[FIELD_TYPES["payload"] = 20] = "payload";
  FIELD_TYPES[FIELD_TYPES["stateTree"] = 21] = "stateTree";
})(FIELD_TYPES || (FIELD_TYPES = {}));

const BASE_TX = [['tag', shortUInt], ['VSN', shortUInt]];
export const TX_SCHEMA = {
  [Tag.Account]: {
    1: [...BASE_TX, ['nonce', shortUInt], ['balance', uInt]],
    2: [...BASE_TX, ['flags', uInt], ['nonce', shortUInt], ['balance', uInt], ['gaContract', FIELD_TYPES.id, [Encoding.ContractAddress, Encoding.Name]], ['gaAuthFun', FIELD_TYPES.binary, Encoding.ContractBytearray]]
  },
  [Tag.SignedTx]: {
    1: [...BASE_TX, ['signatures', FIELD_TYPES.signatures], ['encodedTx', FIELD_TYPES.rlpBinary]]
  },
  [Tag.SpendTx]: {
    1: [...BASE_TX, ['senderId', FIELD_TYPES.id, Encoding.AccountAddress], ['recipientId', FIELD_TYPES.id, [Encoding.AccountAddress, Encoding.Name]], ['amount', coinAmount], ['fee', fee], ['ttl', shortUInt], ['nonce', shortUInt], ['payload', FIELD_TYPES.payload]]
  },
  [Tag.NamePreclaimTx]: {
    1: [...BASE_TX, ['accountId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['commitmentId', FIELD_TYPES.id, Encoding.Commitment], ['fee', fee], ['ttl', shortUInt]]
  },
  [Tag.NameClaimTx]: {
    2: [...BASE_TX, ['accountId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['name', name], ['nameSalt', uInt], ['nameFee', nameFee], ['fee', fee], ['ttl', shortUInt]]
  },
  [Tag.NameUpdateTx]: {
    1: [...BASE_TX, ['accountId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['nameId', nameId], ['nameTtl', uInt], ['pointers', FIELD_TYPES.pointers], ['clientTtl', shortUInt], ['fee', fee], ['ttl', shortUInt]]
  },
  [Tag.NameTransferTx]: {
    1: [...BASE_TX, ['accountId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['nameId', nameId], ['recipientId', FIELD_TYPES.id, [Encoding.AccountAddress, Encoding.Name]], ['fee', fee], ['ttl', shortUInt]]
  },
  [Tag.NameRevokeTx]: {
    1: [...BASE_TX, ['accountId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['nameId', nameId], ['fee', fee], ['ttl', shortUInt]]
  },
  [Tag.Contract]: {
    1: [...BASE_TX, ['owner', FIELD_TYPES.id, Encoding.AccountAddress], ['ctVersion', FIELD_TYPES.ctVersion], ['code', FIELD_TYPES.binary, Encoding.ContractBytearray], ['log', FIELD_TYPES.binary, Encoding.ContractBytearray], ['active', FIELD_TYPES.bool], ['referers', FIELD_TYPES.ids, Encoding.AccountAddress], ['deposit', deposit]]
  },
  [Tag.ContractCreateTx]: {
    1: [...BASE_TX, ['ownerId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['code', FIELD_TYPES.binary, Encoding.ContractBytearray], ['ctVersion', FIELD_TYPES.ctVersion], ['fee', fee], ['ttl', shortUInt], ['deposit', deposit], ['amount', coinAmount], ['gasLimit', gasLimit], ['gasPrice', gasPrice], ['callData', FIELD_TYPES.binary, Encoding.ContractBytearray]]
  },
  [Tag.ContractCallTx]: {
    1: [...BASE_TX, ['callerId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['contractId', FIELD_TYPES.id, [Encoding.ContractAddress, Encoding.Name]], ['abiVersion', FIELD_TYPES.abiVersion], ['fee', fee], ['ttl', shortUInt], ['amount', coinAmount], ['gasLimit', gasLimit], ['gasPrice', gasPrice], ['callData', FIELD_TYPES.binary, Encoding.ContractBytearray]]
  },
  [Tag.ContractCall]: {
    1: [...BASE_TX, ['callerId', FIELD_TYPES.id, Encoding.AccountAddress], ['callerNonce', shortUInt], ['height', shortUInt], ['contractId', FIELD_TYPES.id, Encoding.ContractAddress], ['gasPrice', gasPrice], ['gasUsed', shortUInt], ['returnValue', FIELD_TYPES.binary, Encoding.ContractBytearray], ['returnType', FIELD_TYPES.callReturnType], // TODO: add serialization for
    //  <log> :: [ { <address> :: id, [ <topics> :: binary() ], <data> :: binary() } ]
    ['log', FIELD_TYPES.rawBinary]]
  },
  [Tag.OracleRegisterTx]: {
    1: [...BASE_TX, ['accountId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['queryFormat', FIELD_TYPES.string], ['responseFormat', FIELD_TYPES.string], ['queryFee', coinAmount], ['oracleTtlType', FIELD_TYPES.ttlType], ['oracleTtlValue', shortUInt], ['fee', fee], ['ttl', shortUInt], ['abiVersion', FIELD_TYPES.abiVersion]]
  },
  [Tag.OracleExtendTx]: {
    1: [...BASE_TX, ['oracleId', FIELD_TYPES.id, [Encoding.OracleAddress, Encoding.Name]], ['nonce', shortUInt], ['oracleTtlType', FIELD_TYPES.ttlType], ['oracleTtlValue', shortUInt], ['fee', fee], ['ttl', shortUInt]]
  },
  [Tag.OracleQueryTx]: {
    1: [...BASE_TX, ['senderId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['oracleId', FIELD_TYPES.id, [Encoding.OracleAddress, Encoding.Name]], ['query', FIELD_TYPES.string], ['queryFee', coinAmount], ['queryTtlType', FIELD_TYPES.ttlType], ['queryTtlValue', shortUInt], ['responseTtlType', FIELD_TYPES.ttlType], ['responseTtlValue', shortUInt], ['fee', fee], ['ttl', shortUInt]]
  },
  [Tag.OracleResponseTx]: {
    1: [...BASE_TX, ['oracleId', FIELD_TYPES.id, Encoding.OracleAddress], ['nonce', shortUInt], ['queryId', FIELD_TYPES.binary, Encoding.OracleQueryId], ['response', FIELD_TYPES.string], ['responseTtlType', FIELD_TYPES.ttlType], ['responseTtlValue', shortUInt], ['fee', fee], ['ttl', shortUInt]]
  },
  [Tag.ChannelCreateTx]: {
    2: [...BASE_TX, ['initiator', FIELD_TYPES.id, Encoding.AccountAddress], ['initiatorAmount', uInt], ['responder', FIELD_TYPES.id, Encoding.AccountAddress], ['responderAmount', uInt], ['channelReserve', uInt], ['lockPeriod', uInt], ['ttl', shortUInt], ['fee', fee], ['initiatorDelegateIds', FIELD_TYPES.string], ['responderDelegateIds', FIELD_TYPES.string], ['stateHash', FIELD_TYPES.binary, 'st'], ['nonce', shortUInt]]
  },
  [Tag.ChannelCloseMutualTx]: {
    1: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['fromId', FIELD_TYPES.id, Encoding.AccountAddress], ['initiatorAmountFinal', uInt], ['responderAmountFinal', uInt], ['ttl', shortUInt], ['fee', fee], ['nonce', shortUInt]]
  },
  [Tag.ChannelCloseSoloTx]: {
    1: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['fromId', FIELD_TYPES.id, Encoding.AccountAddress], ['payload', FIELD_TYPES.binary, 'tx'], ['poi', FIELD_TYPES.binary, 'pi'], ['ttl', shortUInt], ['fee', fee], ['nonce', shortUInt]]
  },
  [Tag.ChannelSlashTx]: {
    1: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['fromId', FIELD_TYPES.id, Encoding.AccountAddress], ['payload', FIELD_TYPES.binary, 'tx'], ['poi', FIELD_TYPES.binary, 'pi'], ['ttl', shortUInt], ['fee', fee], ['nonce', shortUInt]]
  },
  [Tag.ChannelDepositTx]: {
    1: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['fromId', FIELD_TYPES.id, Encoding.AccountAddress], ['amount', uInt], ['ttl', shortUInt], ['fee', fee], ['stateHash', FIELD_TYPES.binary, 'st'], ['round', shortUInt], ['nonce', shortUInt]]
  },
  [Tag.ChannelWithdrawTx]: {
    1: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['toId', FIELD_TYPES.id, Encoding.AccountAddress], ['amount', uInt], ['ttl', shortUInt], ['fee', fee], ['stateHash', FIELD_TYPES.binary, 'st'], ['round', shortUInt], ['nonce', shortUInt]]
  },
  [Tag.ChannelSettleTx]: {
    1: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['fromId', FIELD_TYPES.id, Encoding.AccountAddress], ['initiatorAmountFinal', uInt], ['responderAmountFinal', uInt], ['ttl', shortUInt], ['fee', fee], ['nonce', shortUInt]]
  },
  [Tag.ChannelForceProgressTx]: {
    1: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['fromId', FIELD_TYPES.id, Encoding.AccountAddress], ['payload', FIELD_TYPES.binary, 'tx'], ['round', shortUInt], ['update', FIELD_TYPES.binary, Encoding.ContractBytearray], ['stateHash', FIELD_TYPES.binary, 'st'], ['offChainTrees', FIELD_TYPES.stateTree], ['ttl', shortUInt], ['fee', fee], ['nonce', shortUInt]]
  },
  [Tag.ChannelOffChainTx]: {
    2: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['round', shortUInt], ['stateHash', FIELD_TYPES.binary, 'st']]
  },
  [Tag.Channel]: {
    3: [...BASE_TX, ['initiator', FIELD_TYPES.id, Encoding.AccountAddress], ['responder', FIELD_TYPES.id, Encoding.AccountAddress], ['channelAmount', uInt], ['initiatorAmount', uInt], ['responderAmount', uInt], ['channelReserve', uInt], ['initiatorDelegateIds', FIELD_TYPES.ids], ['responderDelegateIds', FIELD_TYPES.ids], ['stateHash', FIELD_TYPES.hex], ['round', shortUInt], ['soloRound', uInt], ['lockPeriod', uInt], ['lockedUntil', uInt], ['initiatorAuth', FIELD_TYPES.binary, Encoding.ContractBytearray], ['responderAuth', FIELD_TYPES.binary, Encoding.ContractBytearray]]
  },
  [Tag.ChannelSnapshotSoloTx]: {
    1: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['fromId', FIELD_TYPES.id, Encoding.AccountAddress], ['payload', FIELD_TYPES.binary, 'tx'], ['ttl', shortUInt], ['fee', fee], ['nonce', shortUInt]]
  },
  [Tag.ChannelOffChainUpdateTransfer]: {
    1: [...BASE_TX, ['from', FIELD_TYPES.id, Encoding.AccountAddress], ['to', FIELD_TYPES.id, Encoding.AccountAddress], ['amount', uInt]]
  },
  [Tag.ChannelOffChainUpdateDeposit]: {
    1: [...BASE_TX, ['from', FIELD_TYPES.id, Encoding.AccountAddress], ['amount', uInt]]
  },
  [Tag.ChannelOffChainUpdateWithdraw]: {
    1: [...BASE_TX, ['from', FIELD_TYPES.id, Encoding.AccountAddress], ['amount', uInt]]
  },
  [Tag.ChannelOffChainUpdateCreateContract]: {
    1: [...BASE_TX, ['owner', FIELD_TYPES.id, Encoding.AccountAddress], ['ctVersion', FIELD_TYPES.ctVersion], ['code', FIELD_TYPES.binary, Encoding.ContractBytearray], ['deposit', uInt], ['callData', FIELD_TYPES.binary, Encoding.ContractBytearray]]
  },
  [Tag.ChannelOffChainUpdateCallContract]: {
    1: [...BASE_TX, ['caller', FIELD_TYPES.id, Encoding.AccountAddress], ['contract', FIELD_TYPES.id, Encoding.ContractAddress], ['abiVersion', FIELD_TYPES.abiVersion], ['amount', uInt], ['callData', FIELD_TYPES.binary, Encoding.ContractBytearray], ['callStack', FIELD_TYPES.callStack], ['gasPrice', gasPrice], ['gasLimit', gasLimit]]
  },
  [Tag.ChannelClientReconnectTx]: {
    1: [...BASE_TX, ['channelId', FIELD_TYPES.id, Encoding.Channel], ['round', shortUInt], ['role', FIELD_TYPES.string], ['pubkey', FIELD_TYPES.id, Encoding.AccountAddress]]
  },
  [Tag.TreesPoi]: {
    1: [...BASE_TX, ['accounts', FIELD_TYPES.mptrees], ['calls', FIELD_TYPES.mptrees], ['channels', FIELD_TYPES.mptrees], ['contracts', FIELD_TYPES.mptrees], ['ns', FIELD_TYPES.mptrees], ['oracles', FIELD_TYPES.mptrees]]
  },
  [Tag.StateTrees]: {
    1: [...BASE_TX, ['contracts', FIELD_TYPES.rlpBinary], ['calls', FIELD_TYPES.rlpBinary], ['channels', FIELD_TYPES.rlpBinary], ['ns', FIELD_TYPES.rlpBinary], ['oracles', FIELD_TYPES.rlpBinary], ['accounts', FIELD_TYPES.rlpBinary]]
  },
  [Tag.Mtree]: {
    1: [...BASE_TX, ['values', FIELD_TYPES.rlpBinaries]]
  },
  [Tag.MtreeValue]: {
    1: [...BASE_TX, ['key', FIELD_TYPES.hex], ['value', FIELD_TYPES.rawBinary]]
  },
  [Tag.ContractsMtree]: {
    1: [...BASE_TX, ['contracts', FIELD_TYPES.rlpBinary]]
  },
  [Tag.CallsMtree]: {
    1: [...BASE_TX, ['calls', FIELD_TYPES.rlpBinary]]
  },
  [Tag.ChannelsMtree]: {
    1: [...BASE_TX, ['channels', FIELD_TYPES.rlpBinary]]
  },
  [Tag.NameserviceMtree]: {
    1: [...BASE_TX, ['mtree', FIELD_TYPES.rlpBinary]]
  },
  [Tag.OraclesMtree]: {
    1: [...BASE_TX, ['otree', FIELD_TYPES.rlpBinary]]
  },
  [Tag.AccountsMtree]: {
    1: [...BASE_TX, ['accounts', FIELD_TYPES.rlpBinary]]
  },
  [Tag.GaAttachTx]: {
    1: [...BASE_TX, ['ownerId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['code', FIELD_TYPES.binary, Encoding.ContractBytearray], ['authFun', FIELD_TYPES.rawBinary], ['ctVersion', FIELD_TYPES.ctVersion], ['fee', fee], ['ttl', shortUInt], ['gasLimit', gasLimit], ['gasPrice', gasPrice], ['callData', FIELD_TYPES.binary, Encoding.ContractBytearray]]
  },
  [Tag.GaMetaTx]: {
    2: [...BASE_TX, ['gaId', FIELD_TYPES.id, Encoding.AccountAddress], ['authData', FIELD_TYPES.binary, Encoding.ContractBytearray], ['abiVersion', FIELD_TYPES.abiVersion], ['fee', fee], ['gasLimit', gasLimit], ['gasPrice', gasPrice], ['tx', FIELD_TYPES.rlpBinary]]
  },
  [Tag.PayingForTx]: {
    1: [...BASE_TX, ['payerId', FIELD_TYPES.id, Encoding.AccountAddress], ['nonce', shortUInt], ['fee', fee], ['tx', FIELD_TYPES.rlpBinary]]
  },
  [Tag.CompilerSophia]: {
    3: [...BASE_TX, ['sourceCodeHash', FIELD_TYPES.rawBinary], ['typeInfo', FIELD_TYPES.sophiaCodeTypeInfo], ['byteCode', FIELD_TYPES.rawBinary], ['compilerVersion', FIELD_TYPES.string], ['payable', FIELD_TYPES.bool]]
  }
};
//# sourceMappingURL=schema.mjs.map