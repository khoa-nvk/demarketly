/// <reference types="node" />
import BigNumber from 'bignumber.js';
import { Encoded } from '../../utils/encoder';
import { AensName } from './constants';
import { NamePointer } from '../../apis/node';
/**
 * JavaScript-based Transaction builder helper function's
 */
/**
 * Build a contract public key
 * @category contract
 * @param ownerId - The public key of the owner account
 * @param nonce - the nonce of the transaction
 * @returns Contract public key
 */
export declare function buildContractId(ownerId: Encoded.AccountAddress, nonce: number | BigNumber): Encoded.ContractAddress;
/**
 * Build a oracle query id
 * @category oracle
 * @param senderId - The public key of the sender account
 * @param nonce - the nonce of the transaction
 * @param oracleId - The oracle public key
 * @returns Contract public key
 */
export declare function oracleQueryId(senderId: Encoded.AccountAddress, nonce: number | BigNumber | string, oracleId: Encoded.OracleAddress): Encoded.OracleQueryId;
/**
 * Format the salt into a 64-byte hex string
 * @category transaction builder
 * @param salt - Random number
 * @returns Zero-padded hex string of salt
 */
export declare function formatSalt(salt: number): Buffer;
/**
 * Encode an AENS name
 * @category AENS
 * @param name - Name to encode
 * @returns `nm_` prefixed encoded AENS name
 */
export declare function produceNameId(name: AensName): Encoded.Name;
/**
 * Generate the commitment hash by hashing the formatted salt and
 * name, base 58 encoding the result and prepending 'cm_'
 * @category transaction builder
 * @param name - Name to be registered
 * @param salt - Random salt
 * @returns Commitment hash
 */
export declare function commitmentHash(name: AensName, salt?: number): Encoded.Commitment;
/**
 * Utility function to convert int to bytes
 * @category transaction builder
 * @param val - Value
 * @returns Buffer Buffer from number(BigEndian)
 */
export declare function writeInt(val: number | string | BigNumber): Buffer;
/**
 * Utility function to convert bytes to int
 * @category transaction builder
 * @param buf - Value
 * @returns Buffer Buffer from number(BigEndian)
 */
export declare function readInt(buf?: Buffer): string;
/**
 * Helper function to build pointers for name update TX
 * @category transaction builder
 * @param pointers - Array of pointers
 * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`
 * @returns Serialized pointers array
 */
export declare function buildPointers(pointers: NamePointer[]): Buffer[][];
/**
 * Helper function to read pointers from name update TX
 * @category transaction builder
 * @param pointers - Array of pointers
 * @returns Deserialize pointer array
 */
export declare function readPointers(pointers: Array<[key: string, id: Buffer]>): NamePointer[];
/**
 * Is AENS name valid
 * @category AENS
 * @param name - AENS name
 */
export declare function isNameValid(name: string): name is AensName;
declare const encodingToPointerKey: readonly [readonly [Encoded.Encoding.AccountAddress, "account_pubkey"], readonly [Encoded.Encoding.OracleAddress, "oracle_pubkey"], readonly [Encoded.Encoding.ContractAddress, "contract_pubkey"], readonly [Encoded.Encoding.Channel, "channel"]];
/**
 * @category AENS
 * @param identifier - account/oracle/contract address, or channel
 * @returns default AENS pointer key
 */
export declare function getDefaultPointerKey(identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>): typeof encodingToPointerKey[number][1];
/**
 * Get the minimum AENS name fee
 * @category AENS
 * @param name - the AENS name to get the fee for
 * @returns the minimum fee for the AENS name auction
 */
export declare function getMinimumNameFee(name: AensName): BigNumber;
/**
 * Compute bid fee for AENS auction
 * @category AENS
 * @param name - the AENS name to get the fee for
 * @param options - Options
 * @param options.startFee - Auction start fee
 * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)
 * @returns Bid fee
 */
export declare function computeBidFee(name: AensName, { startFee, increment }?: {
    startFee?: number | string | BigNumber;
    increment?: number;
}): BigNumber;
/**
 * Compute auction end height
 * @category AENS
 * @param name - Name to compute auction end for
 * @param claimHeight - Auction starting height
 * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}
 * @returns Auction end height
 */
export declare function computeAuctionEndBlock(name: AensName, claimHeight: number): number;
/**
 * Is name accept going to auction
 * @category AENS
 */
export declare function isAuctionName(name: AensName): boolean;
export {};
