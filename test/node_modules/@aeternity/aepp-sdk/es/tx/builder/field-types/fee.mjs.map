{"version":3,"file":"fee.mjs","names":["BigNumber","IllegalArgumentError","MIN_GAS_PRICE","Tag","coinAmount","isKeyOfObject","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ChannelOffChainUpdateCallContract","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateTransfer","ContractCreateTx","ContractCallTx","GaAttachTx","GaMetaTx","PayingForTx","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","times","plus","Math","ceil","floor","minus","getOracleRelativeTtl","params","ttlKeys","buildFee","buildTx","rlpEncoded","length","txObject","tx","encodedTx","calculateMinFee","rebuildTx","fee","previousFee","eq","serializeAettos","_value","_computingMinFee","minFee","value","gt","toString","toFixed","serialize","serializeOptional"],"sources":["../../../../src/tx/builder/field-types/fee.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any, txType: Tag): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  if (!isKeyOfObject(txType, ttlKeys)) return 1;\n  return params[ttlKeys[txType]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(txType: Tag, buildTx: any): BigNumber {\n  const { rlpEncoded: { length }, txObject } = buildTx;\n\n  return TX_FEE_BASE_GAS(txType)\n    .plus(TX_FEE_OTHER_GAS(txType, length, {\n      relativeTtl: getOracleRelativeTtl(txObject, txType),\n      innerTxSize: [Tag.GaMetaTx, Tag.PayingForTx].includes(txType)\n        ? txObject.tx.tx.encodedTx.rlpEncoded.length\n        : 0,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param txType - Transaction type\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nexport function calculateMinFee(\n  txType: Tag,\n  rebuildTx: (value: BigNumber) => any,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(txType, rebuildTx(fee));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    { txType, rebuildTx, _computingMinFee }:\n    { txType: Tag; rebuildTx: (params: any) => any; _computingMinFee?: string },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee;\n    const minFee = calculateMinFee(txType, (fee) => rebuildTx({ _computingMinFee: fee }));\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger then ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize: coinAmount.serializeOptional,\n};\n"],"mappings":"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"}