/// <reference types="node" />
declare const field: {
    serialize(value: string): Buffer;
    deserialize(value: Buffer): string;
};
declare const uInt: {
    serialize(value: import("./u-int").Int): Buffer;
    deserialize(value: Buffer): string;
};
declare const shortUInt: {
    serialize(value: number): Buffer;
    deserialize(value: Buffer): number;
};
declare const coinAmount: {
    serializeAettos(value: string | undefined): string;
    serializeOptional(value: import("./u-int").Int | undefined, { denomination, ...options }: import("./coin-amount").Options): Buffer;
    serialize(value: import("./u-int").Int, options: import("./coin-amount").Options): Buffer;
    deserialize(value: Buffer): string;
};
declare const deposit: {
    serialize(value: import("./u-int").Int | undefined, options: import("./coin-amount").Options): Buffer;
    serializeAettos(value: string | undefined): string;
    serializeOptional(value: import("./u-int").Int | undefined, { denomination, ...options }: import("./coin-amount").Options): Buffer;
    deserialize(value: Buffer): string;
};
declare const fee: {
    serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
        txType: import("../constants").Tag;
        rebuildTx: (params: any) => any;
        _computingMinFee?: string | undefined;
    }): string;
    serialize: (value: import("./u-int").Int | undefined, { denomination, ...options }: import("./coin-amount").Options) => Buffer;
    serializeOptional(value: import("./u-int").Int | undefined, { denomination, ...options }: import("./coin-amount").Options): Buffer;
    deserialize(value: Buffer): string;
};
declare const gasLimit: {
    serialize(_value: number | undefined, { txType, rebuildTx, gasMax, _computingGasLimit, }: {
        txType: import("../constants").Tag;
        rebuildTx: (params: any) => any;
        gasMax: number;
        _computingGasLimit?: number | undefined;
    }): Buffer;
    deserialize(value: Buffer): number;
};
declare const gasPrice: {
    serializeAettos(value?: string | undefined): string;
    serialize: (value: import("./u-int").Int | undefined, { denomination, ...options }: import("./coin-amount").Options) => Buffer;
    serializeOptional(value: import("./u-int").Int | undefined, { denomination, ...options }: import("./coin-amount").Options): Buffer;
    deserialize(value: Buffer): string;
};
declare const name: {
    serialize(value: `${string}.chain`): Buffer;
    deserialize(value: Buffer): `${string}.chain`;
};
declare const nameFee: {
    serializeAettos(_value: string | undefined, txFields: {
        name: `${string}.chain`;
    }): string;
    serialize(value: import("./u-int").Int | undefined, txFields: {
        name: `${string}.chain`;
    } & import("./coin-amount").Options): Buffer;
    serializeOptional(value: import("./u-int").Int | undefined, { denomination, ...options }: import("./coin-amount").Options): Buffer;
    deserialize(value: Buffer): string;
};
declare const nameId: {
    serialize(value: `nm_${string}` | `${string}.chain`): Buffer;
    deserialize(value: Buffer): `nm_${string}`;
};
export declare type Field = typeof field | typeof uInt | typeof shortUInt | typeof coinAmount | typeof deposit | typeof fee | typeof gasLimit | typeof gasPrice | typeof name | typeof nameFee | typeof nameId;
export { field, uInt, shortUInt, coinAmount, deposit, fee, gasLimit, gasPrice, name, nameFee, nameId, };
