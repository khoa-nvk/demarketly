import { IllegalArgumentError } from "../../../utils/errors.mjs";
import { MIN_GAS_PRICE } from "../constants.mjs";
import shortUInt from "./short-u-int.mjs";
import { buildFee } from "./fee.mjs";

function calculateGasLimitMax(txType, gasMax, rebuildTx) {
  return gasMax - +buildFee(txType, rebuildTx(gasMax)).dividedBy(MIN_GAS_PRICE);
}

export default { ...shortUInt,

  serialize(_value, _ref) {
    let {
      txType,
      rebuildTx,
      gasMax = 6e6,
      _computingGasLimit
    } = _ref;
    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);
    const gasLimitMax = calculateGasLimitMax(txType, gasMax, gasLimit => rebuildTx({
      _computingGasLimit: gasLimit
    }));
    const value = _value !== null && _value !== void 0 ? _value : gasLimitMax;

    if (value > gasLimitMax) {
      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);
    }

    return shortUInt.serialize(value);
  }

};
//# sourceMappingURL=gas-limit.mjs.map