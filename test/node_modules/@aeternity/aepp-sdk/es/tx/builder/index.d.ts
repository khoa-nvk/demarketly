import { NestedUint8Array } from 'rlp';
import { Encoded, Encoding } from '../../utils/encoder';
import { AE_AMOUNT_FORMATS } from '../../utils/amount-formatter';
import { RawTxObject, TxField, TxSchema, TxTypeSchemas } from './schema';
import { Tag } from './constants';
/**
 * Validate transaction params
 * @category transaction builder
 * @param params - Object with tx params
 * @param schema - Transaction schema
 * @param excludeKeys - Array of keys to exclude for validation
 * @returns Object with validation errors
 */
export declare function validateParams(params: any, schema: TxField[], { excludeKeys }: {
    excludeKeys: string[];
}): object;
/**
 * Unpack binary transaction
 * @category transaction builder
 * @param binary - Array with binary transaction field's
 * @param schema - Transaction schema
 * @returns Object with transaction field's
 */
export declare function unpackRawTx<Tx extends TxSchema>(binary: Uint8Array | NestedUint8Array, schema: TxField[]): RawTxObject<Tx>;
/**
 * @category transaction builder
 */
export interface BuiltTx<Tx extends TxSchema, Prefix extends Encoding> {
    tx: Encoded.Generic<Prefix>;
    rlpEncoded: Uint8Array;
    binary: Uint8Array;
    txObject: RawTxObject<Tx>;
}
/**
 * Build transaction hash
 * @category transaction builder
 * @param _params - Object with tx params
 * @param type - Transaction type
 * @param options - options
 * @param options.excludeKeys - Array of keys to exclude for validation and build
 * @param options.denomination - Denomination of amounts
 * @param options.prefix - Prefix of transaction
 * @throws {@link InvalidTxParamsError}
 * @returns object
 * @returns object.tx Base64Check transaction hash with 'tx_' prefix
 * @returns object.rlpEncoded rlp encoded transaction
 * @returns object.binary binary transaction
 */
export declare function buildTx<TxType extends Tag, Prefix>(_params: Omit<TxTypeSchemas[TxType], 'tag' | 'VSN'> & {
    VSN?: number;
}, type: TxType, { excludeKeys, prefix, vsn, denomination, }?: {
    excludeKeys?: string[];
    prefix?: Encoding;
    vsn?: number;
    denomination?: AE_AMOUNT_FORMATS;
}): BuiltTx<TxSchema, Prefix extends Encoding ? Prefix : Encoding.Transaction>;
/**
 * @category transaction builder
 */
export interface TxUnpacked<Tx extends TxSchema> {
    txType: Tag;
    tx: RawTxObject<Tx>;
    rlpEncoded: Uint8Array;
}
/**
 * Unpack transaction hash
 * @category transaction builder
 * @param encodedTx - Transaction to unpack
 * @param txType - Expected transaction type
 * @returns object
 * @returns object.tx Object with transaction param's
 * @returns object.txType Transaction type
 */
export declare function unpackTx<TxType extends Tag>(encodedTx: Encoded.Transaction | Encoded.Poi, txType?: TxType): TxUnpacked<TxTypeSchemas[TxType]>;
/**
 * Build a transaction hash
 * @category transaction builder
 * @param rawTx - base64 or rlp encoded transaction
 * @returns Transaction hash
 */
export declare function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash;
/**
 * Build a contract public key by contractCreateTx or gaAttach
 * @category contract
 * @param contractTx - Transaction
 * @returns Contract public key
 */
export declare function buildContractIdByContractTx(contractTx: Encoded.Transaction): Encoded.ContractAddress;
