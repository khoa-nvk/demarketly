/**
 * Transaction Schema for TxBuilder
 */
/// <reference types="node" />
import BigNumber from 'bignumber.js';
import { Tag } from './constants';
import { Field } from './field-types';
import { Encoded, Encoding } from '../../utils/encoder';
import MPTree from '../../utils/mptree';
import { NamePointer } from '../../apis/node';
export declare enum ORACLE_TTL_TYPES {
    delta = 0,
    block = 1
}
export declare const TX_TTL = 0;
export declare const QUERY_FEE = 30000;
export declare const ORACLE_TTL: {
    type: ORACLE_TTL_TYPES;
    value: number;
};
export declare const QUERY_TTL: {
    type: ORACLE_TTL_TYPES;
    value: number;
};
export declare const RESPONSE_TTL: {
    type: ORACLE_TTL_TYPES;
    value: number;
};
export declare const AMOUNT = 0;
export declare const MAX_AUTH_FUN_GAS = 50000;
export declare const DRY_RUN_ACCOUNT: {
    readonly pub: "ak_11111111111111111111111111111111273Yts";
    readonly amount: 100000000000000000000000000000000000n;
};
export declare type TxField = [
    name: string,
    type: FIELD_TYPES | Field,
    prefix?: Encoding | Encoding[]
];
/**
 * @category transaction builder
 * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}
 */
export declare enum VM_VERSIONS {
    NO_VM = 0,
    SOPHIA = 1,
    SOPHIA_IMPROVEMENTS_MINERVA = 3,
    SOPHIA_IMPROVEMENTS_FORTUNA = 4,
    FATE = 5,
    SOPHIA_IMPROVEMENTS_LIMA = 6,
    FATE_2 = 7
}
/**
 * @category transaction builder
 * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}
 */
export declare enum ABI_VERSIONS {
    NO_ABI = 0,
    SOPHIA = 1,
    FATE = 3
}
/**
 * @category transaction builder
 */
export declare enum PROTOCOL_VERSIONS {
    IRIS = 5
}
export declare const PROTOCOL_VM_ABI: {
    readonly 5: {
        readonly 42: {
            readonly vmVersion: readonly [VM_VERSIONS.FATE_2];
            readonly abiVersion: readonly [ABI_VERSIONS.FATE];
        };
        readonly 43: {
            readonly vmVersion: readonly [];
            readonly abiVersion: readonly [ABI_VERSIONS.FATE, ABI_VERSIONS.SOPHIA];
        };
        readonly 22: {
            readonly vmVersion: readonly [];
            readonly abiVersion: readonly [ABI_VERSIONS.NO_ABI, ABI_VERSIONS.SOPHIA];
        };
    };
};
declare type PrefixType<Prefix> = Prefix extends Encoding ? Encoded.Generic<Prefix> : Prefix extends readonly Encoding[] ? Encoded.Generic<Prefix[number]> : Encoded.Generic<any>;
/**
 * @category transaction builder
 */
export interface CtVersion {
    vmVersion: VM_VERSIONS;
    abiVersion: ABI_VERSIONS;
}
/**
 * @category transaction builder
 */
export declare enum FIELD_TYPES {
    id = 0,
    ids = 1,
    string = 2,
    binary = 3,
    bool = 4,
    hex = 5,
    rlpBinary = 6,
    rlpBinaries = 7,
    rawBinary = 8,
    signatures = 9,
    pointers = 10,
    offChainUpdates = 11,
    callStack = 12,
    proofOfInclusion = 13,
    mptrees = 14,
    callReturnType = 15,
    ctVersion = 16,
    abiVersion = 17,
    ttlType = 18,
    sophiaCodeTypeInfo = 19,
    payload = 20,
    stateTree = 21
}
interface BuildFieldTypes<Prefix extends undefined | Encoding | readonly Encoding[]> {
    [FIELD_TYPES.id]: PrefixType<Prefix>;
    [FIELD_TYPES.ids]: Array<Encoded.Generic<Prefix extends Encoding[] ? Prefix : any>>;
    [FIELD_TYPES.string]: string;
    [FIELD_TYPES.binary]: PrefixType<Prefix>;
    [FIELD_TYPES.bool]: Boolean;
    [FIELD_TYPES.hex]: string;
    [FIELD_TYPES.rlpBinary]: any;
    [FIELD_TYPES.rlpBinaries]: any[];
    [FIELD_TYPES.rawBinary]: Uint8Array;
    [FIELD_TYPES.signatures]: Uint8Array[];
    [FIELD_TYPES.pointers]: NamePointer[];
    [FIELD_TYPES.offChainUpdates]: any;
    [FIELD_TYPES.callStack]: any;
    [FIELD_TYPES.proofOfInclusion]: any;
    [FIELD_TYPES.mptrees]: MPTree[];
    [FIELD_TYPES.callReturnType]: any;
    [FIELD_TYPES.ctVersion]: CtVersion;
    [FIELD_TYPES.abiVersion]: ABI_VERSIONS;
    [FIELD_TYPES.ttlType]: ORACLE_TTL_TYPES;
    [FIELD_TYPES.sophiaCodeTypeInfo]: any;
    [FIELD_TYPES.payload]: string | undefined;
    [FIELD_TYPES.stateTree]: any;
}
declare type UnionToIntersection<Union> = (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void) ? Intersection : never;
declare type TxElem = readonly [string, FIELD_TYPES | Field] | readonly [string, FIELD_TYPES, Encoding | readonly Encoding[]];
declare type BuildTxArgBySchemaType<Type extends FIELD_TYPES | Field, Prefix extends undefined | Encoding | readonly Encoding[]> = Type extends Field ? Parameters<Type['serialize']>[0] : Type extends FIELD_TYPES ? BuildFieldTypes<Prefix>[Type] : never;
declare type NullablePartial<T, NK extends keyof T = {
    [K in keyof T]: undefined extends T[K] ? K : never;
}[keyof T]> = Partial<Pick<T, NK>> & Omit<T, NK>;
declare type BuildTxArgBySchema<SchemaLine> = UnionToIntersection<SchemaLine extends ReadonlyArray<infer Elem> ? Elem extends TxElem ? NullablePartial<{
    [k in Elem[0]]: BuildTxArgBySchemaType<Elem[1], Elem[2]>;
}> : never : never>;
export declare type RawTxObject<Tx extends TxSchema> = {
    [k in keyof Tx]-?: Tx[k] extends BigNumber ? string : Tx[k];
};
export declare const TX_SCHEMA: {
    readonly 10: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["balance", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }]];
        readonly 2: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["flags", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["balance", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["gaContract", FIELD_TYPES.id, readonly [Encoded.Encoding.ContractAddress, Encoded.Encoding.Name]], readonly ["gaAuthFun", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray]];
    };
    readonly 11: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["signatures", FIELD_TYPES.signatures], readonly ["encodedTx", FIELD_TYPES.rlpBinary]];
    };
    readonly 12: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["senderId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["recipientId", FIELD_TYPES.id, readonly [Encoded.Encoding.AccountAddress, Encoded.Encoding.Name]], readonly ["amount", {
            serializeAettos(value: string | undefined): string;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            serialize(value: import("./field-types/u-int").Int, options: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["payload", FIELD_TYPES.payload]];
    };
    readonly 33: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["accountId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["commitmentId", FIELD_TYPES.id, Encoded.Encoding.Commitment], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 32: {
        readonly 2: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["accountId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["name", {
            serialize(value: `${string}.chain`): Buffer;
            deserialize(value: Buffer): `${string}.chain`;
        }], readonly ["nameSalt", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["nameFee", {
            serializeAettos(_value: string | undefined, txFields: {
                name: `${string}.chain`;
            }): string;
            serialize(value: import("./field-types/u-int").Int | undefined, txFields: {
                name: `${string}.chain`;
            } & import("./field-types/coin-amount").Options): Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 34: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["accountId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["nameId", {
            serialize(value: `nm_${string}` | `${string}.chain`): Buffer;
            deserialize(value: Buffer): `nm_${string}`;
        }], readonly ["nameTtl", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["pointers", FIELD_TYPES.pointers], readonly ["clientTtl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 36: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["accountId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["nameId", {
            serialize(value: `nm_${string}` | `${string}.chain`): Buffer;
            deserialize(value: Buffer): `nm_${string}`;
        }], readonly ["recipientId", FIELD_TYPES.id, readonly [Encoded.Encoding.AccountAddress, Encoded.Encoding.Name]], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 35: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["accountId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["nameId", {
            serialize(value: `nm_${string}` | `${string}.chain`): Buffer;
            deserialize(value: Buffer): `nm_${string}`;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 40: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["owner", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["ctVersion", FIELD_TYPES.ctVersion], readonly ["code", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["log", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["active", FIELD_TYPES.bool], readonly ["referers", FIELD_TYPES.ids, Encoded.Encoding.AccountAddress], readonly ["deposit", {
            serialize(value: import("./field-types/u-int").Int | undefined, options: import("./field-types/coin-amount").Options): Buffer;
            serializeAettos(value: string | undefined): string;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }]];
    };
    readonly 42: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["ownerId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["code", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["ctVersion", FIELD_TYPES.ctVersion], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["deposit", {
            serialize(value: import("./field-types/u-int").Int | undefined, options: import("./field-types/coin-amount").Options): Buffer;
            serializeAettos(value: string | undefined): string;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["amount", {
            serializeAettos(value: string | undefined): string;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            serialize(value: import("./field-types/u-int").Int, options: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["gasLimit", {
            serialize(_value: number | undefined, { txType, rebuildTx, gasMax, _computingGasLimit, }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                gasMax: number;
                _computingGasLimit?: number | undefined;
            }): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["gasPrice", {
            serializeAettos(value?: string | undefined): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["callData", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray]];
    };
    readonly 43: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["callerId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["contractId", FIELD_TYPES.id, readonly [Encoded.Encoding.ContractAddress, Encoded.Encoding.Name]], readonly ["abiVersion", FIELD_TYPES.abiVersion], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["amount", {
            serializeAettos(value: string | undefined): string;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            serialize(value: import("./field-types/u-int").Int, options: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["gasLimit", {
            serialize(_value: number | undefined, { txType, rebuildTx, gasMax, _computingGasLimit, }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                gasMax: number;
                _computingGasLimit?: number | undefined;
            }): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["gasPrice", {
            serializeAettos(value?: string | undefined): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["callData", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray]];
    };
    readonly 41: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["callerId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["callerNonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["height", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["contractId", FIELD_TYPES.id, Encoded.Encoding.ContractAddress], readonly ["gasPrice", {
            serializeAettos(value?: string | undefined): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["gasUsed", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["returnValue", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["returnType", FIELD_TYPES.callReturnType], readonly ["log", FIELD_TYPES.rawBinary]];
    };
    readonly 22: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["accountId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["queryFormat", FIELD_TYPES.string], readonly ["responseFormat", FIELD_TYPES.string], readonly ["queryFee", {
            serializeAettos(value: string | undefined): string;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            serialize(value: import("./field-types/u-int").Int, options: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["oracleTtlType", FIELD_TYPES.ttlType], readonly ["oracleTtlValue", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["abiVersion", FIELD_TYPES.abiVersion]];
    };
    readonly 25: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["oracleId", FIELD_TYPES.id, readonly [Encoded.Encoding.OracleAddress, Encoded.Encoding.Name]], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["oracleTtlType", FIELD_TYPES.ttlType], readonly ["oracleTtlValue", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 23: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["senderId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["oracleId", FIELD_TYPES.id, readonly [Encoded.Encoding.OracleAddress, Encoded.Encoding.Name]], readonly ["query", FIELD_TYPES.string], readonly ["queryFee", {
            serializeAettos(value: string | undefined): string;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            serialize(value: import("./field-types/u-int").Int, options: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["queryTtlType", FIELD_TYPES.ttlType], readonly ["queryTtlValue", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["responseTtlType", FIELD_TYPES.ttlType], readonly ["responseTtlValue", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 24: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["oracleId", FIELD_TYPES.id, Encoded.Encoding.OracleAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["queryId", FIELD_TYPES.binary, Encoded.Encoding.OracleQueryId], readonly ["response", FIELD_TYPES.string], readonly ["responseTtlType", FIELD_TYPES.ttlType], readonly ["responseTtlValue", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 50: {
        readonly 2: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["initiator", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["initiatorAmount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["responder", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["responderAmount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["channelReserve", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["lockPeriod", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["initiatorDelegateIds", FIELD_TYPES.string], readonly ["responderDelegateIds", FIELD_TYPES.string], readonly ["stateHash", FIELD_TYPES.binary, "st"], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 53: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["fromId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["initiatorAmountFinal", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["responderAmountFinal", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 54: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["fromId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["payload", FIELD_TYPES.binary, "tx"], readonly ["poi", FIELD_TYPES.binary, "pi"], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 55: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["fromId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["payload", FIELD_TYPES.binary, "tx"], readonly ["poi", FIELD_TYPES.binary, "pi"], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 51: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["fromId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["amount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["stateHash", FIELD_TYPES.binary, "st"], readonly ["round", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 52: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["toId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["amount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["stateHash", FIELD_TYPES.binary, "st"], readonly ["round", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 56: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["fromId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["initiatorAmountFinal", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["responderAmountFinal", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 521: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["fromId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["payload", FIELD_TYPES.binary, "tx"], readonly ["round", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["update", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["stateHash", FIELD_TYPES.binary, "st"], readonly ["offChainTrees", FIELD_TYPES.stateTree], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 57: {
        readonly 2: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["round", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["stateHash", FIELD_TYPES.binary, "st"]];
    };
    readonly 58: {
        readonly 3: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["initiator", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["responder", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["channelAmount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["initiatorAmount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["responderAmount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["channelReserve", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["initiatorDelegateIds", FIELD_TYPES.ids], readonly ["responderDelegateIds", FIELD_TYPES.ids], readonly ["stateHash", FIELD_TYPES.hex], readonly ["round", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["soloRound", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["lockPeriod", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["lockedUntil", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["initiatorAuth", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["responderAuth", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray]];
    };
    readonly 59: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["fromId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["payload", FIELD_TYPES.binary, "tx"], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 570: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["from", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["to", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["amount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }]];
    };
    readonly 571: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["from", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["amount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }]];
    };
    readonly 572: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["from", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["amount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }]];
    };
    readonly 573: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["owner", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["ctVersion", FIELD_TYPES.ctVersion], readonly ["code", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["deposit", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["callData", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray]];
    };
    readonly 574: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["caller", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["contract", FIELD_TYPES.id, Encoded.Encoding.ContractAddress], readonly ["abiVersion", FIELD_TYPES.abiVersion], readonly ["amount", {
            serialize(value: import("./field-types/u-int").Int): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["callData", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["callStack", FIELD_TYPES.callStack], readonly ["gasPrice", {
            serializeAettos(value?: string | undefined): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["gasLimit", {
            serialize(_value: number | undefined, { txType, rebuildTx, gasMax, _computingGasLimit, }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                gasMax: number;
                _computingGasLimit?: number | undefined;
            }): Buffer;
            deserialize(value: Buffer): number;
        }]];
    };
    readonly 575: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channelId", FIELD_TYPES.id, Encoded.Encoding.Channel], readonly ["round", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["role", FIELD_TYPES.string], readonly ["pubkey", FIELD_TYPES.id, Encoded.Encoding.AccountAddress]];
    };
    readonly 60: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["accounts", FIELD_TYPES.mptrees], readonly ["calls", FIELD_TYPES.mptrees], readonly ["channels", FIELD_TYPES.mptrees], readonly ["contracts", FIELD_TYPES.mptrees], readonly ["ns", FIELD_TYPES.mptrees], readonly ["oracles", FIELD_TYPES.mptrees]];
    };
    readonly 62: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["contracts", FIELD_TYPES.rlpBinary], readonly ["calls", FIELD_TYPES.rlpBinary], readonly ["channels", FIELD_TYPES.rlpBinary], readonly ["ns", FIELD_TYPES.rlpBinary], readonly ["oracles", FIELD_TYPES.rlpBinary], readonly ["accounts", FIELD_TYPES.rlpBinary]];
    };
    readonly 63: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["values", FIELD_TYPES.rlpBinaries]];
    };
    readonly 64: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["key", FIELD_TYPES.hex], readonly ["value", FIELD_TYPES.rawBinary]];
    };
    readonly 621: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["contracts", FIELD_TYPES.rlpBinary]];
    };
    readonly 622: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["calls", FIELD_TYPES.rlpBinary]];
    };
    readonly 623: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["channels", FIELD_TYPES.rlpBinary]];
    };
    readonly 624: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["mtree", FIELD_TYPES.rlpBinary]];
    };
    readonly 625: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["otree", FIELD_TYPES.rlpBinary]];
    };
    readonly 626: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["accounts", FIELD_TYPES.rlpBinary]];
    };
    readonly 80: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["ownerId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["code", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["authFun", FIELD_TYPES.rawBinary], readonly ["ctVersion", FIELD_TYPES.ctVersion], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["ttl", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["gasLimit", {
            serialize(_value: number | undefined, { txType, rebuildTx, gasMax, _computingGasLimit, }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                gasMax: number;
                _computingGasLimit?: number | undefined;
            }): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["gasPrice", {
            serializeAettos(value?: string | undefined): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["callData", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray]];
    };
    readonly 81: {
        readonly 2: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["gaId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["authData", FIELD_TYPES.binary, Encoded.Encoding.ContractBytearray], readonly ["abiVersion", FIELD_TYPES.abiVersion], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["gasLimit", {
            serialize(_value: number | undefined, { txType, rebuildTx, gasMax, _computingGasLimit, }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                gasMax: number;
                _computingGasLimit?: number | undefined;
            }): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["gasPrice", {
            serializeAettos(value?: string | undefined): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["tx", FIELD_TYPES.rlpBinary]];
    };
    readonly 82: {
        readonly 1: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["payerId", FIELD_TYPES.id, Encoded.Encoding.AccountAddress], readonly ["nonce", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["fee", {
            serializeAettos(_value: string | undefined, { txType, rebuildTx, _computingMinFee }: {
                txType: Tag;
                rebuildTx: (params: any) => any;
                _computingMinFee?: string | undefined;
            }): string;
            serialize: (value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options) => Buffer;
            serializeOptional(value: import("./field-types/u-int").Int | undefined, { denomination, ...options }: import("./field-types/coin-amount").Options): Buffer;
            deserialize(value: Buffer): string;
        }], readonly ["tx", FIELD_TYPES.rlpBinary]];
    };
    readonly 70: {
        readonly 3: readonly [readonly ["tag", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["VSN", {
            serialize(value: number): Buffer;
            deserialize(value: Buffer): number;
        }], readonly ["sourceCodeHash", FIELD_TYPES.rawBinary], readonly ["typeInfo", FIELD_TYPES.sophiaCodeTypeInfo], readonly ["byteCode", FIELD_TYPES.rawBinary], readonly ["compilerVersion", FIELD_TYPES.string], readonly ["payable", FIELD_TYPES.bool]];
    };
};
export declare type TxTypeSchemas = {
    [key in Tag]: BuildTxArgBySchema<typeof TX_SCHEMA[key][keyof typeof TX_SCHEMA[key]]>;
};
export declare type TxSchema = TxTypeSchemas[Tag];
export declare type TxParamsCommon = Partial<UnionToIntersection<TxSchema>>;
export {};
