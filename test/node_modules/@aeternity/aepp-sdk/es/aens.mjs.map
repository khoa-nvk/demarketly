{"version":3,"file":"aens.mjs","names":["genSalt","commitmentHash","isAuctionName","CLIENT_TTL","NAME_TTL","Tag","ArgumentError","send","getName","getHeight","_buildTx","aensRevoke","name","options","nameRevokeTx","NameRevokeTx","nameId","accountId","onAccount","address","aensUpdate","pointers","extendPointers","allPointers","Object","fromEntries","map","key","id","nameUpdateTx","NameUpdateTx","clientTtl","nameTtl","entries","toString","aensTransfer","account","nameTransferTx","NameTransferTx","recipientId","aensQuery","opt","nameEntry","freeze","owner","update","transfer","revoke","extendTtl","aensClaim","salt","claimTx","NameClaimTx","nameSalt","result","nameInter","blockHeight","assign","aensPreclaim","height","commitmentId","preclaimTx","NamePreclaimTx","claim","opts","aensBid","nameFee"],"sources":["../src/aens.ts"],"sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2022 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Aens methods - routines to interact with the Ã¦ternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport {\n  CLIENT_TTL, NAME_TTL, Tag, AensName,\n} from './tx/builder/constants';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { send, SendOptions } from './spend';\nimport { getName, getHeight } from './chain';\nimport { _buildTx, BuildTxOptions } from './tx';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\n\ninterface KeyPointers {\n  [key: string]: string | Buffer;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof send> {\n  const nameRevokeTx = await _buildTx(Tag.NameRevokeTx, {\n    ...options,\n    nameId: name,\n    accountId: await options.onAccount.address(options),\n  });\n  return send(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId'>,\n  SendOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @param options.extendPointers - Get the pointers from the node and merge with provided\n * ones. Pointers with the same type will be overwritten\n * @param options.onAccount - Make operation on specific account from sdk (you\n * pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameTtl - Name ttl represented in number of\n * blocks (Max value is 50000 blocks)\n * @param options.clientTtl=84600 a suggestion as to how long any\n * clients should cache this information\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof send> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers\n        .map(({ key, id }: { key: string; id: string }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const nameUpdateTx = await _buildTx(Tag.NameUpdateTx, {\n    clientTtl: CLIENT_TTL,\n    nameTtl: NAME_TTL,\n    ...options,\n    nameId: name,\n    accountId: await options.onAccount.address(options),\n    pointers: Object.entries(allPointers).map(([key, id]) => ({ key, id: id.toString() })),\n  });\n\n  return send(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl'>,\n  SendOptions {\n  extendPointers?: boolean;\n  clientTtl?: number;\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof send> {\n  const nameTransferTx = await _buildTx(Tag.NameTransferTx, {\n    ...options,\n    nameId: name,\n    accountId: await options.onAccount.address(options),\n    recipientId: account,\n  });\n\n  return send(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId'>,\n  SendOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @returns\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl = NAME_TTL, options = {}) {\n      if (nameTtl > NAME_TTL || nameTtl <= 0) {\n        throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, nameTtl);\n      }\n\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid\n * @param options - options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameFee - Name Fee (By default calculated by sdk)\n * @returns the result of the claim\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await _buildTx(Tag.NameClaimTx, {\n    ...options,\n    accountId: await options.onAccount.address(options),\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await send(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof send>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof send>> & {\n  height: number;\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const height = await getHeight(options);\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await _buildTx(Tag.NamePreclaimTx, {\n    ...options,\n    accountId: await options.onAccount.address(options),\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await send(preclaimTx, options),\n    height,\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      return aensClaim(name, salt, { ...options, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId'>,\n  SendOptions,\n  AensClaimOptions {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, startFee, incrementPercentage)\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n"],"mappings":"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"}