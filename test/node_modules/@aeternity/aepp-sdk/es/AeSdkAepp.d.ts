import AeSdkBase, { Account } from './AeSdkBase';
import AccountBase from './account/Base';
import { Encoded } from './utils/encoder';
import { Accounts, WalletInfo, Network, WalletApi, AeppApi } from './aepp-wallet-communication/rpc/types';
import RpcClient from './aepp-wallet-communication/rpc/RpcClient';
import { METHODS, SUBSCRIPTION_TYPES } from './aepp-wallet-communication/schema';
import BrowserConnection from './aepp-wallet-communication/connection/Browser';
/**
 * RPC handler for AEPP side
 * Contain functionality for wallet interaction and connect it to sdk
 * @category aepp wallet communication
 */
export default class AeSdkAepp extends AeSdkBase {
    name: string;
    onAddressChange: (a: Accounts) => void;
    onDisconnect: (p: any) => void;
    onNetworkChange: (a: Network) => void;
    rpcClient?: RpcClient<WalletApi, AeppApi>;
    _accounts?: Accounts;
    /**
     * @param options - Options
     * @param options.name - Aepp name
     * @param options.onAddressChange - Call-back function for update address event
     * @param options.onDisconnect - Call-back function for disconnect event
     * @param options.onNetworkChange - Call-back function for update network event
     */
    constructor({ name, onAddressChange, onDisconnect, onNetworkChange, ...other }: {
        name: string;
        onAddressChange: (a: Accounts) => void;
        onDisconnect: (p: any) => void;
        onNetworkChange: (a: Network) => void;
    } & ConstructorParameters<typeof AeSdkBase>[0]);
    _resolveAccount(account?: Account): AccountBase;
    addresses(): Encoded.AccountAddress[];
    /**
     * Connect to wallet
     * @param connection - Wallet connection object
     * @param options - Options
     * @param options.connectNode - Request wallet to bind node
     * @param options.name - Node name
     * @param options.select - Select this node as current
     */
    connectToWallet(connection: BrowserConnection, { connectNode, name, select }?: {
        connectNode?: boolean;
        name?: string;
        select?: boolean;
    }): Promise<WalletInfo>;
    /**
     * Disconnect from wallet
     */
    disconnectWallet(): void;
    /**
     * Ask addresses from wallet
     * @returns Addresses from wallet
     */
    askAddresses(): Promise<Encoded.AccountAddress[]>;
    /**
     * Subscribe for addresses from wallet
     * @param type - Subscription type
     * @param value - Should be one of 'current' (the selected account), 'connected' (all)
     * @returns Accounts from wallet
     */
    subscribeAddress(type: SUBSCRIPTION_TYPES, value: 'current' | 'connected'): Promise<ReturnType<WalletApi[METHODS.subscribeAddress]>>;
    _ensureConnected(): asserts this is AeSdkAepp & {
        rpcClient: NonNullable<AeSdkAepp['rpcClient']>;
    };
    _ensureAccountAccess(): asserts this is AeSdkAepp & {
        rpcClient: NonNullable<AeSdkAepp['rpcClient']>;
    };
}
