import { Node as NodeApi, NodeOptionalParams } from './apis/node';
import { Encoded } from './utils/encoder';
/**
 * Obtain networkId from account or node
 */
export declare function getNetworkId({ networkId }?: {
    networkId?: string;
}): Promise<string>;
declare const bigIntPropertyNames: readonly ["balance", "queryFee", "fee", "amount", "nameFee", "channelAmount", "initiatorAmount", "responderAmount", "channelReserve", "initiatorAmountFinal", "responderAmountFinal", "gasPrice", "deposit"];
declare const numberPropertyNames: readonly ["time", "gas", "gasUsed", "nameSalt", "nonce", "nextNonce", "height", "blockHeight", "top", "topBlockHeight", "ttl", "nameTtl", "clientTtl", "inbound", "outbound", "peerCount", "pendingTransactionsCount", "effectiveAtHeight", "version", "solutions", "round"];
declare type BigIntPropertyNames = typeof bigIntPropertyNames[number];
declare type NumberPropertyNames = typeof numberPropertyNames[number];
declare type PreserveOptional<NewType, OrigType> = OrigType extends undefined ? NewType | undefined : NewType;
export declare type TransformNodeType<Type> = Type extends (...args: infer Args) => infer Ret ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret> : Type extends [infer Item, ...infer Rest] ? [TransformNodeType<Item>, ...TransformNodeType<Rest>] : Type extends Array<infer Item> ? Array<TransformNodeType<Item>> : Type extends Promise<infer T> ? Promise<TransformNodeType<T>> : Type extends {
    [P in any]: any;
} ? {
    [Property in keyof Type]: Property extends BigIntPropertyNames ? PreserveOptional<bigint, Type[Property]> : Property extends NumberPropertyNames ? PreserveOptional<number, Type[Property]> : Property extends 'txHash' ? PreserveOptional<Encoded.TxHash, Type[Property]> : TransformNodeType<Type[Property]>;
} : Type;
declare type NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {
    [Name in keyof InstanceType<typeof NodeApi>]: Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest' ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>;
};
export interface NodeInfo {
    url: string;
    nodeNetworkId: string;
    version: string;
    consensusProtocolVersion: number;
}
declare const Node_base: NodeTransformedApi;
export default class Node extends Node_base {
    url: string;
    /**
     * @param url - Url for node API
     * @param options - Options
     * @param options.ignoreVersion - Don't check node version
     */
    constructor(url: string, { ignoreVersion, ...options }?: NodeOptionalParams & {
        ignoreVersion?: boolean;
    });
    getNodeInfo(): Promise<NodeInfo>;
}
export {};
