{"version":3,"file":"ga.mjs","names":["MAX_AUTH_FUN_GAS","Tag","buildContractIdByContractTx","buildTx","unpackTx","_buildTx","getVmVersion","prepareTxParams","hash","decode","IllegalArgumentError","MissingParamError","InvalidAuthDataError","concatBuffers","getContractInstance","send","getAccount","isGA","address","options","contractId","createGeneralizedAccount","authFnName","source","args","onAccount","onCompiler","onNode","ownerId","contract","tx","GaAttachTx","code","compile","gasLimit","_estimateGas","callData","calldata","encode","_name","authFun","transaction","rawTx","Object","freeze","owner","gaContractId","createMetaTx","rawTransaction","authData","wrapInEmptySignedTx","encodedTx","signatures","SignedTx","keys","length","authCallData","abiVersion","ContractCallTx","wrappedTx","params","txObject","gaId","vsn","fee","GaMetaTx","rlpEncoded","metaTxRlp","buildAuthTxHash","networkId","getStatus","Uint8Array","from"],"sources":["../../src/contract/ga.ts"],"sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2022 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { MAX_AUTH_FUN_GAS, TxSchema } from '../tx/builder/schema';\nimport { Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, BuiltTx, TxUnpacked, unpackTx,\n} from '../tx/builder';\nimport {\n  _buildTx, BuildTxOptions, getVmVersion, prepareTxParams,\n} from '../tx';\nimport { hash } from '../utils/crypto';\nimport { decode, Encoded, Encoding } from '../utils/encoder';\nimport { IllegalArgumentError, MissingParamError, InvalidAuthDataError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport { getContractInstance } from './methods';\nimport { send, SendOptions } from '../spend';\nimport Node from '../Node';\nimport { getAccount } from '../chain';\nimport Compiler from './Compiler';\n\n/**\n * Check if account is GA\n * @category contract\n * @param address - Account address\n * @param options - Options\n * @returns if account is GA\n */\nexport async function isGA(\n  address: Encoded.AccountAddress,\n  options: Parameters<typeof getAccount>[1],\n): Promise<boolean> {\n  const { contractId } = await getAccount(address, options);\n  return contractId != null;\n}\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param source - Auth contract source code\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  source: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = await onAccount.address(options);\n  if (await isGA(ownerId, { onNode })) throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n\n  const contract = await getContractInstance({\n    onAccount, onCompiler, onNode, source,\n  });\n\n  const tx = await _buildTx(Tag.GaAttachTx, {\n    ...options,\n    onNode,\n    code: await contract.compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract.calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const contractId = buildContractIdByContractTx(tx);\n  const { hash: transaction, rawTx } = await send(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendOptions {\n  onAccount: AccountBase;\n  onCompiler: Compiler;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Create a metaTx transaction\n * @category contract\n * @param rawTransaction - Inner transaction\n * @param authData - Object with gaMeta params\n * @param authFnName - Authorization function name\n * @param options - Options\n * @param options.onAccount - Account to use\n * @returns Transaction string\n */\nexport async function createMetaTx(\n  rawTransaction: Encoded.Transaction,\n  authData: {\n    gasLimit?: number;\n    callData?: Encoded.ContractBytearray;\n    source?: string;\n    args?: any[];\n  },\n  authFnName: string,\n  {\n    onAccount, onCompiler, onNode, ...options\n  }:\n  { onAccount: AccountBase; onCompiler: Compiler; onNode: Node }\n  & Parameters<AccountBase['address']>[0],\n): Promise<Encoded.Transaction> {\n  const wrapInEmptySignedTx = (\n    tx: Encoded.Transaction | Uint8Array | TxUnpacked<TxSchema>,\n  ): BuiltTx<TxSchema, Encoding.Transaction> => (\n    buildTx({ encodedTx: tx, signatures: [] }, Tag.SignedTx)\n  );\n\n  if (Object.keys(authData).length <= 0) throw new MissingParamError('authData is required');\n\n  const gasLimit = authData.gasLimit ?? MAX_AUTH_FUN_GAS;\n  if (gasLimit > MAX_AUTH_FUN_GAS) {\n    throw new InvalidAuthDataError(`the maximum gasLimit value for ga authFun is ${MAX_AUTH_FUN_GAS}, got ${gasLimit}`);\n  }\n\n  const authCallData = authData.callData ?? await (async () => {\n    if (authData.source == null || authData.args == null) throw new InvalidAuthDataError('Auth data must contain source code and arguments.');\n    const contract = await getContractInstance({\n      onCompiler, onNode, source: authData.source,\n    });\n    return contract.calldata.encode(contract._name, authFnName, authData.args);\n  })();\n\n  const { abiVersion } = await getVmVersion(Tag.ContractCallTx, { onNode });\n  const wrappedTx = wrapInEmptySignedTx(unpackTx<Tag.SignedTx>(rawTransaction));\n  const params = {\n    ...options,\n    tx: {\n      ...wrappedTx,\n      tx: wrappedTx.txObject,\n    },\n    // TODO: accept an address instead\n    gaId: await onAccount.address(options),\n    abiVersion,\n    authData: authCallData,\n    gasLimit,\n    vsn: 2,\n  };\n  // @ts-expect-error createMetaTx needs to be integrated into tx builder\n  const { fee } = await prepareTxParams(Tag.GaMetaTx, { ...params, onNode });\n  const { rlpEncoded: metaTxRlp } = buildTx({ ...params, fee }, Tag.GaMetaTx);\n  return wrapInEmptySignedTx(metaTxRlp).tx;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash`\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Uint8Array> {\n  const { networkId } = await onNode.getStatus();\n  return new Uint8Array(hash(\n    concatBuffers([Buffer.from(networkId), decode(transaction)]),\n  ));\n}\n"],"mappings":"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"}