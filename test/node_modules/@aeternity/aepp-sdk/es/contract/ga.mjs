import _buffer from "buffer";
const {
  Buffer: _Buffer
} = _buffer;

/*
 * ISC License (ISC)
 * Copyright (c) 2022 aeternity developers
 *
 *  Permission to use, copy, modify, and/or distribute this software for any
 *  purpose with or without fee is hereby granted, provided that the above
 *  copyright notice and this permission notice appear in all copies.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THIS SOFTWARE.
 */

/**
 * Generalized Account module - routines to use generalized account
 */
import { MAX_AUTH_FUN_GAS } from "../tx/builder/schema.mjs";
import { Tag } from "../tx/builder/constants.mjs";
import { buildContractIdByContractTx, buildTx, unpackTx } from "../tx/builder/index.mjs";
import { _buildTx, getVmVersion, prepareTxParams } from "../tx/index.mjs";
import { hash } from "../utils/crypto.mjs";
import { decode } from "../utils/encoder.mjs";
import { IllegalArgumentError, MissingParamError, InvalidAuthDataError } from "../utils/errors.mjs";
import { concatBuffers } from "../utils/other.mjs";
import { getContractInstance } from "./methods.mjs";
import { send } from "../spend.mjs";
import { getAccount } from "../chain.mjs";

/**
 * Check if account is GA
 * @category contract
 * @param address - Account address
 * @param options - Options
 * @returns if account is GA
 */
export async function isGA(address, options) {
  const {
    contractId
  } = await getAccount(address, options);
  return contractId != null;
}
/**
 * Convert current account to GA
 * @category contract
 * @param authFnName - Authorization function name
 * @param source - Auth contract source code
 * @param args - init arguments
 * @param options - Options
 * @returns General Account Object
 */

export async function createGeneralizedAccount(authFnName, source, args, _ref) {
  var _options$gasLimit;

  let {
    onAccount,
    onCompiler,
    onNode,
    ...options
  } = _ref;
  const ownerId = await onAccount.address(options);
  if (await isGA(ownerId, {
    onNode
  })) throw new IllegalArgumentError(`Account ${ownerId} is already GA`);
  const contract = await getContractInstance({
    onAccount,
    onCompiler,
    onNode,
    source
  });
  const tx = await _buildTx(Tag.GaAttachTx, { ...options,
    onNode,
    code: await contract.compile(),
    gasLimit: (_options$gasLimit = options.gasLimit) !== null && _options$gasLimit !== void 0 ? _options$gasLimit : await contract._estimateGas('init', args, options),
    ownerId,
    callData: contract.calldata.encode(contract._name, 'init', args),
    authFun: hash(authFnName)
  });
  const contractId = buildContractIdByContractTx(tx);
  const {
    hash: transaction,
    rawTx
  } = await send(tx, {
    onNode,
    onAccount,
    onCompiler,
    ...options
  });
  return Object.freeze({
    owner: ownerId,
    transaction,
    rawTx,
    gaContractId: contractId
  });
}

/**
 * Create a metaTx transaction
 * @category contract
 * @param rawTransaction - Inner transaction
 * @param authData - Object with gaMeta params
 * @param authFnName - Authorization function name
 * @param options - Options
 * @param options.onAccount - Account to use
 * @returns Transaction string
 */
export async function createMetaTx(rawTransaction, authData, authFnName, _ref2) {
  var _authData$gasLimit, _authData$callData;

  let {
    onAccount,
    onCompiler,
    onNode,
    ...options
  } = _ref2;

  const wrapInEmptySignedTx = tx => buildTx({
    encodedTx: tx,
    signatures: []
  }, Tag.SignedTx);

  if (Object.keys(authData).length <= 0) throw new MissingParamError('authData is required');
  const gasLimit = (_authData$gasLimit = authData.gasLimit) !== null && _authData$gasLimit !== void 0 ? _authData$gasLimit : MAX_AUTH_FUN_GAS;

  if (gasLimit > MAX_AUTH_FUN_GAS) {
    throw new InvalidAuthDataError(`the maximum gasLimit value for ga authFun is ${MAX_AUTH_FUN_GAS}, got ${gasLimit}`);
  }

  const authCallData = (_authData$callData = authData.callData) !== null && _authData$callData !== void 0 ? _authData$callData : await (async () => {
    if (authData.source == null || authData.args == null) throw new InvalidAuthDataError('Auth data must contain source code and arguments.');
    const contract = await getContractInstance({
      onCompiler,
      onNode,
      source: authData.source
    });
    return contract.calldata.encode(contract._name, authFnName, authData.args);
  })();
  const {
    abiVersion
  } = await getVmVersion(Tag.ContractCallTx, {
    onNode
  });
  const wrappedTx = wrapInEmptySignedTx(unpackTx(rawTransaction));
  const params = { ...options,
    tx: { ...wrappedTx,
      tx: wrappedTx.txObject
    },
    // TODO: accept an address instead
    gaId: await onAccount.address(options),
    abiVersion,
    authData: authCallData,
    gasLimit,
    vsn: 2
  }; // @ts-expect-error createMetaTx needs to be integrated into tx builder

  const {
    fee
  } = await prepareTxParams(Tag.GaMetaTx, { ...params,
    onNode
  });
  const {
    rlpEncoded: metaTxRlp
  } = buildTx({ ...params,
    fee
  }, Tag.GaMetaTx);
  return wrapInEmptySignedTx(metaTxRlp).tx;
}
/**
 * Build a transaction hash the same as `Auth.tx_hash`
 * @category contract
 * @param transaction - tx-encoded transaction
 * @param options - Options
 * @param options.onNode - Node to use
 * @returns Transaction hash
 */

export async function buildAuthTxHash(transaction, _ref3) {
  let {
    onNode
  } = _ref3;
  const {
    networkId
  } = await onNode.getStatus();
  return new Uint8Array(hash(concatBuffers([_Buffer.from(networkId), decode(transaction)])));
}
//# sourceMappingURL=ga.mjs.map