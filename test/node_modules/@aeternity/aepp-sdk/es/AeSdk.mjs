import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import AeSdkBase from "./AeSdkBase.mjs";
import { decode } from "./utils/encoder.mjs";
import { UnavailableAccountError } from "./utils/errors.mjs";
export default class AeSdk extends AeSdkBase {
  constructor() {
    super(...arguments);

    _defineProperty(this, "accounts", {});
  }

  _resolveAccount() {
    let account = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.selectedAddress;

    if (typeof account === 'string') {
      const address = account;
      decode(address);
      if (this.accounts[address] == null) throw new UnavailableAccountError(account);
      account = this.accounts[address];
    }

    return super._resolveAccount(account);
  }
  /**
   * Get accounts addresses
   * @example addresses()
   */


  addresses() {
    return Object.keys(this.accounts);
  }
  /**
   * Add specific account
   * @param account - Account instance
   * @param options - Options
   * @param options.select - Select account
   * @example addAccount(account)
   */


  async addAccount(account) {
    let {
      select
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const address = await account.address();
    this.accounts[address] = account;
    if (select === true) this.selectAccount(address);
  }
  /**
   * Remove specific account
   * @param address - Address of account to remove
   * @example removeAccount(address)
   */


  removeAccount(address) {
    if (this.accounts[address] == null) {
      console.warn(`removeAccount: Account for ${address} not available`);
      return;
    }

    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete

    if (this.selectedAddress === address) delete this.selectedAddress;
  }
  /**
   * Select specific account
   * @param address - Address of account to select
   * @example selectAccount('ak_xxxxxxxx')
   */


  selectAccount(address) {
    decode(address);
    if (this.accounts[address] == null) throw new UnavailableAccountError(address);
    this.selectedAddress = address;
  }

}
//# sourceMappingURL=AeSdk.mjs.map