import { buildTx } from "../tx/builder/index.mjs";
import { calculateMinFee as calculateMinFeeInternal } from "../tx/builder/field-types/fee.mjs";
import { mapObject } from "../utils/other.mjs";
export * from "./methods.mjs";
/**
 * @deprecated use NamePointer from apis/node instead
 * @hidden
 */

/**
 * @deprecated use genSalt instead
 * @hidden
 */
export function salt() {
  return Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER));
}
/**
 * @deprecated use genSalt instead
 * @hidden
 */

export const createSalt = salt;
/**
 * Calculate min fee
 * @category transaction builder
 * @param txType - Transaction type
 * @param options - Options object
 * @param options.params - Tx params
 * @deprecated use buildTx to generate transaction, unpack it and refer to `fee` field
 * @hidden
 * @example
 * ```js
 * calculateMinFee('spendTx', { gasLimit, params })
 * ```
 */

export function calculateMinFee(txType, _ref) {
  let {
    params,
    vsn,
    denomination
  } = _ref;
  return calculateMinFeeInternal(txType, fee => // @ts-expect-error anyway this planned to be removed
  buildTx({ ...params,
    _computingMinFee: fee
  }, txType, {
    vsn,
    denomination
  }));
}

/**
 * @deprecated Maximum gas limit depends on transaction size, this value is outdated,
 * sdk check/provides gasLimit by itself while building a transaction
 * @hidden
 */
export const GAS_MAX = 1600000 - 21000;
/**
 * @deprecated use `Tag`
 * @hidden
 */

export let TX_TYPE;
/**
 * @deprecated use `readId`, `writeId`
 * @hidden
 */

(function (TX_TYPE) {
  TX_TYPE[TX_TYPE["account"] = 10] = "account";
  TX_TYPE[TX_TYPE["signed"] = 11] = "signed";
  TX_TYPE[TX_TYPE["spend"] = 12] = "spend";
  TX_TYPE[TX_TYPE["oracleRegister"] = 22] = "oracleRegister";
  TX_TYPE[TX_TYPE["oracleQuery"] = 23] = "oracleQuery";
  TX_TYPE[TX_TYPE["oracleResponse"] = 24] = "oracleResponse";
  TX_TYPE[TX_TYPE["oracleExtend"] = 25] = "oracleExtend";
  TX_TYPE[TX_TYPE["nameClaim"] = 32] = "nameClaim";
  TX_TYPE[TX_TYPE["namePreClaim"] = 33] = "namePreClaim";
  TX_TYPE[TX_TYPE["nameUpdate"] = 34] = "nameUpdate";
  TX_TYPE[TX_TYPE["nameRevoke"] = 35] = "nameRevoke";
  TX_TYPE[TX_TYPE["nameTransfer"] = 36] = "nameTransfer";
  TX_TYPE[TX_TYPE["contract"] = 40] = "contract";
  TX_TYPE[TX_TYPE["contractCallResult"] = 41] = "contractCallResult";
  TX_TYPE[TX_TYPE["contractCreate"] = 42] = "contractCreate";
  TX_TYPE[TX_TYPE["contractCall"] = 43] = "contractCall";
  TX_TYPE[TX_TYPE["channelCreate"] = 50] = "channelCreate";
  TX_TYPE[TX_TYPE["channelDeposit"] = 51] = "channelDeposit";
  TX_TYPE[TX_TYPE["channelWithdraw"] = 52] = "channelWithdraw";
  TX_TYPE[TX_TYPE["channelCloseMutual"] = 53] = "channelCloseMutual";
  TX_TYPE[TX_TYPE["channelCloseSolo"] = 54] = "channelCloseSolo";
  TX_TYPE[TX_TYPE["channelSlash"] = 55] = "channelSlash";
  TX_TYPE[TX_TYPE["channelSettle"] = 56] = "channelSettle";
  TX_TYPE[TX_TYPE["channelOffChain"] = 57] = "channelOffChain";
  TX_TYPE[TX_TYPE["channel"] = 58] = "channel";
  TX_TYPE[TX_TYPE["channelSnapshotSolo"] = 59] = "channelSnapshotSolo";
  TX_TYPE[TX_TYPE["proofOfInclusion"] = 60] = "proofOfInclusion";
  TX_TYPE[TX_TYPE["stateTrees"] = 62] = "stateTrees";
  TX_TYPE[TX_TYPE["merklePatriciaTree"] = 63] = "merklePatriciaTree";
  TX_TYPE[TX_TYPE["merklePatriciaTreeValue"] = 64] = "merklePatriciaTreeValue";
  TX_TYPE[TX_TYPE["sophiaByteCode"] = 70] = "sophiaByteCode";
  TX_TYPE[TX_TYPE["gaAttach"] = 80] = "gaAttach";
  TX_TYPE[TX_TYPE["gaMeta"] = 81] = "gaMeta";
  TX_TYPE[TX_TYPE["payingFor"] = 82] = "payingFor";
  TX_TYPE[TX_TYPE["channelForceProgress"] = 521] = "channelForceProgress";
  TX_TYPE[TX_TYPE["channelOffChainUpdateTransfer"] = 570] = "channelOffChainUpdateTransfer";
  TX_TYPE[TX_TYPE["channelOffChainUpdateDeposit"] = 571] = "channelOffChainUpdateDeposit";
  TX_TYPE[TX_TYPE["channelOffChainUpdateWithdrawal"] = 572] = "channelOffChainUpdateWithdrawal";
  TX_TYPE[TX_TYPE["channelOffChainCreateContract"] = 573] = "channelOffChainCreateContract";
  TX_TYPE[TX_TYPE["channelOffChainCallContract"] = 574] = "channelOffChainCallContract";
  TX_TYPE[TX_TYPE["channelReconnect"] = 575] = "channelReconnect";
  TX_TYPE[TX_TYPE["contractsTree"] = 621] = "contractsTree";
  TX_TYPE[TX_TYPE["contractCallsTree"] = 622] = "contractCallsTree";
  TX_TYPE[TX_TYPE["channelsTree"] = 623] = "channelsTree";
  TX_TYPE[TX_TYPE["nameserviceTree"] = 624] = "nameserviceTree";
  TX_TYPE[TX_TYPE["oraclesTree"] = 625] = "oraclesTree";
  TX_TYPE[TX_TYPE["accountsTree"] = 626] = "accountsTree";
})(TX_TYPE || (TX_TYPE = {}));

export const ID_TAG = {
  account: 1,
  name: 2,
  commitment: 3,
  oracle: 4,
  contract: 5,
  channel: 6
};
/**
 * @deprecated use `readId`, `writeId`
 * @hidden
 */

export const PREFIX_ID_TAG = {
  ak: ID_TAG.account,
  nm: ID_TAG.name,
  cm: ID_TAG.commitment,
  ok: ID_TAG.oracle,
  ct: ID_TAG.contract,
  ch: ID_TAG.channel
};
/**
 * @deprecated use `readId`, `writeId`
 * @hidden
 */

export const ID_TAG_PREFIX = mapObject(PREFIX_ID_TAG, _ref2 => {
  let [key, value] = _ref2;
  return [value, key];
});
/**
 * @deprecated use `getDefaultPointerKey`
 * @hidden
 */

export let POINTER_KEY_BY_PREFIX;

(function (POINTER_KEY_BY_PREFIX) {
  POINTER_KEY_BY_PREFIX["ak"] = "account_pubkey";
  POINTER_KEY_BY_PREFIX["ok"] = "oracle_pubkey";
  POINTER_KEY_BY_PREFIX["ct"] = "contract_pubkey";
  POINTER_KEY_BY_PREFIX["ch"] = "channel";
})(POINTER_KEY_BY_PREFIX || (POINTER_KEY_BY_PREFIX = {}));
//# sourceMappingURL=index.mjs.map