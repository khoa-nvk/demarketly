{"version":3,"file":"spend.mjs","names":["BigNumber","sendTransaction","getAccount","getBalance","resolveName","_buildTx","buildTxHash","unpackTx","ArgumentError","Tag","send","tx","options","authFun","innerTx","undefined","onAccount","address","signed","signTransaction","networkId","onNode","getStatus","hash","rawTx","spend","amount","recipientIdOrName","SpendTx","senderId","recipientId","transferFunds","fraction","balance","bind","desiredAmount","times","integerValue","ROUND_HALF_UP","fee","plus","gt","minus","payForTransaction","transaction","PayingForTx","payerId"],"sources":["../src/spend.ts"],"sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2022 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\nimport BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getAccount, getBalance, resolveName,\n} from './chain';\nimport { _buildTx, BuildTxOptions } from './tx';\nimport { buildTxHash, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Sign and post a transaction to the chain\n * @category chain\n * @param tx - Transaction\n * @param options - Options\n * @param options.verify - Verify transaction before broadcast, throw error if not\n * valid\n * @returns Transaction\n */\nexport async function send(\n  tx: Encoded.Transaction,\n  options: SendOptions,\n): Promise<SendReturnType> {\n  // TODO: detect authFun in AccountGa\n  const authFun = options.innerTx === true\n    ? undefined\n    : (await getAccount(await options.onAccount.address(options), options)).authFun;\n\n  const signed = await options.onAccount.signTransaction(tx, {\n    ...options,\n    authFun,\n    networkId: (await options.onNode.getStatus()).networkId,\n  });\n\n  return options.innerTx === true\n    ? { hash: buildTxHash(signed), rawTx: signed }\n    : sendTransaction(signed, options);\n}\n\ntype SendOptionsType = Parameters<AccountBase['signTransaction']>[1]\n& Parameters<typeof sendTransaction>[1] & { onAccount: AccountBase };\nexport interface SendOptions extends SendOptionsType {}\ninterface SendReturnType extends Awaited<ReturnType<typeof sendTransaction>> {}\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof send> {\n  return send(\n    await _buildTx(Tag.SpendTx, {\n      ...options,\n      senderId: await options.onAccount.address(options),\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Send a fraction of coin balance to another account\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function transferFunds(\n  fraction: number | string,\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof send> {\n  if (fraction < 0 || fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = await options.onAccount.address(options);\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { tx: { fee } } = unpackTx(\n    await _buildTx(Tag.SpendTx, {\n      ...options, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return send(\n    await _buildTx(Tag.SpendTx, {\n      ...options, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof send> {\n  return send(\n    await _buildTx(\n      Tag.PayingForTx,\n      { ...options, payerId: await options.onAccount.address(options), tx: transaction },\n    ),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx'>, SendOptions {\n  onAccount: AccountBase;\n}\n"],"mappings":"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"}