{"version":3,"file":"Memory.mjs","names":["AccountBase","sign","isValidKeypair","isHex","ArgumentError","InvalidKeypairError","MissingParamError","decode","createMetaTx","secrets","WeakMap","AccountMemory","constructor","keypair","gaId","options","isGa","set","publicKey","isBuffer","secretKey","from","data","get","signTransaction","tx","innerTx","authData","authFun","onCompiler","onNode","onAccount","address"],"sources":["../../src/account/Memory.ts"],"sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2018 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\nimport AccountBase from './Base';\nimport { sign, isValidKeypair } from '../utils/crypto';\nimport { isHex } from '../utils/string';\nimport { ArgumentError, InvalidKeypairError, MissingParamError } from '../utils/errors';\nimport { decode, Encoded } from '../utils/encoder';\nimport { createMetaTx } from '../contract/ga';\n\nconst secrets = new WeakMap();\n\nexport interface Keypair {\n  publicKey: Encoded.AccountAddress;\n  secretKey: string | Uint8Array;\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  isGa: boolean;\n\n  /**\n   * @param options - Options\n   * @param options.keypair - Key pair to use\n   * @param options.keypair.publicKey - Public key\n   * @param options.keypair.secretKey - Private key\n   * @param options.gaId - Address of generalized account\n   */\n  constructor(\n    { keypair, gaId, ...options }: { keypair?: Keypair; gaId?: Encoded.AccountAddress }\n    & ConstructorParameters<typeof AccountBase>[0],\n  ) {\n    super(options);\n\n    this.isGa = gaId != null;\n    if (this.isGa && gaId != null) {\n      decode(gaId);\n      secrets.set(this, { publicKey: gaId });\n      return;\n    }\n\n    if (keypair == null) throw new MissingParamError('Either gaId or keypair is required');\n\n    if (\n      !Buffer.isBuffer(keypair.secretKey)\n      && typeof keypair.secretKey === 'string' && !isHex(keypair.secretKey)\n    ) throw new InvalidKeypairError('Secret key must be hex string or Buffer');\n    const secretKey = typeof keypair.secretKey === 'string'\n      ? Buffer.from(keypair.secretKey, 'hex')\n      : keypair.secretKey;\n    if (!isValidKeypair(secretKey, decode(keypair.publicKey))) {\n      throw new InvalidKeypairError('Invalid Key Pair');\n    }\n\n    secrets.set(this, {\n      secretKey,\n      publicKey: keypair.publicKey,\n    });\n  }\n\n  async sign(data: string | Uint8Array): Promise<Uint8Array> {\n    if (this.isGa) throw new InvalidKeypairError('You are trying to sign data using generalized account without keypair');\n    return sign(data, secrets.get(this).secretKey);\n  }\n\n  async signTransaction(\n    tx: Encoded.Transaction,\n    options: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (!this.isGa || options.innerTx === true) return super.signTransaction(tx, options);\n    const {\n      authData, authFun, onCompiler, onNode,\n    } = options;\n    if (authFun == null || authData == null || onCompiler == null || onNode == null) {\n      throw new ArgumentError('authData, authFun, onCompiler, onNode', 'provided', null);\n    }\n    return createMetaTx(tx, authData, authFun, { onCompiler, onNode, onAccount: this });\n  }\n\n  async address(): Promise<Encoded.AccountAddress> {\n    return secrets.get(this).publicKey;\n  }\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;OACOA,W;SACEC,I,EAAMC,c;SACNC,K;SACAC,a,EAAeC,mB,EAAqBC,iB;SACpCC,M;SACAC,Y;AAET,MAAMC,OAAO,GAAG,IAAIC,OAAJ,EAAhB;;AAOA;AACA;AACA;AACA,eAAe,MAAMC,aAAN,SAA4BX,WAA5B,CAAwC;EAGrD;AACF;AACA;AACA;AACA;AACA;AACA;EACEY,WAAW,OAGT;IAAA,IAFA;MAAEC,OAAF;MAAWC,IAAX;MAAiB,GAAGC;IAApB,CAEA;IACA,MAAMA,OAAN;IAEA,KAAKC,IAAL,GAAYF,IAAI,IAAI,IAApB;;IACA,IAAI,KAAKE,IAAL,IAAaF,IAAI,IAAI,IAAzB,EAA+B;MAC7BP,MAAM,CAACO,IAAD,CAAN;MACAL,OAAO,CAACQ,GAAR,CAAY,IAAZ,EAAkB;QAAEC,SAAS,EAAEJ;MAAb,CAAlB;MACA;IACD;;IAED,IAAID,OAAO,IAAI,IAAf,EAAqB,MAAM,IAAIP,iBAAJ,CAAsB,oCAAtB,CAAN;IAErB,IACE,CAAC,QAAOa,QAAP,CAAgBN,OAAO,CAACO,SAAxB,CAAD,IACG,OAAOP,OAAO,CAACO,SAAf,KAA6B,QADhC,IAC4C,CAACjB,KAAK,CAACU,OAAO,CAACO,SAAT,CAFpD,EAGE,MAAM,IAAIf,mBAAJ,CAAwB,yCAAxB,CAAN;IACF,MAAMe,SAAS,GAAG,OAAOP,OAAO,CAACO,SAAf,KAA6B,QAA7B,GACd,QAAOC,IAAP,CAAYR,OAAO,CAACO,SAApB,EAA+B,KAA/B,CADc,GAEdP,OAAO,CAACO,SAFZ;;IAGA,IAAI,CAAClB,cAAc,CAACkB,SAAD,EAAYb,MAAM,CAACM,OAAO,CAACK,SAAT,CAAlB,CAAnB,EAA2D;MACzD,MAAM,IAAIb,mBAAJ,CAAwB,kBAAxB,CAAN;IACD;;IAEDI,OAAO,CAACQ,GAAR,CAAY,IAAZ,EAAkB;MAChBG,SADgB;MAEhBF,SAAS,EAAEL,OAAO,CAACK;IAFH,CAAlB;EAID;;EAES,MAAJjB,IAAI,CAACqB,IAAD,EAAiD;IACzD,IAAI,KAAKN,IAAT,EAAe,MAAM,IAAIX,mBAAJ,CAAwB,uEAAxB,CAAN;IACf,OAAOJ,IAAI,CAACqB,IAAD,EAAOb,OAAO,CAACc,GAAR,CAAY,IAAZ,EAAkBH,SAAzB,CAAX;EACD;;EAEoB,MAAfI,eAAe,CACnBC,EADmB,EAGW;IAAA,IAD9BV,OAC8B,uEAD2B,EAC3B;IAC9B,IAAI,CAAC,KAAKC,IAAN,IAAcD,OAAO,CAACW,OAAR,KAAoB,IAAtC,EAA4C,OAAO,MAAMF,eAAN,CAAsBC,EAAtB,EAA0BV,OAA1B,CAAP;IAC5C,MAAM;MACJY,QADI;MACMC,OADN;MACeC,UADf;MAC2BC;IAD3B,IAEFf,OAFJ;;IAGA,IAAIa,OAAO,IAAI,IAAX,IAAmBD,QAAQ,IAAI,IAA/B,IAAuCE,UAAU,IAAI,IAArD,IAA6DC,MAAM,IAAI,IAA3E,EAAiF;MAC/E,MAAM,IAAI1B,aAAJ,CAAkB,uCAAlB,EAA2D,UAA3D,EAAuE,IAAvE,CAAN;IACD;;IACD,OAAOI,YAAY,CAACiB,EAAD,EAAKE,QAAL,EAAeC,OAAf,EAAwB;MAAEC,UAAF;MAAcC,MAAd;MAAsBC,SAAS,EAAE;IAAjC,CAAxB,CAAnB;EACD;;EAEY,MAAPC,OAAO,GAAoC;IAC/C,OAAOvB,OAAO,CAACc,GAAR,CAAY,IAAZ,EAAkBL,SAAzB;EACD;;AA/DoD"}