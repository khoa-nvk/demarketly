{"version":3,"file":"Base.mjs","names":["messageToHash","verifyMessage","verifyMessageCrypto","hash","buildTx","decode","Tag","getNetworkId","concatBuffers","isAccountBase","acc","some","f","AccountBase","constructor","networkId","signTransaction","tx","innerTx","options","prefixes","push","rlpBinaryTx","txWithNetworkId","from","join","signatures","sign","encodedTx","SignedTx","signMessage","message","returnHex","sig","toString","signature","address"],"sources":["../../src/account/Base.ts"],"sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2022 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\nimport { messageToHash, verifyMessage as verifyMessageCrypto, hash } from '../utils/crypto';\nimport { buildTx } from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport { Tag } from '../tx/builder/constants';\nimport { getNetworkId } from '../Node';\nimport { concatBuffers } from '../utils/other';\nimport type { createMetaTx } from '../contract/ga';\n\n/**\n * Check is provided object looks like an instance of AccountBase\n * @param acc - Object to check\n */\nexport const isAccountBase = (acc: AccountBase | any): boolean => (\n  !['sign', 'address', 'signTransaction', 'signMessage'].some((f) => typeof acc[f] !== 'function')\n);\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  networkId?: string;\n\n  /**\n   * @param options - Options\n   * @param options.networkId - Using for signing transactions\n   */\n  constructor({ networkId }: { networkId?: string } = {}) {\n    this.networkId ??= networkId;\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param opt - Options\n   * @param opt.innerTx - Sign as inner transaction for PayingFor\n   * @returns Signed transaction\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId, ...options }: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: Parameters<typeof createMetaTx>[1];\n      authFun?: Parameters<typeof createMetaTx>[2];\n    } & Omit<Partial<Parameters<typeof createMetaTx>[3]>, 'onAccount'> = {},\n  ): Promise<Encoded.Transaction> {\n    const prefixes = [await this.getNetworkId({ networkId })];\n    if (innerTx === true) prefixes.push('inner_tx');\n    const rlpBinaryTx = decode(tx);\n    const txWithNetworkId = concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ encodedTx: rlpBinaryTx, signatures }, Tag.SignedTx).tx;\n  }\n\n  /**\n   * Get network Id\n   * @returns Network Id\n   */\n  readonly getNetworkId = getNetworkId;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param opt - Options\n   * @returns Signature as hex string of Uint8Array\n   */\n  async signMessage(\n    message: string,\n    { returnHex = false, ...options }: { returnHex?: boolean } = {},\n  ): Promise<string | Uint8Array> {\n    const sig = await this.sign(messageToHash(message), options);\n    return returnHex ? Buffer.from(sig).toString('hex') : sig;\n  }\n\n  /**\n   * Verify message\n   * @param message - Message to verify\n   * @param signature - Signature\n   * @param options - Options\n   */\n  async verifyMessage(\n    message: string,\n    signature: string | Uint8Array,\n    options?: object,\n  ): Promise<boolean> {\n    return verifyMessageCrypto(\n      message,\n      typeof signature === 'string' ? Buffer.from(signature, 'hex') : signature,\n      decode(await this.address(options)),\n    );\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signed data blob\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Obtain account address\n   * @returns Public account address\n   */\n  abstract address(opt?: object): Promise<Encoded.AccountAddress>;\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;SACSA,a,EAAeC,aAAa,IAAIC,mB,EAAqBC,I;SACrDC,O;SACAC,M;SACAC,G;SACAC,Y;SACAC,a;;AAGT;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAIC,GAAD,IAC3B,CAAC,CAAC,MAAD,EAAS,SAAT,EAAoB,iBAApB,EAAuC,aAAvC,EAAsDC,IAAtD,CAA4DC,CAAD,IAAO,OAAOF,GAAG,CAACE,CAAD,CAAV,KAAkB,UAApF,CADI;AAIP;AACA;AACA;AACA;;AACA,eAAe,MAAeC,WAAf,CAA2B;EAGxC;AACF;AACA;AACA;EACEC,WAAW,GAA6C;IAAA;;IAAA,IAA5C;MAAEC;IAAF,CAA4C,uEAAJ,EAAI;;IAAA,sCAiChCR,YAjCgC;;IACtD,wBAAKQ,SAAL,kEAAKA,SAAL,GAAmBA,SAAnB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACuB,MAAfC,eAAe,CACnBC,EADmB,EAQW;IAAA,IAN9B;MAAEC,OAAF;MAAWH,SAAX;MAAsB,GAAGI;IAAzB,CAM8B,uEADuC,EACvC;IAC9B,MAAMC,QAAQ,GAAG,CAAC,MAAM,KAAKb,YAAL,CAAkB;MAAEQ;IAAF,CAAlB,CAAP,CAAjB;IACA,IAAIG,OAAO,KAAK,IAAhB,EAAsBE,QAAQ,CAACC,IAAT,CAAc,UAAd;IACtB,MAAMC,WAAW,GAAGjB,MAAM,CAACY,EAAD,CAA1B;IACA,MAAMM,eAAe,GAAGf,aAAa,CAAC,CAAC,QAAOgB,IAAP,CAAYJ,QAAQ,CAACK,IAAT,CAAc,GAAd,CAAZ,CAAD,EAAkCtB,IAAI,CAACmB,WAAD,CAAtC,CAAD,CAArC;IAEA,MAAMI,UAAU,GAAG,CAAC,MAAM,KAAKC,IAAL,CAAUJ,eAAV,EAA2BJ,OAA3B,CAAP,CAAnB;IACA,OAAOf,OAAO,CAAC;MAAEwB,SAAS,EAAEN,WAAb;MAA0BI;IAA1B,CAAD,EAAyCpB,GAAG,CAACuB,QAA7C,CAAP,CAA8DZ,EAArE;EACD;EAED;AACF;AACA;AACA;;;EAGE;AACF;AACA;AACA;AACA;AACA;EACmB,MAAXa,WAAW,CACfC,OADe,EAGe;IAAA,IAD9B;MAAEC,SAAS,GAAG,KAAd;MAAqB,GAAGb;IAAxB,CAC8B,uEAD+B,EAC/B;IAC9B,MAAMc,GAAG,GAAG,MAAM,KAAKN,IAAL,CAAU3B,aAAa,CAAC+B,OAAD,CAAvB,EAAkCZ,OAAlC,CAAlB;IACA,OAAOa,SAAS,GAAG,QAAOR,IAAP,CAAYS,GAAZ,EAAiBC,QAAjB,CAA0B,KAA1B,CAAH,GAAsCD,GAAtD;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACqB,MAAbhC,aAAa,CACjB8B,OADiB,EAEjBI,SAFiB,EAGjBhB,OAHiB,EAIC;IAClB,OAAOjB,mBAAmB,CACxB6B,OADwB,EAExB,OAAOI,SAAP,KAAqB,QAArB,GAAgC,QAAOX,IAAP,CAAYW,SAAZ,EAAuB,KAAvB,CAAhC,GAAgEA,SAFxC,EAGxB9B,MAAM,CAAC,MAAM,KAAK+B,OAAL,CAAajB,OAAb,CAAP,CAHkB,CAA1B;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;;;AA/E0C"}