import AccountBase from './Base';
import { Encoded } from '../utils/encoder';
/**
 * Account provided by wallet
 * @param params - Params
 * @param params.rpcClient - RpcClient instance
 * @param params.address - RPC account address
 * @returns AccountRpc instance
 */
export default class AccountRpc extends AccountBase {
    _rpcClient: any;
    _address: Encoded.AccountAddress;
    constructor({ rpcClient, address, ...options }: {
        rpcClient: any;
        address: Encoded.AccountAddress;
    } & ConstructorParameters<typeof AccountBase>[0]);
    sign(): Promise<Uint8Array>;
    address(): Promise<Encoded.AccountAddress>;
    /**
     * @returns Signed transaction
     */
    signTransaction(tx: Encoded.Transaction, { innerTx, networkId }?: Parameters<AccountBase['signTransaction']>[1]): Promise<Encoded.Transaction>;
    /**
     * @returns Signed message
     */
    signMessage(message: string, { returnHex }?: Parameters<AccountBase['signMessage']>[1]): Promise<string | Uint8Array>;
}
