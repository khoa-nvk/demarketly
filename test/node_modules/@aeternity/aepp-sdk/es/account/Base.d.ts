import { Encoded } from '../utils/encoder';
import { getNetworkId } from '../Node';
import type { createMetaTx } from '../contract/ga';
/**
 * Check is provided object looks like an instance of AccountBase
 * @param acc - Object to check
 */
export declare const isAccountBase: (acc: AccountBase | any) => boolean;
/**
 * Account is one of the three basic building blocks of an
 * {@link AeSdk} and provides access to a signing key pair.
 */
export default abstract class AccountBase {
    networkId?: string;
    /**
     * @param options - Options
     * @param options.networkId - Using for signing transactions
     */
    constructor({ networkId }?: {
        networkId?: string;
    });
    /**
     * Sign encoded transaction
     * @param tx - Transaction to sign
     * @param opt - Options
     * @param opt.innerTx - Sign as inner transaction for PayingFor
     * @returns Signed transaction
     */
    signTransaction(tx: Encoded.Transaction, { innerTx, networkId, ...options }?: {
        innerTx?: boolean;
        networkId?: string;
        authData?: Parameters<typeof createMetaTx>[1];
        authFun?: Parameters<typeof createMetaTx>[2];
    } & Omit<Partial<Parameters<typeof createMetaTx>[3]>, 'onAccount'>): Promise<Encoded.Transaction>;
    /**
     * Get network Id
     * @returns Network Id
     */
    readonly getNetworkId: typeof getNetworkId;
    /**
     * Sign message
     * @param message - Message to sign
     * @param opt - Options
     * @returns Signature as hex string of Uint8Array
     */
    signMessage(message: string, { returnHex, ...options }?: {
        returnHex?: boolean;
    }): Promise<string | Uint8Array>;
    /**
     * Verify message
     * @param message - Message to verify
     * @param signature - Signature
     * @param options - Options
     */
    verifyMessage(message: string, signature: string | Uint8Array, options?: object): Promise<boolean>;
    /**
     * Sign data blob
     * @param data - Data blob to sign
     * @param options - Options
     * @returns Signed data blob
     */
    abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;
    /**
     * Obtain account address
     * @returns Public account address
     */
    abstract address(opt?: object): Promise<Encoded.AccountAddress>;
}
