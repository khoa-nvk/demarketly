import AccountBase from './Base';
import { Encoded } from '../utils/encoder';
export interface Keypair {
    publicKey: Encoded.AccountAddress;
    secretKey: string | Uint8Array;
}
/**
 * In-memory account class
 */
export default class AccountMemory extends AccountBase {
    isGa: boolean;
    /**
     * @param options - Options
     * @param options.keypair - Key pair to use
     * @param options.keypair.publicKey - Public key
     * @param options.keypair.secretKey - Private key
     * @param options.gaId - Address of generalized account
     */
    constructor({ keypair, gaId, ...options }: {
        keypair?: Keypair;
        gaId?: Encoded.AccountAddress;
    } & ConstructorParameters<typeof AccountBase>[0]);
    sign(data: string | Uint8Array): Promise<Uint8Array>;
    signTransaction(tx: Encoded.Transaction, options?: Parameters<AccountBase['signTransaction']>[1]): Promise<Encoded.Transaction>;
    address(): Promise<Encoded.AccountAddress>;
}
