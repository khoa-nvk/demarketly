import { ChannelState, ChannelMessage, ChannelFsm, SignTx } from './internal';
import { Encoded } from '../utils/encoder';
import type Channel from '.';
export declare function appendSignature(tx: Encoded.Transaction, signFn: SignTx): Promise<Encoded.Transaction | number | null>;
export declare function awaitingConnection(channel: Channel, message: ChannelMessage): ChannelFsm | undefined;
export declare function awaitingReconnection(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm>;
export declare function awaitingChannelCreateTx(channel: Channel, message: ChannelMessage): Promise<ChannelFsm | undefined>;
export declare function awaitingOnChainTx(channel: Channel, message: ChannelMessage): ChannelFsm | undefined;
export declare function awaitingBlockInclusion(channel: Channel, message: ChannelMessage): ChannelFsm | undefined;
export declare function awaitingOpenConfirmation(channel: Channel, message: ChannelMessage): ChannelFsm | undefined;
export declare function awaitingInitialState(channel: Channel, message: ChannelMessage): ChannelFsm | undefined;
export declare function channelOpen(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm | undefined>;
export declare namespace channelOpen {
    var enter: (channel: Channel) => void;
}
export declare function awaitingOffChainTx(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm>;
export declare function awaitingOffChainUpdate(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm | undefined;
export declare function awaitingTxSignRequest(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm | undefined>;
export declare function awaitingUpdateConflict(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function awaitingShutdownTx(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm | undefined>;
export declare function awaitingShutdownOnChainTx(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function awaitingLeave(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function awaitingWithdrawTx(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm | undefined>;
export declare function awaitingWithdrawCompletion(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function awaitingDepositTx(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm | undefined>;
export declare function awaitingDepositCompletion(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function awaitingNewContractTx(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm | undefined>;
export declare function awaitingNewContractCompletion(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function awaitingCallContractUpdateTx(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm | undefined>;
export declare function awaitingCallContractForceProgressUpdate(channel: Channel, message: ChannelMessage, state: ChannelState): Promise<ChannelFsm | undefined>;
export declare function awaitingForceProgressCompletion(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function awaitingCallContractCompletion(channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function awaitingCallsPruned(_channels: Channel[], message: ChannelMessage, state: ChannelState): ChannelFsm;
export declare function channelClosed(_channel: Channel, message: ChannelMessage, state: ChannelState): ChannelFsm;
