{"version":3,"file":"encoder.mjs","names":["Sha256","DecodeError","ArgumentError","InvalidChecksumError","PayloadLengthError","concatBuffers","isKeyOfObject","Encoded","Encoding","sha256hash","input","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","data","type","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","encode","toString","decode","string","from","base58","bs58Encode","bs58Decode","parseType","maybeType","base64Type","find","t","base58Type","join","prefix","encodedPayload","extra","split","encoder"],"sources":["../../src/utils/encoder.ts"],"sourcesContent":["import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n * @deprecated use `SubtleCrypto.digest` or `sha.js` package instead\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n"],"mappings":"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"}