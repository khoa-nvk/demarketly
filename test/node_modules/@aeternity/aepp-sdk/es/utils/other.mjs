import _buffer from "buffer";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
const {
  Buffer: _Buffer
} = _buffer;
export const pause = async duration => new Promise(resolve => {
  setTimeout(resolve, duration);
});
export const mapObject = (object, fn) => Object.fromEntries(Object.entries(object).map(fn)); // remove after dropping webpack4 support

const isWebpack4Buffer = (() => {
  try {
    _Buffer.concat([Uint8Array.from([])]);

    return false;
  } catch (error) {
    return true;
  }
})();

export const concatBuffers = isWebpack4Buffer ? (list, totalLength) => _Buffer.concat(list.map(el => _Buffer.from(el)), totalLength) : _Buffer.concat;
/**
 * Object key type guard
 * @param key - Maybe object key
 * @param object - Object
 */

export function isKeyOfObject(key, object) {
  return key in object;
}
/**
 * Array item type guard
 * @param item - Maybe array item
 * @param array - Array
 */

export function isItemOfArray(item, array) {
  return _includesInstanceProperty(array).call(array, item);
}
//# sourceMappingURL=other.mjs.map