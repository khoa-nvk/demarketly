import nacl from 'tweetnacl';
import { CryptographyError } from './errors';
/**
 * Encrypt given data using `password`
 * @param password - Password to encrypt with
 * @param binaryData - Data to encrypt
 * @returns Encrypted data
 * @deprecated use 'sha.js' and 'aes-js' packages directly instead
 */
export declare function encryptKey(password: string, binaryData: Uint8Array): Uint8Array;
/**
 * Decrypt given data using `password`
 * @param password - Password to decrypt with
 * @param encrypted - Data to decrypt
 * @returns Decrypted data
 * @deprecated use 'sha.js' and 'aes-js' packages directly instead
 */
export declare function decryptKey(password: string, encrypted: Uint8Array): Uint8Array;
/**
 * @category exception
 */
export declare class DerivationError extends CryptographyError {
    constructor(message: string);
}
interface KeyTreeNode {
    secretKey: Uint8Array;
    chainCode: Uint8Array;
}
interface HDWallet {
    secretKey: string;
    chainCode: string;
}
interface Account {
    secretKey: string;
    publicKey: string;
}
declare type Dec<N extends number> = [-1, 0, 1, 2, 3, 4][N];
declare type Bip32PathT<MaxLen extends number, H extends 'H' | 'h' | '\''> = MaxLen extends -1 ? `${number}${H}` : Bip32PathT<Dec<MaxLen>, H> | `${Bip32PathT<Dec<MaxLen>, H>}/${number}${H}`;
declare type Bip32Path<MaxLen extends number> = '' | Bip32PathT<MaxLen, 'H'> | Bip32PathT<MaxLen, 'h'> | Bip32PathT<MaxLen, '\''>;
export declare function deriveChild({ secretKey, chainCode }: KeyTreeNode, index: number): KeyTreeNode;
export declare function derivePathFromKey(path: Bip32Path<5>, key: KeyTreeNode): KeyTreeNode;
export declare function getMasterKeyFromSeed(seed: Uint8Array): KeyTreeNode;
export declare function derivePathFromSeed(path: 'm' | `m/${Bip32Path<5>}`, seed: Uint8Array): KeyTreeNode;
export declare function getKeyPair(secretKey: Uint8Array): nacl.SignKeyPair;
export declare function generateSaveHDWalletFromSeed(seed: Uint8Array, password: string): HDWallet;
export declare function getSaveHDWalletAccounts(saveHDWallet: HDWallet, password: string, accountCount: number): Account[];
export declare const getHdWalletAccountFromSeed: (seed: Uint8Array, accountIdx: number) => Account & {
    idx: number;
};
export {};
