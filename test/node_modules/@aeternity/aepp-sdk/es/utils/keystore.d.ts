import nacl from 'tweetnacl';
declare const DERIVED_KEY_FUNCTIONS: {
    argon2id(pass: string | Uint8Array, salt: string | Uint8Array, params: Partial<Keystore['crypto']['kdf_params']>): Promise<Uint8Array>;
};
declare const CRYPTO_FUNCTIONS: {
    'xsalsa20-poly1305': {
        encrypt: nacl.secretbox;
        decrypt(box: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array;
    };
};
export interface Keystore {
    name: string;
    version: 1;
    public_key: string;
    id: string;
    crypto: {
        secret_type: 'ed25519';
        symmetric_alg: keyof typeof CRYPTO_FUNCTIONS;
        ciphertext: string;
        cipher_params: {
            nonce: string;
        };
        kdf: keyof typeof DERIVED_KEY_FUNCTIONS;
        kdf_params: {
            memlimit_kib: number;
            opslimit: number;
            parallelism: number;
            salt: string;
        };
    };
}
/**
 * Recover plaintext private key from secret-storage key object.
 * @param password - Keystore object password.
 * @param keystore - Keystore object.
 * @returns Plaintext private key.
 */
export declare function recover(password: string | Uint8Array, { crypto }: Keystore): Promise<string>;
/**
 * Export private key to keystore secret-storage format.
 * @param name - Key name.
 * @param password - User-supplied password.
 * @param privateKey - Private key as hex-string or a Buffer.
 * @param nonce - Randomly generated 24byte nonce.
 * @param salt - Randomly generated 16byte salt.
 * @param options - Encryption parameters.
 * @param options.kdf - Key derivation function.
 * @param options.kdf_params - KDF parameters.
 */
export declare function dump(name: string, password: string | Uint8Array, privateKey: string | Uint8Array, nonce?: Uint8Array, salt?: Uint8Array, options?: Partial<Keystore['crypto']>): Promise<Keystore>;
export {};
