import JsonBig from 'json-bigint';
import BigNumber from 'bignumber.js';
import { mapObject } from "./other.mjs";
const jsonBig = JsonBig({
  storeAsString: true
});

const convertValuesToBigNumbers = value => {
  if (typeof value === 'object' && value !== null && value.constructor === Object) {
    return mapObject(value, _ref => {
      let [k, v] = _ref;
      return [k, convertValuesToBigNumbers(v)];
    });
  }

  if (Array.isArray(value)) {
    return value.map(item => convertValuesToBigNumbers(item));
  }

  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {
    const bn = new BigNumber(value);

    bn.toJSON = () => bn.toString(10);

    return bn;
  }

  return value;
};

export default {
  stringify: function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1));
  },
  parse: jsonBig.parse
};
//# sourceMappingURL=json-big.mjs.map