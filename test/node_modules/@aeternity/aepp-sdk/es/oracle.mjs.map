{"version":3,"file":"oracle.mjs","names":["send","mapObject","pause","oracleQueryId","unpackTx","ORACLE_TTL","QUERY_FEE","QUERY_TTL","RESPONSE_TTL","Tag","RequestTimedOutError","decode","encode","Encoding","_getPollInterval","_buildTx","pollForQueries","oracleId","onQuery","interval","onNode","options","knownQueryIds","Set","checkNewQueries","queries","getOracleQueriesByPubkey","oracleQueries","filter","id","has","forEach","add","length","stopped","catch","console","error","pollForQueryResponse","queryId","height","ttl","response","getOracleQueryByPubkeyAndQueryId","responseBuffer","toString","getHeight","getQueryObject","record","decodedQuery","query","decodedResponse","respond","opt","respondToQuery","pollForResponse","postQueryToOracle","queryFee","getOracleByPubkey","senderId","onAccount","address","oracleQueryTx","OracleQueryTx","queryTtlType","type","queryTtlValue","value","responseTtlType","responseTtlValue","nonce","tx","extendOracleTtl","oracleExtendTx","OracleExtendTx","oracleTtlType","oracleTtlValue","callerId","getOracleObject","oracleRespondTx","OracleResponseTx","pollQueries","postQuery","extendOracle","getQuery","name","handler","args","lastArg","constructor","Object","assign","push","registerOracle","queryFormat","responseFormat","accountId","oracleRegisterTx","OracleRegisterTx","OracleAddress"],"sources":["../src/oracle.ts"],"sourcesContent":["/*\n * ISC License (ISC)\n * Copyright (c) 2022 aeternity developers\n *\n *  Permission to use, copy, modify, and/or distribute this software for any\n *  purpose with or without fee is hereby granted, provided that the above\n *  copyright notice and this permission notice appear in all copies.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n *  PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * Oracle methods - routines to interact with the Ã¦ternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { send, SendOptions } from './spend';\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx } from './tx/builder';\nimport {\n  ORACLE_TTL,\n  ORACLE_TTL_TYPES,\n  QUERY_FEE,\n  QUERY_TTL,\n  RESPONSE_TTL,\n} from './tx/builder/schema';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport { _getPollInterval } from './chain';\nimport { _buildTx, BuildTxOptions } from './tx';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (queries: OracleQueries) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach(({ id }) => knownQueryIds.add(id));\n    if (queries.length > 0) onQuery(queries);\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    if (height != null) await pause(interval);\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    height = await this.getHeight();\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(oracleId, queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[3]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @param options.queryTtl - queryTtl Oracle query time to leave\n * @param options.responseTtl - queryFee Oracle query response time to leave\n * @param options.queryFee - queryFee Oracle query fee\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<Awaited<ReturnType<typeof send>> & Awaited<ReturnType<typeof getQueryObject>>> {\n  options.queryFee ??= (await options.onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  const senderId = await options.onAccount.address(options);\n\n  const oracleQueryTx = await _buildTx(Tag.OracleQueryTx, {\n    queryTtlType: QUERY_TTL.type,\n    queryTtlValue: QUERY_TTL.value,\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx).tx;\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await send(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof send>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query' | 'queryTtlType' | 'queryTtlValue' | 'responseTtlType' | 'responseTtlValue'>\n& {\n  queryTtlType?: ORACLE_TTL_TYPES;\n  queryTtlValue?: number;\n  responseTtlType?: ORACLE_TTL_TYPES;\n  responseTtlValue?: number;\n};\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options object\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @param options.oracleTtlType - Oracle time to leave for extend\n * @param options.oracleTtlValue - Oracle time to leave for extend\n * @returns Oracle object\n */\nexport async function extendOracleTtl(\n  oracleId: Encoded.OracleAddress,\n  options: ExtendOracleTtlOptions,\n): Promise<Awaited<ReturnType<typeof send>> & Awaited<ReturnType<typeof getOracleObject>>> {\n  const oracleExtendTx = await _buildTx(Tag.OracleExtendTx, {\n    oracleTtlType: ORACLE_TTL.type,\n    oracleTtlValue: ORACLE_TTL.value,\n    ...options,\n    callerId: await options.onAccount.address(options),\n    oracleId,\n  });\n  return {\n    ...await send(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'oracleTtlType' | 'oracleTtlValue' | 'callerId' | 'oracleId'>\n& { oracleTtlType?: ORACLE_TTL_TYPES; oracleTtlValue?: number };\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @param options.responseTtl - responseTtl Query response time to leave\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<Awaited<ReturnType<typeof send>> & Awaited<ReturnType<typeof getOracleObject>>> {\n  const oracleRespondTx = await _buildTx(Tag.OracleResponseTx, {\n    responseTtlType: RESPONSE_TTL.type,\n    responseTtlValue: RESPONSE_TTL.value,\n    ...options,\n    callerId: await options.onAccount.address(options),\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await send(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response' | 'responseTtlType' | 'responseTtlValue'>\n& { responseTtlType?: ORACLE_TTL_TYPES; responseTtlValue?: number };\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(oracleId, ...args);\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @param options.queryFee - Oracle query Fee\n * @param options - Options object\n * @param options.abiVersion - Always 0 (do not use virtual machine)\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<Awaited<ReturnType<typeof send>> & Awaited<ReturnType<typeof getOracleObject>>> {\n  const accountId = await options.onAccount.address(options);\n  const oracleRegisterTx = await _buildTx(Tag.OracleRegisterTx, {\n    queryFee: QUERY_FEE,\n    oracleTtlValue: ORACLE_TTL.value,\n    oracleTtlType: ORACLE_TTL.type,\n    ...options,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await send(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat' | 'queryFee' | 'oracleTtlType' | 'oracleTtlValue'>\n& {\n  queryFee?: number | string | BigNumber;\n  oracleTtlType?: ORACLE_TTL_TYPES;\n  oracleTtlValue?: number;\n};\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n"],"mappings":"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"}