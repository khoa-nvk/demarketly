import * as coreClient from "@azure/core-client";

export interface Contract {
  code: string;
  options: CompileOpts;
}

export interface CompileOpts {
  /** Compiler backend; fate | aevm */
  backend?: CompileOptsBackend;
  /** An explicit file system, mapping file names to file content */
  fileSystem?: Record<string, unknown>;
  /** Name of contract source file - only used in error messages */
  srcFile?: string;
}

export interface Aci {
  /** Any object */
  encodedAci: Record<string, unknown>;
  externalEncodedAci?: Record<string, unknown>[];
  interface: string;
}

export interface CompilerError {
  context?: string;
  message: string;
  pos: ErrorPos;
  type: string;
}

export interface ErrorPos {
  col: number;
  file?: string;
  line: number;
}

export interface ErrorModel {
  reason: string;
}

export interface APIVersion {
  /** API compiler version */
  apiVersion: string;
}

export interface ByteCode {
  /** Prefixed (cb_) Base64Check encoded byte array */
  bytecode: string;
}

export interface ByteCodeInput {
  /** Compiled contract */
  bytecode: string;
}

export interface CompilerVersion {
  /** Sophia compiler version */
  version: string;
}

export interface SophiaCallResultInput {
  /** Call result type (ok | revert | error) */
  callResult: string;
  /** Call result value (ABI encoded data or error string) */
  callValue: string;
  /** Name of the called function */
  function: string;
  options?: CompileOpts;
  /** (Possibly partial) Sophia contract code/interface */
  source: string;
}

export interface BytecodeCallResultInput {
  /** Compiler backend; fate | aevm */
  backend?: BytecodeCallResultInputBackend;
  /** Compiled contract */
  bytecode: string;
  /** Call result type (ok | revert | error) */
  callResult: string;
  /** Call result value (ABI encoded data or error string) */
  callValue: string;
  /** Name of the called function */
  function: string;
}

export interface DecodedCallresult {
  function: string;
  /** Any object */
  result: Record<string, unknown>;
}

export interface DecodeCalldataBytecode {
  /** Compiler backend; fate | aevm */
  backend?: DecodeCalldataBytecodeBackend;
  /** Compiled contract */
  bytecode: string;
  /** Calldata to dissect */
  calldata: string;
}

export interface DecodedCalldata {
  arguments: Record<string, unknown>[];
  function: string;
}

export interface DecodeCalldataSource {
  /** Calldata to dissect */
  calldata: string;
  /** Name of the function to call */
  function: string;
  options?: CompileOpts;
  /** (Possibly partial) Sophia contract code */
  source: string;
}

export interface SophiaBinaryData {
  data: string;
  sophiaType: string;
}

export interface SophiaJsonData {
  /** Any object */
  data: Record<string, unknown>;
}

export interface FunctionCallInput {
  /** Array of function call arguments */
  arguments: string[];
  /** Name of function to call */
  function: string;
  options?: CompileOpts;
  /** (Possibly partial) Sophia contract code */
  source: string;
}

export interface Calldata {
  /** Prefixed (cb_) Base64Check encoded byte array */
  calldata: string;
}

export interface FateAssembler {
  /** Fate assembler code */
  fateAssembler: string;
}

export interface ValidateByteCodeInput {
  /** Compiled contract */
  bytecode: string;
  options: CompileOpts;
  /** Sophia contract source code */
  source: string;
}

/** Known values of {@link CompileOptsBackend} that the service accepts. */
export enum KnownCompileOptsBackend {
  Fate = "fate",
  Aevm = "aevm"
}

/**
 * Defines values for CompileOptsBackend. \
 * {@link KnownCompileOptsBackend} can be used interchangeably with CompileOptsBackend,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **fate** \
 * **aevm**
 */
export type CompileOptsBackend = string;

/** Known values of {@link BytecodeCallResultInputBackend} that the service accepts. */
export enum KnownBytecodeCallResultInputBackend {
  Fate = "fate",
  Aevm = "aevm"
}

/**
 * Defines values for BytecodeCallResultInputBackend. \
 * {@link KnownBytecodeCallResultInputBackend} can be used interchangeably with BytecodeCallResultInputBackend,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **fate** \
 * **aevm**
 */
export type BytecodeCallResultInputBackend = string;

/** Known values of {@link DecodeCalldataBytecodeBackend} that the service accepts. */
export enum KnownDecodeCalldataBytecodeBackend {
  Fate = "fate",
  Aevm = "aevm"
}

/**
 * Defines values for DecodeCalldataBytecodeBackend. \
 * {@link KnownDecodeCalldataBytecodeBackend} can be used interchangeably with DecodeCalldataBytecodeBackend,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **fate** \
 * **aevm**
 */
export type DecodeCalldataBytecodeBackend = string;

/** Optional parameters. */
export interface GenerateACIOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the generateACI operation. */
export type GenerateACIResponse = Aci;

/** Optional parameters. */
export interface ApiOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the api operation. */
export type ApiResponse = Record<string, unknown>;

/** Optional parameters. */
export interface APIVersionOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the aPIVersion operation. */
export type APIVersionResponse = APIVersion;

/** Optional parameters. */
export interface CompileContractOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the compileContract operation. */
export type CompileContractResponse = ByteCode;

/** Optional parameters. */
export interface GetCompilerVersionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCompilerVersion operation. */
export type GetCompilerVersionResponse = CompilerVersion;

/** Optional parameters. */
export interface DecodeCallResultOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the decodeCallResult operation. */
export type DecodeCallResultResponse = {
  /** The parsed response body. */
  body: any;
};

/** Optional parameters. */
export interface DecodeCallResultBytecodeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the decodeCallResultBytecode operation. */
export type DecodeCallResultBytecodeResponse = DecodedCallresult;

/** Optional parameters. */
export interface DecodeCalldataBytecodeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the decodeCalldataBytecode operation. */
export type DecodeCalldataBytecodeResponse = DecodedCalldata;

/** Optional parameters. */
export interface DecodeCalldataSourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the decodeCalldataSource operation. */
export type DecodeCalldataSourceResponse = DecodedCalldata;

/** Optional parameters. */
export interface DecodeDataOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the decodeData operation. */
export type DecodeDataResponse = SophiaJsonData;

/** Optional parameters. */
export interface EncodeCalldataOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the encodeCalldata operation. */
export type EncodeCalldataResponse = Calldata;

/** Optional parameters. */
export interface GetFateAssemblerCodeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFateAssemblerCode operation. */
export type GetFateAssemblerCodeResponse = FateAssembler;

/** Optional parameters. */
export interface ValidateByteCodeOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VersionOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the version operation. */
export type VersionResponse = CompilerVersion;

/** Optional parameters. */
export interface CompilerOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
